{
    "requests_ex":
    [
        "await client(telethon.tl.functions.account.AcceptAuthorizationRequest(\n    bot_id=42,\n    scope='some string here',\n    public_key='some string here',\n    value_hashes=[telethon.tl.types.SecureValueHash(\n        type=telethon.tl.types.SecureValueTypePersonalDetails(),\n        hash=b'arbitrary\\x7f data \\xfa here'\n    )],\n    credentials=telethon.tl.types.SecureCredentialsEncrypted(\n        data=b'arbitrary\\x7f data \\xfa here',\n        hash=b'arbitrary\\x7f data \\xfa here',\n        secret=b'arbitrary\\x7f data \\xfa here'\n    )\n))",
        "await client(telethon.tl.functions.phone.AcceptCallRequest(\n    peer=telethon.tl.types.InputPhoneCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    g_b=b'arbitrary\\x7f data \\xfa here',\n    protocol=telethon.tl.types.PhoneCallProtocol(\n        min_layer=42,\n        max_layer=42,\n        library_versions=['some string here'],\n        udp_p2p=True,\n        udp_reflector=True\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.contacts.AcceptContactRequest(\n    id='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.AcceptEncryptionRequest(\n    peer=telethon.tl.types.InputEncryptedChat(\n        chat_id=478614198,\n        access_hash=-12398745604826\n    ),\n    g_b=b'arbitrary\\x7f data \\xfa here',\n    key_fingerprint=-12398745604826\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.AcceptLoginTokenRequest(\n    token=b'arbitrary\\x7f data \\xfa here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.AcceptTermsOfServiceRequest(\n    id=telethon.tl.types.DataJSON(\n        data='some string here'\n    )\n))",
        "await client(telethon.tl.functions.messages.AcceptUrlAuthRequest(\n    write_allowed=True,\n    peer='username',\n    msg_id=42,\n    button_id=42,\n    url='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.AddChatUserRequest(\n    chat_id=478614198,\n    user_id='username',\n    fwd_limit=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.contacts.AddContactRequest(\n    id='username',\n    first_name='some string here',\n    last_name='some string here',\n    phone='some string here',\n    add_phone_privacy_exception=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.stickers.AddStickerToSetRequest(\n    stickerset=telethon.tl.types.InputStickerSetID(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    sticker=telethon.tl.types.InputStickerSetItem(\n        document=telethon.tl.types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        emoji='some string here',\n        mask_coords=telethon.tl.types.MaskCoords(\n            n=42,\n            x=7.13,\n            y=7.13,\n            zoom=7.13\n        )\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.bots.AnswerWebhookJSONQueryRequest(\n    query_id=-12398745604826,\n    data=telethon.tl.types.DataJSON(\n        data='some string here'\n    )\n))",
        "await client(telethon.tl.functions.auth.BindTempAuthKeyRequest(\n    perm_auth_key_id=-12398745604826,\n    nonce=-12398745604826,\n    expires_at=datetime.timedelta(minutes=5),\n    encrypted_message=b'arbitrary\\x7f data \\xfa here'\n))",
        "await client(telethon.tl.functions.contacts.BlockRequest(\n    id='username'\n))",
        "await client(telethon.tl.functions.contacts.BlockFromRepliesRequest(\n    msg_id=42,\n    delete_message=True,\n    delete_history=True,\n    report_spam=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.CancelCodeRequest(\n    phone_number='some string here',\n    phone_code_hash='some string here'\n))",
        "await client(telethon.tl.functions.account.CancelPasswordEmailRequest())",
        "await client(telethon.tl.functions.account.ChangePhoneRequest(\n    phone_number='some string here',\n    phone_code_hash='some string here',\n    phone_code='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.stickers.ChangeStickerPositionRequest(\n    sticker=telethon.tl.types.InputDocument(\n        id=-12398745604826,\n        access_hash=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    ),\n    position=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.CheckChatInviteRequest(\n    hash='A4LmkR23G0IGxBE71zZfo1'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.CheckGroupCallRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    sources=[42]\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.messages.CheckHistoryImportRequest(\n    import_head='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.CheckHistoryImportPeerRequest(\n    peer='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.CheckPasswordRequest(\n    password=telethon.tl.types.InputCheckPasswordSRP(\n        srp_id=-12398745604826,\n        A=b'arbitrary\\x7f data \\xfa here',\n        M1=b'arbitrary\\x7f data \\xfa here'\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.stickers.CheckShortNameRequest(\n    short_name='some string here'\n))",
        "await client(telethon.tl.functions.account.CheckUsernameRequest(\n    username='some string here'\n))",
        "await client(telethon.tl.functions.channels.CheckUsernameRequest(\n    channel='username',\n    username='some string here'\n))",
        "await client(telethon.tl.functions.messages.ClearAllDraftsRequest())",
        "await client(telethon.tl.functions.messages.ClearRecentStickersRequest(\n    attached=True\n))",
        "await client(telethon.tl.functions.payments.ClearSavedInfoRequest(\n    credentials=True,\n    info=True\n))",
        "await client(telethon.tl.functions.phone.ConfirmCallRequest(\n    peer=telethon.tl.types.InputPhoneCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    g_a=b'arbitrary\\x7f data \\xfa here',\n    key_fingerprint=-12398745604826,\n    protocol=telethon.tl.types.PhoneCallProtocol(\n        min_layer=42,\n        max_layer=42,\n        library_versions=['some string here'],\n        udp_p2p=True,\n        udp_reflector=True\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.ConfirmPasswordEmailRequest(\n    code='some string here'\n))",
        "await client(telethon.tl.functions.account.ConfirmPhoneRequest(\n    phone_code_hash='some string here',\n    phone_code='some string here'\n))",
        "await client(telethon.tl.functions.channels.ConvertToGigagroupRequest(\n    channel='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.CreateChannelRequest(\n    title='My awesome title',\n    about='some string here',\n    megagroup=True,\n    for_import=True,\n    geo_point=telethon.tl.types.InputGeoPoint(\n        lat=7.13,\n        long=7.13,\n        accuracy_radius=42\n    ),\n    address='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.CreateChatRequest(\n    users=['username'],\n    title='My awesome title'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.CreateGroupCallRequest(\n    peer='username',\n    title='My awesome title',\n    schedule_date=datetime.datetime(2018, 6, 25)\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.stickers.CreateStickerSetRequest(\n    user_id='username',\n    title='My awesome title',\n    short_name='some string here',\n    stickers=[telethon.tl.types.InputStickerSetItem(\n        document=telethon.tl.types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        ),\n        emoji='some string here',\n        mask_coords=telethon.tl.types.MaskCoords(\n            n=42,\n            x=7.13,\n            y=7.13,\n            zoom=7.13\n        )\n    )],\n    masks=True,\n    animated=True,\n    thumb=telethon.tl.types.InputDocument(\n        id=-12398745604826,\n        access_hash=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    ),\n    software='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.CreateThemeRequest(\n    slug='some string here',\n    title='My awesome title',\n    document=telethon.tl.types.InputDocument(\n        id=-12398745604826,\n        access_hash=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    ),\n    settings=telethon.tl.types.InputThemeSettings(\n        base_theme=telethon.tl.types.BaseThemeClassic(),\n        accent_color=42,\n        message_top_color=42,\n        message_bottom_color=42,\n        wallpaper=telethon.tl.types.InputWallPaper(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        wallpaper_settings=telethon.tl.types.WallPaperSettings(\n            blur=True,\n            motion=True,\n            background_color=42,\n            second_background_color=42,\n            third_background_color=42,\n            fourth_background_color=42,\n            intensity=42,\n            rotation=42\n        )\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.DeleteAccountRequest(\n    reason='some string here'\n))",
        "await client(telethon.tl.functions.contacts.DeleteByPhonesRequest(\n    phones=['some string here']\n))",
        "await client(telethon.tl.functions.channels.DeleteChannelRequest(\n    channel='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.DeleteChatRequest(\n    chat_id=478614198\n))",
        "await client(telethon.tl.functions.messages.DeleteChatUserRequest(\n    chat_id=478614198,\n    user_id='username',\n    revoke_history=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.contacts.DeleteContactsRequest(\n    id=['username']\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.DeleteExportedChatInviteRequest(\n    peer='username',\n    link='some string here'\n))",
        "await client(telethon.tl.functions.folders.DeleteFolderRequest(\n    folder_id=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.DeleteHistoryRequest(\n    peer='username',\n    max_id=0,\n    just_clear=True,\n    revoke=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.DeleteHistoryRequest(\n    channel='username',\n    max_id=0\n))",
        "await client(telethon.tl.functions.messages.DeleteMessagesRequest(\n    id=[42],\n    revoke=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.DeleteMessagesRequest(\n    channel='username',\n    id=[42]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.DeletePhoneCallHistoryRequest(\n    revoke=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.photos.DeletePhotosRequest(\n    id=[telethon.tl.types.InputPhoto(\n        id=-12398745604826,\n        access_hash=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    )]\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.messages.DeleteRevokedExportedChatInvitesRequest(\n    peer='username',\n    admin_id='username'\n))",
        "await client(telethon.tl.functions.messages.DeleteScheduledMessagesRequest(\n    peer='username',\n    id=[42]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.DeleteSecureValueRequest(\n    types=[telethon.tl.types.SecureValueTypePersonalDetails()]\n))",
        "await client(telethon.tl.functions.channels.DeleteUserHistoryRequest(\n    channel='username',\n    user_id='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.DestroyAuthKeyRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.DestroySessionRequest(\n    session_id=-12398745604826\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.DiscardCallRequest(\n    peer=telethon.tl.types.InputPhoneCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    duration=42,\n    reason=telethon.tl.types.PhoneCallDiscardReasonMissed(),\n    connection_id=-12398745604826,\n    video=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.DiscardEncryptionRequest(\n    chat_id=478614198,\n    delete_history=True\n))",
        "await client(telethon.tl.functions.phone.DiscardGroupCallRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.DismissSuggestionRequest(\n    peer='username',\n    suggestion='some string here'\n))",
        "await client(telethon.tl.functions.auth.DropTempAuthKeysRequest(\n    except_auth_keys=[-12398745604826]\n))",
        "await client(telethon.tl.functions.channels.EditAdminRequest(\n    channel='username',\n    user_id='username',\n    admin_rights=telethon.tl.types.ChatAdminRights(\n        change_info=True,\n        post_messages=True,\n        edit_messages=True,\n        delete_messages=True,\n        ban_users=True,\n        invite_users=True,\n        pin_messages=True,\n        add_admins=True,\n        anonymous=True,\n        manage_call=True,\n        other=True\n    ),\n    rank='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.EditBannedRequest(\n    channel='username',\n    participant='username',\n    banned_rights=telethon.tl.types.ChatBannedRights(\n        until_date=datetime.timedelta(days=14),\n        view_messages=None,\n        send_messages=None,\n        send_media=True,\n        send_stickers=True,\n        send_gifs=True,\n        send_games=True,\n        send_inline=True,\n        send_polls=True,\n        change_info=True,\n        invite_users=True,\n        pin_messages=True\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.EditChatAboutRequest(\n    peer='username',\n    about='some string here'\n))",
        "await client(telethon.tl.functions.messages.EditChatAdminRequest(\n    chat_id=478614198,\n    user_id='username',\n    is_admin=False\n))",
        "await client(telethon.tl.functions.messages.EditChatDefaultBannedRightsRequest(\n    peer='username',\n    banned_rights=telethon.tl.types.ChatBannedRights(\n        until_date=datetime.timedelta(days=14),\n        view_messages=None,\n        send_messages=None,\n        send_media=True,\n        send_stickers=True,\n        send_gifs=True,\n        send_games=True,\n        send_inline=True,\n        send_polls=True,\n        change_info=True,\n        invite_users=True,\n        pin_messages=True\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.EditChatPhotoRequest(\n    chat_id=478614198,\n    photo=client.upload_file('/path/to/photo.jpg')\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.EditChatTitleRequest(\n    chat_id=478614198,\n    title='My awesome title'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.EditCreatorRequest(\n    channel='username',\n    user_id='username',\n    password=telethon.tl.types.InputCheckPasswordSRP(\n        srp_id=-12398745604826,\n        A=b'arbitrary\\x7f data \\xfa here',\n        M1=b'arbitrary\\x7f data \\xfa here'\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.EditExportedChatInviteRequest(\n    peer='username',\n    link='some string here',\n    revoked=True,\n    expire_date=datetime.datetime(2018, 6, 25),\n    usage_limit=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.EditGroupCallParticipantRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    participant='username',\n    muted=False,\n    volume=42,\n    raise_hand=False,\n    video_stopped=False,\n    video_paused=False,\n    presentation_paused=False\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.EditGroupCallTitleRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    title='My awesome title'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.EditInlineBotMessageRequest(\n    id=telethon.tl.types.InputBotInlineMessageID(\n        dc_id=42,\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    no_webpage=True,\n    message='Hello there!',\n    media=telethon.tl.types.InputMediaUploadedPhoto(\n        file=client.upload_file('/path/to/file.jpg'),\n        stickers=[telethon.tl.types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        )],\n        ttl_seconds=42\n    )\n))",
        "await client(telethon.tl.functions.channels.EditLocationRequest(\n    channel='username',\n    geo_point=telethon.tl.types.InputGeoPoint(\n        lat=7.13,\n        long=7.13,\n        accuracy_radius=42\n    ),\n    address='some string here'\n))",
        "await client(telethon.tl.functions.messages.EditMessageRequest(\n    peer='username',\n    id=42,\n    no_webpage=True,\n    message='Hello there!',\n    media=telethon.tl.types.InputMediaUploadedPhoto(\n        file=client.upload_file('/path/to/file.jpg'),\n        stickers=[telethon.tl.types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        )],\n        ttl_seconds=42\n    ),\n    schedule_date=datetime.datetime(2018, 6, 25)\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.folders.EditPeerFoldersRequest(\n    folder_peers=[telethon.tl.types.InputFolderPeer(\n        peer='username',\n        folder_id=42\n    )]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.EditPhotoRequest(\n    channel='username',\n    photo=client.upload_file('/path/to/photo.jpg')\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.EditTitleRequest(\n    channel='username',\n    title='My awesome title'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.EditUserInfoRequest(\n    user_id='username',\n    message='Hello there!',\n    entities=[telethon.tl.types.MessageEntityUnknown(\n        offset=42,\n        length=42\n    )]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.ExportAuthorizationRequest(\n    dc_id=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.ExportChatInviteRequest(\n    peer='username',\n    legacy_revoke_permanent=True,\n    expire_date=datetime.datetime(2018, 6, 25),\n    usage_limit=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.ExportGroupCallInviteRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    can_self_unmute=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.ExportLoginTokenRequest(\n    api_id=42,\n    api_hash='some string here',\n    except_ids=[42]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.ExportMessageLinkRequest(\n    channel='username',\n    id=42,\n    thread=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.FaveStickerRequest(\n    id=telethon.tl.types.InputDocument(\n        id=-12398745604826,\n        access_hash=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    ),\n    unfave=False\n))",
        "await client(telethon.tl.functions.account.FinishTakeoutSessionRequest(\n    success=True\n))",
        "await client(telethon.tl.functions.messages.ForwardMessagesRequest(\n    from_peer='username',\n    id=[42],\n    to_peer='username',\n    with_my_score=True,\n    schedule_date=datetime.datetime(2018, 6, 25)\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetAccountTTLRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.GetAdminLogRequest(\n    channel='username',\n    q='some string here',\n    max_id=0,\n    min_id=0,\n    limit=100,\n    events_filter=telethon.tl.types.ChannelAdminLogEventsFilter(\n        join=True,\n        leave=True,\n        invite=True,\n        ban=True,\n        unban=True,\n        kick=True,\n        unkick=True,\n        promote=True,\n        demote=True,\n        info=True,\n        settings=True,\n        pinned=True,\n        group_call=True,\n        invites=True\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.GetAdminedPublicChannelsRequest(\n    by_location=True,\n    check_limit=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetAdminsWithInvitesRequest(\n    peer='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetAllChatsRequest(\n    except_ids=[42]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetAllDraftsRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetAllSecureValuesRequest())\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.messages.GetAllStickersRequest(\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetAppChangelogRequest(\n    prev_app_version='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetAppConfigRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetAppUpdateRequest(\n    source='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetArchivedStickersRequest(\n    offset_id=-12398745604826,\n    limit=100,\n    masks=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetAttachedStickersRequest(\n    media=telethon.tl.types.InputStickeredMediaPhoto(\n        id=telethon.tl.types.InputPhoto(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        )\n    )\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.account.GetAuthorizationFormRequest(\n    bot_id=42,\n    scope='some string here',\n    public_key='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetAuthorizationsRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetAutoDownloadSettingsRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.payments.GetBankCardDataRequest(\n    number='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.contacts.GetBlockedRequest(\n    offset=42,\n    limit=100\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetBotCallbackAnswerRequest(\n    peer='username',\n    msg_id=42,\n    game=True,\n    data=b'arbitrary\\x7f data \\xfa here',\n    password=telethon.tl.types.InputCheckPasswordSRP(\n        srp_id=-12398745604826,\n        A=b'arbitrary\\x7f data \\xfa here',\n        M1=b'arbitrary\\x7f data \\xfa here'\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.bots.GetBotCommandsRequest(\n    scope=telethon.tl.types.BotCommandScopeDefault(),\n    lang_code='en'\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.stats.GetBroadcastStatsRequest(\n    channel='username',\n    dark=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.GetCallConfigRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetCdnConfigRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.upload.GetCdnFileRequest(\n    file_token=b'arbitrary\\x7f data \\xfa here',\n    offset=42,\n    limit=100\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.upload.GetCdnFileHashesRequest(\n    file_token=b'arbitrary\\x7f data \\xfa here',\n    offset=42\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.updates.GetChannelDifferenceRequest(\n    channel='username',\n    filter=telethon.tl.types.ChannelMessagesFilter(\n        ranges=[telethon.tl.types.MessageRange(\n            min_id=0,\n            max_id=0\n        )],\n        exclude_new_messages=True\n    ),\n    pts=42,\n    limit=100,\n    force=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.GetChannelsRequest(\n    id=['username']\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetChatInviteImportersRequest(\n    peer='username',\n    link='some string here',\n    offset_date=datetime.datetime(2018, 6, 25),\n    offset_user='username',\n    limit=100\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetChatsRequest(\n    id=[42]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetCommonChatsRequest(\n    user_id='username',\n    max_id=0,\n    limit=100\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetConfigRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.contacts.GetContactIDsRequest(\n    hash=0\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.account.GetContactSignUpNotificationRequest())",
        "await client(telethon.tl.functions.contacts.GetContactsRequest(\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetContentSettingsRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetCountriesListRequest(\n    lang_code='en',\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetDeepLinkInfoRequest(\n    path='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetDhConfigRequest(\n    version=42,\n    random_length=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetDialogFiltersRequest())\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.messages.GetDialogUnreadMarksRequest())\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.messages.GetDialogsRequest(\n    offset_date=datetime.datetime(2018, 6, 25),\n    offset_id=42,\n    offset_peer='username',\n    limit=100,\n    hash=0,\n    exclude_pinned=True,\n    folder_id=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.updates.GetDifferenceRequest(\n    pts=42,\n    date=datetime.datetime(2018, 6, 25),\n    qts=42,\n    pts_total_limit=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.langpack.GetDifferenceRequest(\n    lang_pack='',\n    lang_code='en',\n    from_version=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetDiscussionMessageRequest(\n    peer='username',\n    msg_id=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetDocumentByHashRequest(\n    sha256=b'arbitrary\\x7f data \\xfa here',\n    size=42,\n    mime_type='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetEmojiKeywordsRequest(\n    lang_code='en'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetEmojiKeywordsDifferenceRequest(\n    lang_code='en',\n    from_version=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetEmojiKeywordsLanguagesRequest(\n    lang_codes=['some string here']\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.messages.GetEmojiURLRequest(\n    lang_code='en'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetExportedChatInviteRequest(\n    peer='username',\n    link='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetExportedChatInvitesRequest(\n    peer='username',\n    admin_id='username',\n    limit=100,\n    revoked=True,\n    offset_date=datetime.datetime(2018, 6, 25),\n    offset_link='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetFavedStickersRequest(\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetFeaturedStickersRequest(\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.upload.GetFileRequest(\n    location=telethon.tl.types.InputFileLocation(\n        volume_id=-12398745604826,\n        local_id=42,\n        secret=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    ),\n    offset=42,\n    limit=100,\n    precise=True,\n    cdn_supported=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.upload.GetFileHashesRequest(\n    location=telethon.tl.types.InputFileLocation(\n        volume_id=-12398745604826,\n        local_id=42,\n        secret=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    ),\n    offset=42\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.channels.GetFullChannelRequest(\n    channel='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetFullChatRequest(\n    chat_id=478614198\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.users.GetFullUserRequest(\n    id='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetGameHighScoresRequest(\n    peer='username',\n    id=42,\n    user_id='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetGlobalPrivacySettingsRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.GetGroupCallRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.GetGroupCallJoinAsRequest(\n    peer='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.GetGroupParticipantsRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    ids=['username'],\n    sources=[42],\n    offset='some string here',\n    limit=100\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.GetGroupsForDiscussionRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetHistoryRequest(\n    peer='username',\n    offset_id=42,\n    offset_date=datetime.datetime(2018, 6, 25),\n    add_offset=0,\n    limit=100,\n    max_id=0,\n    min_id=0,\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.GetInactiveChannelsRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetInlineBotResultsRequest(\n    bot='username',\n    peer='username',\n    query='some string here',\n    offset='some string here',\n    geo_point=telethon.tl.types.InputGeoPoint(\n        lat=7.13,\n        long=7.13,\n        accuracy_radius=42\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetInlineGameHighScoresRequest(\n    id=telethon.tl.types.InputBotInlineMessageID(\n        dc_id=42,\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    user_id='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetInviteTextRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.langpack.GetLangPackRequest(\n    lang_pack='',\n    lang_code='en'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.langpack.GetLanguageRequest(\n    lang_pack='',\n    lang_code='en'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.langpack.GetLanguagesRequest(\n    lang_pack=''\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.channels.GetLeftChannelsRequest(\n    offset=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.contacts.GetLocatedRequest(\n    geo_point=telethon.tl.types.InputGeoPoint(\n        lat=7.13,\n        long=7.13,\n        accuracy_radius=42\n    ),\n    self_expires=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetMaskStickersRequest(\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.stats.GetMegagroupStatsRequest(\n    channel='username',\n    dark=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetMessageEditDataRequest(\n    peer='username',\n    id=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.stats.GetMessagePublicForwardsRequest(\n    channel='username',\n    msg_id=42,\n    offset_rate=42,\n    offset_peer='username',\n    offset_id=42,\n    limit=100\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.stats.GetMessageStatsRequest(\n    channel='username',\n    msg_id=42,\n    dark=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetMessagesRequest(\n    id=[42]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.GetMessagesRequest(\n    channel='username',\n    id=[42]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetMessagesViewsRequest(\n    peer='username',\n    id=[42],\n    increment=False\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetMultiWallPapersRequest(\n    wallpapers=[telethon.tl.types.InputWallPaper(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    )]\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.help.GetNearestDcRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetNotifyExceptionsRequest(\n    compare_sound=True,\n    peer='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetNotifySettingsRequest(\n    peer='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetOldFeaturedStickersRequest(\n    offset=42,\n    limit=100,\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetOnlinesRequest(\n    peer='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.GetParticipantRequest(\n    channel='username',\n    participant='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.GetParticipantsRequest(\n    channel='username',\n    filter=telethon.tl.types.ChannelParticipantsRecent(),\n    offset=42,\n    limit=100,\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetPassportConfigRequest(\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetPasswordRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetPasswordSettingsRequest(\n    password=telethon.tl.types.InputCheckPasswordSRP(\n        srp_id=-12398745604826,\n        A=b'arbitrary\\x7f data \\xfa here',\n        M1=b'arbitrary\\x7f data \\xfa here'\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.payments.GetPaymentFormRequest(\n    peer='username',\n    msg_id=42,\n    theme_params=telethon.tl.types.DataJSON(\n        data='some string here'\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.payments.GetPaymentReceiptRequest(\n    peer='username',\n    msg_id=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetPeerDialogsRequest(\n    peers=['username']\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetPeerSettingsRequest(\n    peer='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetPinnedDialogsRequest(\n    folder_id=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetPollResultsRequest(\n    peer='username',\n    msg_id=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetPollVotesRequest(\n    peer='username',\n    id=42,\n    limit=100,\n    option=b'arbitrary\\x7f data \\xfa here',\n    offset='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetPrivacyRequest(\n    key=telethon.tl.types.InputPrivacyKeyStatusTimestamp()\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetPromoDataRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetRecentLocationsRequest(\n    peer='username',\n    limit=100,\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetRecentMeUrlsRequest(\n    referer='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetRecentStickersRequest(\n    hash=0,\n    attached=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetRepliesRequest(\n    peer='username',\n    msg_id=42,\n    offset_id=42,\n    offset_date=datetime.datetime(2018, 6, 25),\n    add_offset=0,\n    limit=100,\n    max_id=0,\n    min_id=0,\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.contacts.GetSavedRequest())\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.messages.GetSavedGifsRequest(\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.payments.GetSavedInfoRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetScheduledHistoryRequest(\n    peer='username',\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetScheduledMessagesRequest(\n    peer='username',\n    id=[42]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetSearchCountersRequest(\n    peer='username',\n    filters=[telethon.tl.types.InputMessagesFilterPhotos()]\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.account.GetSecureValueRequest(\n    types=[telethon.tl.types.SecureValueTypePersonalDetails()]\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.messages.GetSplitRangesRequest())\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.updates.GetStateRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetStatsURLRequest(\n    peer='username',\n    params='some string here',\n    dark=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.contacts.GetStatusesRequest())\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.messages.GetStickerSetRequest(\n    stickerset=telethon.tl.types.InputStickerSetID(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetStickersRequest(\n    emoticon='some string here',\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.langpack.GetStringsRequest(\n    lang_pack='',\n    lang_code='en',\n    keys=['some string here']\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.messages.GetSuggestedDialogFiltersRequest())\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.help.GetSupportRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetSupportNameRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetTermsOfServiceUpdateRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetThemeRequest(\n    format='some string here',\n    theme=telethon.tl.types.InputTheme(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    document_id=-12398745604826\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetThemesRequest(\n    format='some string here',\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetTmpPasswordRequest(\n    password=telethon.tl.types.InputCheckPasswordSRP(\n        srp_id=-12398745604826,\n        A=b'arbitrary\\x7f data \\xfa here',\n        M1=b'arbitrary\\x7f data \\xfa here'\n    ),\n    period=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.contacts.GetTopPeersRequest(\n    offset=42,\n    limit=100,\n    hash=0,\n    correspondents=True,\n    bots_pm=True,\n    bots_inline=True,\n    phone_calls=True,\n    forward_users=True,\n    forward_chats=True,\n    groups=True,\n    channels=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetUnreadMentionsRequest(\n    peer='username',\n    offset_id=42,\n    add_offset=0,\n    limit=100,\n    max_id=0,\n    min_id=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.GetUserInfoRequest(\n    user_id='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.photos.GetUserPhotosRequest(\n    user_id='username',\n    offset=42,\n    max_id=0,\n    limit=100\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.users.GetUsersRequest(\n    id=['username']\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.account.GetWallPaperRequest(\n    wallpaper=telethon.tl.types.InputWallPaper(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetWallPapersRequest(\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.GetWebAuthorizationsRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.upload.GetWebFileRequest(\n    location=telethon.tl.types.InputWebFileLocation(\n        url='some string here',\n        access_hash=-12398745604826\n    ),\n    offset=42,\n    limit=100\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetWebPageRequest(\n    url='some string here',\n    hash=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.GetWebPagePreviewRequest(\n    message='Hello there!'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.GetFutureSaltsRequest(\n    num=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.HidePeerSettingsBarRequest(\n    peer='username'\n))",
        "await client(telethon.tl.functions.help.HidePromoDataRequest(\n    peer='username'\n))",
        "await client(telethon.tl.functions.auth.ImportAuthorizationRequest(\n    id=42,\n    bytes=b'arbitrary\\x7f data \\xfa here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.ImportBotAuthorizationRequest(\n    flags=42,\n    api_id=42,\n    api_hash='some string here',\n    bot_auth_token='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.ImportChatInviteRequest(\n    hash='A4LmkR23G0IGxBE71zZfo1'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.contacts.ImportContactsRequest(\n    contacts=[telethon.tl.types.InputPhoneContact(\n        client_id=random.randrange(-2**63, 2**63),\n        phone='some string here',\n        first_name='some string here',\n        last_name='some string here'\n    )]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.ImportLoginTokenRequest(\n    token=b'arbitrary\\x7f data \\xfa here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.InitConnectionRequest(\n    api_id=42,\n    device_model='ASUS Laptop',\n    system_version='Arch Linux',\n    app_version='1.0',\n    system_lang_code='en',\n    lang_pack='',\n    lang_code='en',\n    query=other_request,\n    proxy=telethon.tl.types.InputClientProxy(\n        address='some string here',\n        port=42\n    ),\n    params=telethon.tl.types.JsonNull()\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.InitHistoryImportRequest(\n    peer='username',\n    file=client.upload_file('/path/to/file.jpg'),\n    media_count=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.InitTakeoutSessionRequest(\n    contacts=True,\n    message_users=True,\n    message_chats=True,\n    message_megagroups=True,\n    message_channels=True,\n    files=True,\n    file_max_size=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.InstallStickerSetRequest(\n    stickerset=telethon.tl.types.InputStickerSetID(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    archived=False\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.InstallThemeRequest(\n    dark=True,\n    format='some string here',\n    theme=telethon.tl.types.InputTheme(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    )\n))",
        "await client(telethon.tl.functions.account.InstallWallPaperRequest(\n    wallpaper=telethon.tl.types.InputWallPaper(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    settings=telethon.tl.types.WallPaperSettings(\n        blur=True,\n        motion=True,\n        background_color=42,\n        second_background_color=42,\n        third_background_color=42,\n        fourth_background_color=42,\n        intensity=42,\n        rotation=42\n    )\n))",
        "await client(telethon.tl.functions.channels.InviteToChannelRequest(\n    channel='username',\n    users=['username']\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.InviteToGroupCallRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    users=['username']\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.InvokeAfterMsgRequest(\n    msg_id=-12398745604826,\n    query=other_request\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.InvokeAfterMsgsRequest(\n    msg_ids=[-12398745604826],\n    query=other_request\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.InvokeWithLayerRequest(\n    layer=42,\n    query=other_request\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.InvokeWithMessagesRangeRequest(\n    range=telethon.tl.types.MessageRange(\n        min_id=0,\n        max_id=0\n    ),\n    query=other_request\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.InvokeWithTakeoutRequest(\n    takeout_id=-12398745604826,\n    query=other_request\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.InvokeWithoutUpdatesRequest(\n    query=other_request\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.JoinChannelRequest(\n    channel='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.JoinGroupCallRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    join_as='username',\n    params=telethon.tl.types.DataJSON(\n        data='some string here'\n    ),\n    muted=True,\n    video_stopped=True,\n    invite_hash='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.JoinGroupCallPresentationRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    params=telethon.tl.types.DataJSON(\n        data='some string here'\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.LeaveChannelRequest(\n    channel='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.LeaveGroupCallRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    source=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.LeaveGroupCallPresentationRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.stats.LoadAsyncGraphRequest(\n    token='some string here',\n    x=-12398745604826\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.LogOutRequest())",
        "await client(telethon.tl.functions.messages.MarkDialogUnreadRequest(\n    peer='username',\n    unread=True\n))",
        "await client(telethon.tl.functions.messages.MigrateChatRequest(\n    chat_id=478614198\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.PingRequest(\n    ping_id=-12398745604826\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.PingDelayDisconnectRequest(\n    ping_id=-12398745604826,\n    disconnect_delay=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.ReadDiscussionRequest(\n    peer='username',\n    msg_id=42,\n    read_max_id=42\n))",
        "await client(telethon.tl.functions.messages.ReadEncryptedHistoryRequest(\n    peer=telethon.tl.types.InputEncryptedChat(\n        chat_id=478614198,\n        access_hash=-12398745604826\n    ),\n    max_date=datetime.datetime(2018, 6, 25)\n))",
        "await client(telethon.tl.functions.messages.ReadFeaturedStickersRequest(\n    id=[-12398745604826]\n))",
        "await client(telethon.tl.functions.messages.ReadHistoryRequest(\n    peer='username',\n    max_id=0\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.ReadHistoryRequest(\n    channel='username',\n    max_id=0\n))",
        "await client(telethon.tl.functions.messages.ReadMentionsRequest(\n    peer='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.ReadMessageContentsRequest(\n    id=[42]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.ReadMessageContentsRequest(\n    channel='username',\n    id=[42]\n))",
        "await client(telethon.tl.functions.phone.ReceivedCallRequest(\n    peer=telethon.tl.types.InputPhoneCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    )\n))",
        "await client(telethon.tl.functions.messages.ReceivedMessagesRequest(\n    max_id=0\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.messages.ReceivedQueueRequest(\n    max_qts=42\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.auth.RecoverPasswordRequest(\n    code='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.RegisterDeviceRequest(\n    token_type=42,\n    token='some string here',\n    app_sandbox=False,\n    secret=b'arbitrary\\x7f data \\xfa here',\n    other_uids=[42],\n    no_muted=True\n))",
        "await client(telethon.tl.functions.stickers.RemoveStickerFromSetRequest(\n    sticker=telethon.tl.types.InputDocument(\n        id=-12398745604826,\n        access_hash=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.ReorderPinnedDialogsRequest(\n    folder_id=42,\n    order=['username'],\n    force=True\n))",
        "await client(telethon.tl.functions.messages.ReorderStickerSetsRequest(\n    order=[-12398745604826],\n    masks=True\n))",
        "await client(telethon.tl.functions.messages.ReportRequest(\n    peer='username',\n    id=[42],\n    reason=telethon.tl.types.InputReportReasonSpam(),\n    message='Hello there!'\n))",
        "await client(telethon.tl.functions.messages.ReportEncryptedSpamRequest(\n    peer=telethon.tl.types.InputEncryptedChat(\n        chat_id=478614198,\n        access_hash=-12398745604826\n    )\n))",
        "await client(telethon.tl.functions.account.ReportPeerRequest(\n    peer='username',\n    reason=telethon.tl.types.InputReportReasonSpam(),\n    message='Hello there!'\n))",
        "await client(telethon.tl.functions.account.ReportProfilePhotoRequest(\n    peer='username',\n    photo_id=telethon.tl.types.InputPhoto(\n        id=-12398745604826,\n        access_hash=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    ),\n    reason=telethon.tl.types.InputReportReasonSpam(),\n    message='Hello there!'\n))",
        "await client(telethon.tl.functions.messages.ReportSpamRequest(\n    peer='username'\n))",
        "await client(telethon.tl.functions.channels.ReportSpamRequest(\n    channel='username',\n    user_id='username',\n    id=[42]\n))",
        "await client(telethon.tl.functions.ReqDHParamsRequest(\n    nonce=int.from_bytes(os.urandom(16), 'big'),\n    server_nonce=int.from_bytes(os.urandom(16), 'big'),\n    p=b'arbitrary\\x7f data \\xfa here',\n    q=b'arbitrary\\x7f data \\xfa here',\n    public_key_fingerprint=-12398745604826,\n    encrypted_data=b'arbitrary\\x7f data \\xfa here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.ReqPqRequest(\n    nonce=int.from_bytes(os.urandom(16), 'big')\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.ReqPqMultiRequest(\n    nonce=int.from_bytes(os.urandom(16), 'big')\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.RequestCallRequest(\n    user_id='username',\n    g_a_hash=b'arbitrary\\x7f data \\xfa here',\n    protocol=telethon.tl.types.PhoneCallProtocol(\n        min_layer=42,\n        max_layer=42,\n        library_versions=['some string here'],\n        udp_p2p=True,\n        udp_reflector=True\n    ),\n    video=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.RequestEncryptionRequest(\n    user_id='username',\n    g_a=b'arbitrary\\x7f data \\xfa here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.RequestPasswordRecoveryRequest())\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.RequestUrlAuthRequest(\n    peer='username',\n    msg_id=42,\n    button_id=42,\n    url='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.ResendCodeRequest(\n    phone_number='some string here',\n    phone_code_hash='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.ResendPasswordEmailRequest())",
        "await client(telethon.tl.functions.account.ResetAuthorizationRequest(\n    hash=-12398745604826\n))",
        "await client(telethon.tl.functions.auth.ResetAuthorizationsRequest())",
        "await client(telethon.tl.functions.bots.ResetBotCommandsRequest(\n    scope=telethon.tl.types.BotCommandScopeDefault(),\n    lang_code='en'\n))",
        "await client(telethon.tl.functions.account.ResetNotifySettingsRequest())",
        "await client(telethon.tl.functions.contacts.ResetSavedRequest())",
        "await client(telethon.tl.functions.contacts.ResetTopPeerRatingRequest(\n    category=telethon.tl.types.TopPeerCategoryBotsPM(),\n    peer='username'\n))",
        "await client(telethon.tl.functions.account.ResetWallPapersRequest())",
        "await client(telethon.tl.functions.account.ResetWebAuthorizationRequest(\n    hash=-12398745604826\n))",
        "await client(telethon.tl.functions.account.ResetWebAuthorizationsRequest())",
        "await client(telethon.tl.functions.contacts.ResolveUsernameRequest(\n    username='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.upload.ReuploadCdnFileRequest(\n    file_token=b'arbitrary\\x7f data \\xfa here',\n    request_token=b'arbitrary\\x7f data \\xfa here'\n))\nfor x in result:\n    print(x)",
        "await client(telethon.tl.functions.RpcDropAnswerRequest(\n    req_msg_id=-12398745604826\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.help.SaveAppLogRequest(\n    events=[telethon.tl.types.InputAppEvent(\n        time=7.13,\n        type='some string here',\n        peer=-12398745604826,\n        data=telethon.tl.types.JsonNull()\n    )]\n))",
        "await client(telethon.tl.functions.account.SaveAutoDownloadSettingsRequest(\n    settings=telethon.tl.types.AutoDownloadSettings(\n        photo_size_max=42,\n        video_size_max=42,\n        file_size_max=42,\n        video_upload_maxbitrate=42,\n        disabled=True,\n        video_preload_large=True,\n        audio_preload_next=True,\n        phonecalls_less_data=True\n    ),\n    low=True,\n    high=True\n))",
        "await client(telethon.tl.functions.upload.SaveBigFilePartRequest(\n    file_id=-12398745604826,\n    file_part=42,\n    file_total_parts=42,\n    bytes=b'arbitrary\\x7f data \\xfa here'\n))",
        "await client(telethon.tl.functions.phone.SaveCallDebugRequest(\n    peer=telethon.tl.types.InputPhoneCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    debug=telethon.tl.types.DataJSON(\n        data='some string here'\n    )\n))",
        "await client(telethon.tl.functions.phone.SaveDefaultGroupCallJoinAsRequest(\n    peer='username',\n    join_as='username'\n))",
        "await client(telethon.tl.functions.messages.SaveDraftRequest(\n    peer='username',\n    message='Hello there!',\n    no_webpage=True\n))",
        "await client(telethon.tl.functions.upload.SaveFilePartRequest(\n    file_id=-12398745604826,\n    file_part=42,\n    bytes=b'arbitrary\\x7f data \\xfa here'\n))",
        "await client(telethon.tl.functions.messages.SaveGifRequest(\n    id=telethon.tl.types.InputDocument(\n        id=-12398745604826,\n        access_hash=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    ),\n    unsave=False\n))",
        "await client(telethon.tl.functions.messages.SaveRecentStickerRequest(\n    id=telethon.tl.types.InputDocument(\n        id=-12398745604826,\n        access_hash=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    ),\n    unsave=False,\n    attached=True\n))",
        "await client(telethon.tl.functions.account.SaveSecureValueRequest(\n    value=telethon.tl.types.InputSecureValue(\n        type=telethon.tl.types.SecureValueTypePersonalDetails(),\n        data=telethon.tl.types.SecureData(\n            data=b'arbitrary\\x7f data \\xfa here',\n            data_hash=b'arbitrary\\x7f data \\xfa here',\n            secret=b'arbitrary\\x7f data \\xfa here'\n        ),\n        front_side=telethon.tl.types.InputSecureFileUploaded(\n            id=-12398745604826,\n            parts=42,\n            md5_checksum='some string here',\n            file_hash=b'arbitrary\\x7f data \\xfa here',\n            secret=b'arbitrary\\x7f data \\xfa here'\n        ),\n        reverse_side=telethon.tl.types.InputSecureFileUploaded(\n            id=-12398745604826,\n            parts=42,\n            md5_checksum='some string here',\n            file_hash=b'arbitrary\\x7f data \\xfa here',\n            secret=b'arbitrary\\x7f data \\xfa here'\n        ),\n        selfie=telethon.tl.types.InputSecureFileUploaded(\n            id=-12398745604826,\n            parts=42,\n            md5_checksum='some string here',\n            file_hash=b'arbitrary\\x7f data \\xfa here',\n            secret=b'arbitrary\\x7f data \\xfa here'\n        ),\n        translation=[telethon.tl.types.InputSecureFileUploaded(\n            id=-12398745604826,\n            parts=42,\n            md5_checksum='some string here',\n            file_hash=b'arbitrary\\x7f data \\xfa here',\n            secret=b'arbitrary\\x7f data \\xfa here'\n        )],\n        files=[telethon.tl.types.InputSecureFileUploaded(\n            id=-12398745604826,\n            parts=42,\n            md5_checksum='some string here',\n            file_hash=b'arbitrary\\x7f data \\xfa here',\n            secret=b'arbitrary\\x7f data \\xfa here'\n        )],\n        plain_data=telethon.tl.types.SecurePlainPhone(\n            phone='some string here'\n        )\n    ),\n    secure_secret_id=-12398745604826\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.SaveThemeRequest(\n    theme=telethon.tl.types.InputTheme(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    unsave=False\n))",
        "await client(telethon.tl.functions.account.SaveWallPaperRequest(\n    wallpaper=telethon.tl.types.InputWallPaper(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    unsave=False,\n    settings=telethon.tl.types.WallPaperSettings(\n        blur=True,\n        motion=True,\n        background_color=42,\n        second_background_color=42,\n        third_background_color=42,\n        fourth_background_color=42,\n        intensity=42,\n        rotation=42\n    )\n))",
        "await client(telethon.tl.functions.contacts.SearchRequest(\n    q='some string here',\n    limit=100\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SearchRequest(\n    peer='username',\n    q='some string here',\n    filter=telethon.tl.types.InputMessagesFilterPhotos(),\n    min_date=datetime.datetime(2018, 6, 25),\n    max_date=datetime.datetime(2018, 6, 25),\n    offset_id=42,\n    add_offset=0,\n    limit=100,\n    max_id=0,\n    min_id=0,\n    hash=0,\n    from_id='username',\n    top_msg_id=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SearchGlobalRequest(\n    q='some string here',\n    filter=telethon.tl.types.InputMessagesFilterPhotos(),\n    min_date=datetime.datetime(2018, 6, 25),\n    max_date=datetime.datetime(2018, 6, 25),\n    offset_rate=42,\n    offset_peer='username',\n    offset_id=42,\n    limit=100,\n    folder_id=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SearchStickerSetsRequest(\n    q='some string here',\n    hash=0,\n    exclude_featured=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.SendChangePhoneCodeRequest(\n    phone_number='some string here',\n    settings=telethon.tl.types.CodeSettings(\n        allow_flashcall=True,\n        current_number=True,\n        allow_app_hash=True\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.SendCodeRequest(\n    phone_number='some string here',\n    api_id=42,\n    api_hash='some string here',\n    settings=telethon.tl.types.CodeSettings(\n        allow_flashcall=True,\n        current_number=True,\n        allow_app_hash=True\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.SendConfirmPhoneCodeRequest(\n    hash='A4LmkR23G0IGxBE71zZfo1',\n    settings=telethon.tl.types.CodeSettings(\n        allow_flashcall=True,\n        current_number=True,\n        allow_app_hash=True\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.bots.SendCustomRequestRequest(\n    custom_method='some string here',\n    params=telethon.tl.types.DataJSON(\n        data='some string here'\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SendEncryptedRequest(\n    peer=telethon.tl.types.InputEncryptedChat(\n        chat_id=478614198,\n        access_hash=-12398745604826\n    ),\n    data=b'arbitrary\\x7f data \\xfa here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SendEncryptedFileRequest(\n    peer=telethon.tl.types.InputEncryptedChat(\n        chat_id=478614198,\n        access_hash=-12398745604826\n    ),\n    data=b'arbitrary\\x7f data \\xfa here',\n    file=telethon.tl.types.InputEncryptedFileUploaded(\n        id=-12398745604826,\n        parts=42,\n        md5_checksum='some string here',\n        key_fingerprint=42\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SendEncryptedServiceRequest(\n    peer=telethon.tl.types.InputEncryptedChat(\n        chat_id=478614198,\n        access_hash=-12398745604826\n    ),\n    data=b'arbitrary\\x7f data \\xfa here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SendInlineBotResultRequest(\n    peer='username',\n    query_id=-12398745604826,\n    id='some string here',\n    hide_via=True,\n    schedule_date=datetime.datetime(2018, 6, 25)\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SendMediaRequest(\n    peer='username',\n    media=telethon.tl.types.InputMediaUploadedPhoto(\n        file=client.upload_file('/path/to/file.jpg'),\n        stickers=[telethon.tl.types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        )],\n        ttl_seconds=42\n    ),\n    message='Hello there!',\n    schedule_date=datetime.datetime(2018, 6, 25)\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SendMessageRequest(\n    peer='username',\n    message='Hello there!',\n    no_webpage=True,\n    schedule_date=datetime.datetime(2018, 6, 25)\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SendMultiMediaRequest(\n    peer='username',\n    multi_media=[telethon.tl.types.InputSingleMedia(\n        media=telethon.tl.types.InputMediaUploadedPhoto(\n            file=client.upload_file('/path/to/file.jpg'),\n            stickers=[telethon.tl.types.InputDocument(\n                id=-12398745604826,\n                access_hash=-12398745604826,\n                file_reference=b'arbitrary\\x7f data \\xfa here'\n            )],\n            ttl_seconds=42\n        ),\n        message='Hello there!'\n    )],\n    schedule_date=datetime.datetime(2018, 6, 25)\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.payments.SendPaymentFormRequest(\n    form_id=-12398745604826,\n    peer='username',\n    msg_id=42,\n    credentials=telethon.tl.types.InputPaymentCredentialsSaved(\n        id='some string here',\n        tmp_password=b'arbitrary\\x7f data \\xfa here'\n    ),\n    requested_info_id='some string here',\n    shipping_option_id='some string here',\n    tip_amount=-12398745604826\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SendScheduledMessagesRequest(\n    peer='username',\n    id=[42]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SendScreenshotNotificationRequest(\n    peer='username',\n    reply_to_msg_id=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.SendSignalingDataRequest(\n    peer=telethon.tl.types.InputPhoneCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    data=b'arbitrary\\x7f data \\xfa here'\n))",
        "await client(telethon.tl.functions.account.SendVerifyEmailCodeRequest(\n    email='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.SendVerifyPhoneCodeRequest(\n    phone_number='some string here',\n    settings=telethon.tl.types.CodeSettings(\n        allow_flashcall=True,\n        current_number=True,\n        allow_app_hash=True\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SendVoteRequest(\n    peer='username',\n    msg_id=42,\n    options=[b'arbitrary\\x7f data \\xfa here']\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.SetAccountTTLRequest(\n    ttl=telethon.tl.types.AccountDaysTTL(\n        days=42\n    )\n))",
        "await client(telethon.tl.functions.messages.SetBotCallbackAnswerRequest(\n    query_id=-12398745604826,\n    cache_time=42,\n    alert=True,\n    message='Hello there!',\n    url='some string here'\n))",
        "await client(telethon.tl.functions.bots.SetBotCommandsRequest(\n    scope=telethon.tl.types.BotCommandScopeDefault(),\n    lang_code='en',\n    commands=[telethon.tl.types.BotCommand(\n        command='some string here',\n        description='some string here'\n    )]\n))",
        "await client(telethon.tl.functions.messages.SetBotPrecheckoutResultsRequest(\n    query_id=-12398745604826,\n    success=True,\n    error='some string here'\n))",
        "await client(telethon.tl.functions.messages.SetBotShippingResultsRequest(\n    query_id=-12398745604826,\n    error='some string here',\n    shipping_options=[telethon.tl.types.ShippingOption(\n        id='some string here',\n        title='My awesome title',\n        prices=[telethon.tl.types.LabeledPrice(\n            label='some string here',\n            amount=-12398745604826\n        )]\n    )]\n))",
        "await client(telethon.tl.functions.help.SetBotUpdatesStatusRequest(\n    pending_updates_count=42,\n    message='Hello there!'\n))",
        "await client(telethon.tl.functions.phone.SetCallRatingRequest(\n    peer=telethon.tl.types.InputPhoneCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    rating=42,\n    comment='some string here',\n    user_initiative=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.SetContactSignUpNotificationRequest(\n    silent=False\n))",
        "await client(telethon.tl.functions.account.SetContentSettingsRequest(\n    sensitive_enabled=True\n))",
        "await client(telethon.tl.functions.channels.SetDiscussionGroupRequest(\n    broadcast='username',\n    group='username'\n))",
        "await client(telethon.tl.functions.messages.SetEncryptedTypingRequest(\n    peer=telethon.tl.types.InputEncryptedChat(\n        chat_id=478614198,\n        access_hash=-12398745604826\n    ),\n    typing=False\n))",
        "await client(telethon.tl.functions.messages.SetGameScoreRequest(\n    peer='username',\n    id=42,\n    user_id='username',\n    score=42,\n    edit_message=True,\n    force=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.SetGlobalPrivacySettingsRequest(\n    settings=telethon.tl.types.GlobalPrivacySettings(\n        archive_and_mute_new_noncontact_peers=False\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SetHistoryTTLRequest(\n    peer='username',\n    period=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.SetInlineBotResultsRequest(\n    query_id=-12398745604826,\n    results=[telethon.tl.types.InputBotInlineResult(\n        id='some string here',\n        type='some string here',\n        send_message=telethon.tl.types.InputBotInlineMessageMediaAuto(\n            message='Hello there!'\n        ),\n        title='My awesome title',\n        description='some string here',\n        url='some string here',\n        thumb=telethon.tl.types.InputWebDocument(\n            url='some string here',\n            size=42,\n            mime_type='some string here',\n            attributes=[telethon.tl.types.DocumentAttributeImageSize(\n                w=42,\n                h=42\n            )]\n        ),\n        content=telethon.tl.types.InputWebDocument(\n            url='some string here',\n            size=42,\n            mime_type='some string here',\n            attributes=[telethon.tl.types.DocumentAttributeImageSize(\n                w=42,\n                h=42\n            )]\n        )\n    )],\n    cache_time=42,\n    gallery=True,\n    private=True,\n    next_offset='some string here',\n    switch_pm=telethon.tl.types.InlineBotSwitchPM(\n        text='some string here',\n        start_param='some string here'\n    )\n))",
        "await client(telethon.tl.functions.messages.SetInlineGameScoreRequest(\n    id=telethon.tl.types.InputBotInlineMessageID(\n        dc_id=42,\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    user_id='username',\n    score=42,\n    edit_message=True,\n    force=True\n))",
        "await client(telethon.tl.functions.account.SetPrivacyRequest(\n    key=telethon.tl.types.InputPrivacyKeyStatusTimestamp(),\n    rules=[telethon.tl.types.InputPrivacyValueAllowContacts()]\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.users.SetSecureValueErrorsRequest(\n    id='username',\n    errors=[telethon.tl.types.SecureValueErrorData(\n        type=telethon.tl.types.SecureValueTypePersonalDetails(),\n        data_hash=b'arbitrary\\x7f data \\xfa here',\n        field='some string here',\n        text='some string here'\n    )]\n))",
        "await client(telethon.tl.functions.stickers.SetStickerSetThumbRequest(\n    stickerset=telethon.tl.types.InputStickerSetID(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    thumb=telethon.tl.types.InputDocument(\n        id=-12398745604826,\n        access_hash=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.SetStickersRequest(\n    channel='username',\n    stickerset=telethon.tl.types.InputStickerSetID(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    )\n))",
        "await client(telethon.tl.functions.messages.SetTypingRequest(\n    peer='username',\n    action=telethon.tl.types.SendMessageTypingAction(),\n    top_msg_id=42\n))",
        "await client(telethon.tl.functions.SetClientDHParamsRequest(\n    nonce=int.from_bytes(os.urandom(16), 'big'),\n    server_nonce=int.from_bytes(os.urandom(16), 'big'),\n    encrypted_data=b'arbitrary\\x7f data \\xfa here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.SignInRequest(\n    phone_number='some string here',\n    phone_code_hash='some string here',\n    phone_code='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.auth.SignUpRequest(\n    phone_number='some string here',\n    phone_code_hash='some string here',\n    first_name='some string here',\n    last_name='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.StartBotRequest(\n    bot='username',\n    peer='username',\n    start_param='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.StartHistoryImportRequest(\n    peer='username',\n    import_id=-12398745604826\n))",
        "await client(telethon.tl.functions.phone.StartScheduledGroupCallRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.stickers.SuggestShortNameRequest(\n    title='My awesome title'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.ToggleDialogPinRequest(\n    peer='username',\n    pinned=True\n))",
        "await client(telethon.tl.functions.phone.ToggleGroupCallRecordRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    start=True,\n    title='My awesome title'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.ToggleGroupCallSettingsRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    reset_invite_hash=True,\n    join_muted=False\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.phone.ToggleGroupCallStartSubscriptionRequest(\n    call=telethon.tl.types.InputGroupCall(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    subscribed=False\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.TogglePreHistoryHiddenRequest(\n    channel='username',\n    enabled=False\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.ToggleSignaturesRequest(\n    channel='username',\n    enabled=False\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.ToggleSlowModeRequest(\n    channel='username',\n    seconds=42\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.ToggleStickerSetsRequest(\n    stickersets=[telethon.tl.types.InputStickerSetID(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    )],\n    uninstall=True,\n    archive=True,\n    unarchive=True\n))",
        "await client(telethon.tl.functions.contacts.ToggleTopPeersRequest(\n    enabled=False\n))",
        "await client(telethon.tl.functions.contacts.UnblockRequest(\n    id='username'\n))",
        "await client(telethon.tl.functions.messages.UninstallStickerSetRequest(\n    stickerset=telethon.tl.types.InputStickerSetID(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    )\n))",
        "await client(telethon.tl.functions.messages.UnpinAllMessagesRequest(\n    peer='username'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.UnregisterDeviceRequest(\n    token_type=42,\n    token='some string here',\n    other_uids=[42]\n))",
        "await client(telethon.tl.functions.account.UpdateDeviceLockedRequest(\n    period=42\n))",
        "await client(telethon.tl.functions.messages.UpdateDialogFilterRequest(\n    id=42,\n    filter=telethon.tl.types.DialogFilter(\n        id=42,\n        title='My awesome title',\n        pinned_peers=['username'],\n        include_peers=['username'],\n        exclude_peers=['username'],\n        contacts=True,\n        non_contacts=True,\n        groups=True,\n        broadcasts=True,\n        bots=True,\n        exclude_muted=True,\n        exclude_read=True,\n        exclude_archived=True,\n        emoticon='some string here'\n    )\n))",
        "await client(telethon.tl.functions.messages.UpdateDialogFiltersOrderRequest(\n    order=[42]\n))",
        "await client(telethon.tl.functions.account.UpdateNotifySettingsRequest(\n    peer='username',\n    settings=telethon.tl.types.InputPeerNotifySettings(\n        show_previews=False,\n        mute_until=datetime.datetime(2018, 6, 25),\n        sound='some string here'\n    )\n))",
        "await client(telethon.tl.functions.account.UpdatePasswordSettingsRequest(\n    password=telethon.tl.types.InputCheckPasswordSRP(\n        srp_id=-12398745604826,\n        A=b'arbitrary\\x7f data \\xfa here',\n        M1=b'arbitrary\\x7f data \\xfa here'\n    ),\n    new_settings=telethon.tl.types.account.PasswordInputSettings(\n        new_algo=telethon.tl.types.PasswordKdfAlgoUnknown(),\n        new_password_hash=b'arbitrary\\x7f data \\xfa here',\n        hint='some string here',\n        email='some string here',\n        new_secure_settings=telethon.tl.types.SecureSecretSettings(\n            secure_algo=telethon.tl.types.SecurePasswordKdfAlgoUnknown(),\n            secure_secret=b'arbitrary\\x7f data \\xfa here',\n            secure_secret_id=-12398745604826\n        )\n    )\n))",
        "await client(telethon.tl.functions.messages.UpdatePinnedMessageRequest(\n    peer='username',\n    id=42,\n    unpin=True,\n    pm_oneside=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.UpdateProfileRequest(\n    first_name='some string here',\n    last_name='some string here',\n    about='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.photos.UpdateProfilePhotoRequest(\n    id=telethon.tl.types.InputPhoto(\n        id=-12398745604826,\n        access_hash=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.UpdateStatusRequest(\n    offline=False\n))",
        "await client(telethon.tl.functions.account.UpdateThemeRequest(\n    format='some string here',\n    theme=telethon.tl.types.InputTheme(\n        id=-12398745604826,\n        access_hash=-12398745604826\n    ),\n    slug='some string here',\n    title='My awesome title',\n    document=telethon.tl.types.InputDocument(\n        id=-12398745604826,\n        access_hash=-12398745604826,\n        file_reference=b'arbitrary\\x7f data \\xfa here'\n    ),\n    settings=telethon.tl.types.InputThemeSettings(\n        base_theme=telethon.tl.types.BaseThemeClassic(),\n        accent_color=42,\n        message_top_color=42,\n        message_bottom_color=42,\n        wallpaper=telethon.tl.types.InputWallPaper(\n            id=-12398745604826,\n            access_hash=-12398745604826\n        ),\n        wallpaper_settings=telethon.tl.types.WallPaperSettings(\n            blur=True,\n            motion=True,\n            background_color=42,\n            second_background_color=42,\n            third_background_color=42,\n            fourth_background_color=42,\n            intensity=42,\n            rotation=42\n        )\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.UpdateUsernameRequest(\n    username='some string here'\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.channels.UpdateUsernameRequest(\n    channel='username',\n    username='some string here'\n))",
        "await client(telethon.tl.functions.messages.UploadEncryptedFileRequest(\n    peer=telethon.tl.types.InputEncryptedChat(\n        chat_id=478614198,\n        access_hash=-12398745604826\n    ),\n    file=telethon.tl.types.InputEncryptedFileUploaded(\n        id=-12398745604826,\n        parts=42,\n        md5_checksum='some string here',\n        key_fingerprint=42\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.UploadImportedMediaRequest(\n    peer='username',\n    import_id=-12398745604826,\n    file_name='some string here',\n    media=telethon.tl.types.InputMediaUploadedPhoto(\n        file=client.upload_file('/path/to/file.jpg'),\n        stickers=[telethon.tl.types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        )],\n        ttl_seconds=42\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.messages.UploadMediaRequest(\n    peer='username',\n    media=telethon.tl.types.InputMediaUploadedPhoto(\n        file=client.upload_file('/path/to/file.jpg'),\n        stickers=[telethon.tl.types.InputDocument(\n            id=-12398745604826,\n            access_hash=-12398745604826,\n            file_reference=b'arbitrary\\x7f data \\xfa here'\n        )],\n        ttl_seconds=42\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.photos.UploadProfilePhotoRequest(\n    file=client.upload_file('/path/to/file.jpg'),\n    video=client.upload_file('/path/to/file.mp4'),\n    video_start_ts=7.13\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.UploadThemeRequest(\n    file=client.upload_file('/path/to/file.jpg'),\n    file_name='some string here',\n    mime_type='some string here',\n    thumb=client.upload_file('/path/to/file.jpg')\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.UploadWallPaperRequest(\n    file=client.upload_file('/path/to/file.jpg'),\n    mime_type='some string here',\n    settings=telethon.tl.types.WallPaperSettings(\n        blur=True,\n        motion=True,\n        background_color=42,\n        second_background_color=42,\n        third_background_color=42,\n        fourth_background_color=42,\n        intensity=42,\n        rotation=42\n    )\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.payments.ValidateRequestedInfoRequest(\n    peer='username',\n    msg_id=42,\n    info=telethon.tl.types.PaymentRequestedInfo(\n        name='some string here',\n        phone='some string here',\n        email='some string here',\n        shipping_address=telethon.tl.types.PostAddress(\n            street_line1='some string here',\n            street_line2='some string here',\n            city='some string here',\n            state='some string here',\n            country_iso2='some string here',\n            post_code='some string here'\n        )\n    ),\n    save=True\n))\nprint(result.stringify())",
        "await client(telethon.tl.functions.account.VerifyEmailRequest(\n    email='some string here',\n    code='some string here'\n))",
        "await client(telethon.tl.functions.account.VerifyPhoneRequest(\n    phone_number='some string here',\n    phone_code_hash='some string here',\n    phone_code='some string here'\n))"
    ],
    "requests":
    [
        "AcceptAuthorizationRequest",
        "AcceptCallRequest",
        "AcceptContactRequest",
        "AcceptEncryptionRequest",
        "AcceptLoginTokenRequest",
        "AcceptTermsOfServiceRequest",
        "AcceptUrlAuthRequest",
        "AddChatUserRequest",
        "AddContactRequest",
        "AddStickerToSetRequest",
        "AnswerWebhookJSONQueryRequest",
        "BindTempAuthKeyRequest",
        "BlockRequest",
        "BlockFromRepliesRequest",
        "CancelCodeRequest",
        "CancelPasswordEmailRequest",
        "ChangePhoneRequest",
        "ChangeStickerPositionRequest",
        "CheckChatInviteRequest",
        "CheckGroupCallRequest",
        "CheckHistoryImportRequest",
        "CheckHistoryImportPeerRequest",
        "CheckPasswordRequest",
        "CheckShortNameRequest",
        "account.CheckUsernameRequest",
        "channels.CheckUsernameRequest",
        "ClearAllDraftsRequest",
        "ClearRecentStickersRequest",
        "ClearSavedInfoRequest",
        "ConfirmCallRequest",
        "ConfirmPasswordEmailRequest",
        "ConfirmPhoneRequest",
        "ConvertToGigagroupRequest",
        "CreateChannelRequest",
        "CreateChatRequest",
        "CreateGroupCallRequest",
        "CreateStickerSetRequest",
        "CreateThemeRequest",
        "DeleteAccountRequest",
        "DeleteByPhonesRequest",
        "DeleteChannelRequest",
        "DeleteChatRequest",
        "DeleteChatUserRequest",
        "DeleteContactsRequest",
        "DeleteExportedChatInviteRequest",
        "DeleteFolderRequest",
        "messages.DeleteHistoryRequest",
        "channels.DeleteHistoryRequest",
        "messages.DeleteMessagesRequest",
        "channels.DeleteMessagesRequest",
        "DeletePhoneCallHistoryRequest",
        "DeletePhotosRequest",
        "DeleteRevokedExportedChatInvitesRequest",
        "DeleteScheduledMessagesRequest",
        "DeleteSecureValueRequest",
        "DeleteUserHistoryRequest",
        "DestroyAuthKeyRequest",
        "DestroySessionRequest",
        "DiscardCallRequest",
        "DiscardEncryptionRequest",
        "DiscardGroupCallRequest",
        "DismissSuggestionRequest",
        "DropTempAuthKeysRequest",
        "EditAdminRequest",
        "EditBannedRequest",
        "EditChatAboutRequest",
        "EditChatAdminRequest",
        "EditChatDefaultBannedRightsRequest",
        "EditChatPhotoRequest",
        "EditChatTitleRequest",
        "EditCreatorRequest",
        "EditExportedChatInviteRequest",
        "EditGroupCallParticipantRequest",
        "EditGroupCallTitleRequest",
        "EditInlineBotMessageRequest",
        "EditLocationRequest",
        "EditMessageRequest",
        "EditPeerFoldersRequest",
        "EditPhotoRequest",
        "EditTitleRequest",
        "EditUserInfoRequest",
        "ExportAuthorizationRequest",
        "ExportChatInviteRequest",
        "ExportGroupCallInviteRequest",
        "ExportLoginTokenRequest",
        "ExportMessageLinkRequest",
        "FaveStickerRequest",
        "FinishTakeoutSessionRequest",
        "ForwardMessagesRequest",
        "GetAccountTTLRequest",
        "GetAdminLogRequest",
        "GetAdminedPublicChannelsRequest",
        "GetAdminsWithInvitesRequest",
        "GetAllChatsRequest",
        "GetAllDraftsRequest",
        "GetAllSecureValuesRequest",
        "GetAllStickersRequest",
        "GetAppChangelogRequest",
        "GetAppConfigRequest",
        "GetAppUpdateRequest",
        "GetArchivedStickersRequest",
        "GetAttachedStickersRequest",
        "GetAuthorizationFormRequest",
        "GetAuthorizationsRequest",
        "GetAutoDownloadSettingsRequest",
        "GetBankCardDataRequest",
        "GetBlockedRequest",
        "GetBotCallbackAnswerRequest",
        "GetBotCommandsRequest",
        "GetBroadcastStatsRequest",
        "GetCallConfigRequest",
        "GetCdnConfigRequest",
        "GetCdnFileRequest",
        "GetCdnFileHashesRequest",
        "GetChannelDifferenceRequest",
        "GetChannelsRequest",
        "GetChatInviteImportersRequest",
        "GetChatsRequest",
        "GetCommonChatsRequest",
        "GetConfigRequest",
        "GetContactIDsRequest",
        "GetContactSignUpNotificationRequest",
        "GetContactsRequest",
        "GetContentSettingsRequest",
        "GetCountriesListRequest",
        "GetDeepLinkInfoRequest",
        "GetDhConfigRequest",
        "GetDialogFiltersRequest",
        "GetDialogUnreadMarksRequest",
        "GetDialogsRequest",
        "updates.GetDifferenceRequest",
        "langpack.GetDifferenceRequest",
        "GetDiscussionMessageRequest",
        "GetDocumentByHashRequest",
        "GetEmojiKeywordsRequest",
        "GetEmojiKeywordsDifferenceRequest",
        "GetEmojiKeywordsLanguagesRequest",
        "GetEmojiURLRequest",
        "GetExportedChatInviteRequest",
        "GetExportedChatInvitesRequest",
        "GetFavedStickersRequest",
        "GetFeaturedStickersRequest",
        "GetFileRequest",
        "GetFileHashesRequest",
        "GetFullChannelRequest",
        "GetFullChatRequest",
        "GetFullUserRequest",
        "GetGameHighScoresRequest",
        "GetGlobalPrivacySettingsRequest",
        "GetGroupCallRequest",
        "GetGroupCallJoinAsRequest",
        "GetGroupParticipantsRequest",
        "GetGroupsForDiscussionRequest",
        "GetHistoryRequest",
        "GetInactiveChannelsRequest",
        "GetInlineBotResultsRequest",
        "GetInlineGameHighScoresRequest",
        "GetInviteTextRequest",
        "GetLangPackRequest",
        "GetLanguageRequest",
        "GetLanguagesRequest",
        "GetLeftChannelsRequest",
        "GetLocatedRequest",
        "GetMaskStickersRequest",
        "GetMegagroupStatsRequest",
        "GetMessageEditDataRequest",
        "GetMessagePublicForwardsRequest",
        "GetMessageStatsRequest",
        "messages.GetMessagesRequest",
        "channels.GetMessagesRequest",
        "GetMessagesViewsRequest",
        "GetMultiWallPapersRequest",
        "GetNearestDcRequest",
        "GetNotifyExceptionsRequest",
        "GetNotifySettingsRequest",
        "GetOldFeaturedStickersRequest",
        "GetOnlinesRequest",
        "GetParticipantRequest",
        "GetParticipantsRequest",
        "GetPassportConfigRequest",
        "GetPasswordRequest",
        "GetPasswordSettingsRequest",
        "GetPaymentFormRequest",
        "GetPaymentReceiptRequest",
        "GetPeerDialogsRequest",
        "GetPeerSettingsRequest",
        "GetPinnedDialogsRequest",
        "GetPollResultsRequest",
        "GetPollVotesRequest",
        "GetPrivacyRequest",
        "GetPromoDataRequest",
        "GetRecentLocationsRequest",
        "GetRecentMeUrlsRequest",
        "GetRecentStickersRequest",
        "GetRepliesRequest",
        "GetSavedRequest",
        "GetSavedGifsRequest",
        "GetSavedInfoRequest",
        "GetScheduledHistoryRequest",
        "GetScheduledMessagesRequest",
        "GetSearchCountersRequest",
        "GetSecureValueRequest",
        "GetSplitRangesRequest",
        "GetStateRequest",
        "GetStatsURLRequest",
        "GetStatusesRequest",
        "GetStickerSetRequest",
        "GetStickersRequest",
        "GetStringsRequest",
        "GetSuggestedDialogFiltersRequest",
        "GetSupportRequest",
        "GetSupportNameRequest",
        "GetTermsOfServiceUpdateRequest",
        "GetThemeRequest",
        "GetThemesRequest",
        "GetTmpPasswordRequest",
        "GetTopPeersRequest",
        "GetUnreadMentionsRequest",
        "GetUserInfoRequest",
        "GetUserPhotosRequest",
        "GetUsersRequest",
        "GetWallPaperRequest",
        "GetWallPapersRequest",
        "GetWebAuthorizationsRequest",
        "GetWebFileRequest",
        "GetWebPageRequest",
        "GetWebPagePreviewRequest",
        "GetFutureSaltsRequest",
        "HidePeerSettingsBarRequest",
        "HidePromoDataRequest",
        "ImportAuthorizationRequest",
        "ImportBotAuthorizationRequest",
        "ImportChatInviteRequest",
        "ImportContactsRequest",
        "ImportLoginTokenRequest",
        "InitConnectionRequest",
        "InitHistoryImportRequest",
        "InitTakeoutSessionRequest",
        "InstallStickerSetRequest",
        "InstallThemeRequest",
        "InstallWallPaperRequest",
        "InviteToChannelRequest",
        "InviteToGroupCallRequest",
        "InvokeAfterMsgRequest",
        "InvokeAfterMsgsRequest",
        "InvokeWithLayerRequest",
        "InvokeWithMessagesRangeRequest",
        "InvokeWithTakeoutRequest",
        "InvokeWithoutUpdatesRequest",
        "JoinChannelRequest",
        "JoinGroupCallRequest",
        "JoinGroupCallPresentationRequest",
        "LeaveChannelRequest",
        "LeaveGroupCallRequest",
        "LeaveGroupCallPresentationRequest",
        "LoadAsyncGraphRequest",
        "LogOutRequest",
        "MarkDialogUnreadRequest",
        "MigrateChatRequest",
        "PingRequest",
        "PingDelayDisconnectRequest",
        "ReadDiscussionRequest",
        "ReadEncryptedHistoryRequest",
        "ReadFeaturedStickersRequest",
        "messages.ReadHistoryRequest",
        "channels.ReadHistoryRequest",
        "ReadMentionsRequest",
        "messages.ReadMessageContentsRequest",
        "channels.ReadMessageContentsRequest",
        "ReceivedCallRequest",
        "ReceivedMessagesRequest",
        "ReceivedQueueRequest",
        "RecoverPasswordRequest",
        "RegisterDeviceRequest",
        "RemoveStickerFromSetRequest",
        "ReorderPinnedDialogsRequest",
        "ReorderStickerSetsRequest",
        "ReportRequest",
        "ReportEncryptedSpamRequest",
        "ReportPeerRequest",
        "ReportProfilePhotoRequest",
        "messages.ReportSpamRequest",
        "channels.ReportSpamRequest",
        "ReqDHParamsRequest",
        "ReqPqRequest",
        "ReqPqMultiRequest",
        "RequestCallRequest",
        "RequestEncryptionRequest",
        "RequestPasswordRecoveryRequest",
        "RequestUrlAuthRequest",
        "ResendCodeRequest",
        "ResendPasswordEmailRequest",
        "ResetAuthorizationRequest",
        "ResetAuthorizationsRequest",
        "ResetBotCommandsRequest",
        "ResetNotifySettingsRequest",
        "ResetSavedRequest",
        "ResetTopPeerRatingRequest",
        "ResetWallPapersRequest",
        "ResetWebAuthorizationRequest",
        "ResetWebAuthorizationsRequest",
        "ResolveUsernameRequest",
        "ReuploadCdnFileRequest",
        "RpcDropAnswerRequest",
        "SaveAppLogRequest",
        "SaveAutoDownloadSettingsRequest",
        "SaveBigFilePartRequest",
        "SaveCallDebugRequest",
        "SaveDefaultGroupCallJoinAsRequest",
        "SaveDraftRequest",
        "SaveFilePartRequest",
        "SaveGifRequest",
        "SaveRecentStickerRequest",
        "SaveSecureValueRequest",
        "SaveThemeRequest",
        "SaveWallPaperRequest",
        "contacts.SearchRequest",
        "messages.SearchRequest",
        "SearchGlobalRequest",
        "SearchStickerSetsRequest",
        "SendChangePhoneCodeRequest",
        "SendCodeRequest",
        "SendConfirmPhoneCodeRequest",
        "SendCustomRequestRequest",
        "SendEncryptedRequest",
        "SendEncryptedFileRequest",
        "SendEncryptedServiceRequest",
        "SendInlineBotResultRequest",
        "SendMediaRequest",
        "SendMessageRequest",
        "SendMultiMediaRequest",
        "SendPaymentFormRequest",
        "SendScheduledMessagesRequest",
        "SendScreenshotNotificationRequest",
        "SendSignalingDataRequest",
        "SendVerifyEmailCodeRequest",
        "SendVerifyPhoneCodeRequest",
        "SendVoteRequest",
        "SetAccountTTLRequest",
        "SetBotCallbackAnswerRequest",
        "SetBotCommandsRequest",
        "SetBotPrecheckoutResultsRequest",
        "SetBotShippingResultsRequest",
        "SetBotUpdatesStatusRequest",
        "SetCallRatingRequest",
        "SetContactSignUpNotificationRequest",
        "SetContentSettingsRequest",
        "SetDiscussionGroupRequest",
        "SetEncryptedTypingRequest",
        "SetGameScoreRequest",
        "SetGlobalPrivacySettingsRequest",
        "SetHistoryTTLRequest",
        "SetInlineBotResultsRequest",
        "SetInlineGameScoreRequest",
        "SetPrivacyRequest",
        "SetSecureValueErrorsRequest",
        "SetStickerSetThumbRequest",
        "SetStickersRequest",
        "SetTypingRequest",
        "SetClientDHParamsRequest",
        "SignInRequest",
        "SignUpRequest",
        "StartBotRequest",
        "StartHistoryImportRequest",
        "StartScheduledGroupCallRequest",
        "SuggestShortNameRequest",
        "ToggleDialogPinRequest",
        "ToggleGroupCallRecordRequest",
        "ToggleGroupCallSettingsRequest",
        "ToggleGroupCallStartSubscriptionRequest",
        "TogglePreHistoryHiddenRequest",
        "ToggleSignaturesRequest",
        "ToggleSlowModeRequest",
        "ToggleStickerSetsRequest",
        "ToggleTopPeersRequest",
        "UnblockRequest",
        "UninstallStickerSetRequest",
        "UnpinAllMessagesRequest",
        "UnregisterDeviceRequest",
        "UpdateDeviceLockedRequest",
        "UpdateDialogFilterRequest",
        "UpdateDialogFiltersOrderRequest",
        "UpdateNotifySettingsRequest",
        "UpdatePasswordSettingsRequest",
        "UpdatePinnedMessageRequest",
        "UpdateProfileRequest",
        "UpdateProfilePhotoRequest",
        "UpdateStatusRequest",
        "UpdateThemeRequest",
        "account.UpdateUsernameRequest",
        "channels.UpdateUsernameRequest",
        "UploadEncryptedFileRequest",
        "UploadImportedMediaRequest",
        "UploadMediaRequest",
        "UploadProfilePhotoRequest",
        "UploadThemeRequest",
        "UploadWallPaperRequest",
        "ValidateRequestedInfoRequest",
        "VerifyEmailRequest",
        "VerifyPhoneRequest"
    ],
    "types":
    [
        "AccessPointRule",
        "AccountDaysTTL",
        "Authorization",
        "AutoDownloadSettings",
        "BadMsgNotification",
        "BankCardOpenUrl",
        "BaseTheme",
        "BindAuthKeyInner",
        "BotCommand",
        "BotCommandScope",
        "BotInfo",
        "BotInlineMessage",
        "BotInlineResult",
        "CdnConfig",
        "CdnPublicKey",
        "ChannelAdminLogEvent",
        "ChannelAdminLogEventAction",
        "ChannelAdminLogEventsFilter",
        "ChannelLocation",
        "ChannelMessagesFilter",
        "ChannelParticipant",
        "ChannelParticipantsFilter",
        "Chat",
        "ChatAdminRights",
        "ChatAdminWithInvites",
        "ChatBannedRights",
        "ChatFull",
        "ChatInvite",
        "ChatInviteImporter",
        "ChatOnlines",
        "ChatParticipant",
        "ChatParticipants",
        "ChatPhoto",
        "Client_DH_Inner_Data",
        "CodeSettings",
        "Config",
        "Contact",
        "ContactStatus",
        "DataJSON",
        "DcOption",
        "DestroyAuthKeyRes",
        "DestroySessionRes",
        "Dialog",
        "DialogFilter",
        "DialogFilterSuggested",
        "DialogPeer",
        "Document",
        "DocumentAttribute",
        "DraftMessage",
        "EmojiKeyword",
        "EmojiKeywordsDifference",
        "EmojiLanguage",
        "EmojiURL",
        "EncryptedChat",
        "EncryptedFile",
        "EncryptedMessage",
        "ExportedChatInvite",
        "ExportedMessageLink",
        "FileHash",
        "Folder",
        "FolderPeer",
        "FutureSalt",
        "FutureSalts",
        "Game",
        "GeoPoint",
        "GlobalPrivacySettings",
        "GroupCall",
        "GroupCallParticipant",
        "GroupCallParticipantVideo",
        "GroupCallParticipantVideoSourceGroup",
        "HighScore",
        "HttpWait",
        "ImportedContact",
        "InlineBotSwitchPM",
        "InlineQueryPeerType",
        "InputAppEvent",
        "InputBotInlineMessage",
        "InputBotInlineMessageID",
        "InputBotInlineResult",
        "InputChannel",
        "InputChatPhoto",
        "InputCheckPasswordSRP",
        "InputClientProxy",
        "InputContact",
        "InputDialogPeer",
        "InputDocument",
        "InputEncryptedChat",
        "InputEncryptedFile",
        "InputFile",
        "InputFileLocation",
        "InputFolderPeer",
        "InputGame",
        "InputGeoPoint",
        "InputGroupCall",
        "InputMedia",
        "InputMessage",
        "InputNotifyPeer",
        "InputPaymentCredentials",
        "InputPeer",
        "InputPeerNotifySettings",
        "InputPhoneCall",
        "InputPhoto",
        "InputPrivacyKey",
        "InputPrivacyRule",
        "InputSecureFile",
        "InputSecureValue",
        "InputSingleMedia",
        "InputStickerSet",
        "InputStickerSetItem",
        "InputStickeredMedia",
        "InputTheme",
        "InputThemeSettings",
        "InputUser",
        "InputWallPaper",
        "InputWebDocument",
        "InputWebFileLocation",
        "Invoice",
        "IpPort",
        "JSONObjectValue",
        "JSONValue",
        "KeyboardButton",
        "KeyboardButtonRow",
        "LabeledPrice",
        "LangPackDifference",
        "LangPackLanguage",
        "LangPackString",
        "MaskCoords",
        "Message",
        "MessageAction",
        "MessageEntity",
        "MessageFwdHeader",
        "MessageInteractionCounters",
        "MessageMedia",
        "MessageRange",
        "MessageReplies",
        "MessageReplyHeader",
        "MessageUserVote",
        "MessageViews",
        "MessagesFilter",
        "MsgDetailedInfo",
        "MsgResendReq",
        "MsgsAck",
        "MsgsAllInfo",
        "MsgsStateInfo",
        "MsgsStateReq",
        "NearestDc",
        "NewSession",
        "NotifyPeer",
        "P_Q_inner_data",
        "Page",
        "PageBlock",
        "PageCaption",
        "PageListItem",
        "PageListOrderedItem",
        "PageRelatedArticle",
        "PageTableCell",
        "PageTableRow",
        "PasswordKdfAlgo",
        "PaymentCharge",
        "PaymentRequestedInfo",
        "PaymentSavedCredentials",
        "Peer",
        "PeerBlocked",
        "PeerLocated",
        "PeerNotifySettings",
        "PeerSettings",
        "PhoneCall",
        "PhoneCallDiscardReason",
        "PhoneCallProtocol",
        "PhoneConnection",
        "Photo",
        "PhotoSize",
        "Poll",
        "PollAnswer",
        "PollAnswerVoters",
        "PollResults",
        "Pong",
        "PopularContact",
        "PostAddress",
        "PrivacyKey",
        "PrivacyRule",
        "ReceivedNotifyMessage",
        "RecentMeUrl",
        "ReplyMarkup",
        "ReportReason",
        "ResPQ",
        "RestrictionReason",
        "RichText",
        "RpcDropAnswer",
        "RpcError",
        "SavedContact",
        "SecureCredentialsEncrypted",
        "SecureData",
        "SecureFile",
        "SecurePasswordKdfAlgo",
        "SecurePlainData",
        "SecureRequiredType",
        "SecureSecretSettings",
        "SecureValue",
        "SecureValueError",
        "SecureValueHash",
        "SecureValueType",
        "SendMessageAction",
        "Server_DH_Params",
        "Server_DH_inner_data",
        "Set_client_DH_params_answer",
        "ShippingOption",
        "StatsAbsValueAndPrev",
        "StatsDateRangeDays",
        "StatsGraph",
        "StatsGroupTopAdmin",
        "StatsGroupTopInviter",
        "StatsGroupTopPoster",
        "StatsPercentValue",
        "StatsURL",
        "StickerPack",
        "StickerSet",
        "StickerSetCovered",
        "Theme",
        "ThemeSettings",
        "TlsBlock",
        "TlsClientHello",
        "TopPeer",
        "TopPeerCategory",
        "TopPeerCategoryPeers",
        "Update",
        "Updates",
        "UrlAuthResult",
        "User",
        "UserFull",
        "UserProfilePhoto",
        "UserStatus",
        "VideoSize",
        "WallPaper",
        "WallPaperSettings",
        "WebAuthorization",
        "WebDocument",
        "WebPage",
        "WebPageAttribute",
        "X",
        "account.AuthorizationForm",
        "account.Authorizations",
        "account.AutoDownloadSettings",
        "account.ContentSettings",
        "account.Password",
        "account.PasswordInputSettings",
        "account.PasswordSettings",
        "account.PrivacyRules",
        "account.SentEmailCode",
        "account.Takeout",
        "account.Themes",
        "account.TmpPassword",
        "account.WallPapers",
        "account.WebAuthorizations",
        "auth.Authorization",
        "auth.CodeType",
        "auth.ExportedAuthorization",
        "auth.LoginToken",
        "auth.PasswordRecovery",
        "auth.SentCode",
        "auth.SentCodeType",
        "channels.AdminLogResults",
        "channels.ChannelParticipant",
        "channels.ChannelParticipants",
        "contacts.Blocked",
        "contacts.Contacts",
        "contacts.Found",
        "contacts.ImportedContacts",
        "contacts.ResolvedPeer",
        "contacts.TopPeers",
        "help.AppUpdate",
        "help.ConfigSimple",
        "help.CountriesList",
        "help.Country",
        "help.CountryCode",
        "help.DeepLinkInfo",
        "help.InviteText",
        "help.PassportConfig",
        "help.PromoData",
        "help.RecentMeUrls",
        "help.Support",
        "help.SupportName",
        "help.TermsOfService",
        "help.TermsOfServiceUpdate",
        "help.UserInfo",
        "int",
        "long",
        "messages.AffectedFoundMessages",
        "messages.AffectedHistory",
        "messages.AffectedMessages",
        "messages.AllStickers",
        "messages.ArchivedStickers",
        "messages.BotCallbackAnswer",
        "messages.BotResults",
        "messages.ChatAdminsWithInvites",
        "messages.ChatFull",
        "messages.ChatInviteImporters",
        "messages.Chats",
        "messages.CheckedHistoryImportPeer",
        "messages.DhConfig",
        "messages.Dialogs",
        "messages.DiscussionMessage",
        "messages.ExportedChatInvite",
        "messages.ExportedChatInvites",
        "messages.FavedStickers",
        "messages.FeaturedStickers",
        "messages.FoundStickerSets",
        "messages.HighScores",
        "messages.HistoryImport",
        "messages.HistoryImportParsed",
        "messages.InactiveChats",
        "messages.MessageEditData",
        "messages.MessageViews",
        "messages.Messages",
        "messages.PeerDialogs",
        "messages.RecentStickers",
        "messages.SavedGifs",
        "messages.SearchCounter",
        "messages.SentEncryptedMessage",
        "messages.StickerSet",
        "messages.StickerSetInstallResult",
        "messages.Stickers",
        "messages.VotesList",
        "payments.BankCardData",
        "payments.PaymentForm",
        "payments.PaymentReceipt",
        "payments.PaymentResult",
        "payments.SavedInfo",
        "payments.ValidatedRequestedInfo",
        "phone.ExportedGroupCallInvite",
        "phone.GroupCall",
        "phone.GroupParticipants",
        "phone.JoinAsPeers",
        "phone.PhoneCall",
        "photos.Photo",
        "photos.Photos",
        "stats.BroadcastStats",
        "stats.MegagroupStats",
        "stats.MessageStats",
        "stickers.SuggestedShortName",
        "storage.FileType",
        "updates.ChannelDifference",
        "updates.Difference",
        "updates.State",
        "upload.CdnFile",
        "upload.File",
        "upload.WebFile"
    ],
    "constructors":
    [
        "AccessPointRule",
        "AccountDaysTTL",
        "AdminLogResults",
        "AffectedFoundMessages",
        "AffectedHistory",
        "AffectedMessages",
        "AllStickers",
        "AllStickersNotModified",
        "AppUpdate",
        "ArchivedStickers",
        "auth.Authorization",
        "Authorization",
        "AuthorizationForm",
        "AuthorizationSignUpRequired",
        "Authorizations",
        "AutoDownloadSettings",
        "account.AutoDownloadSettings",
        "BadMsgNotification",
        "BadServerSalt",
        "BankCardData",
        "BankCardOpenUrl",
        "BaseThemeArctic",
        "BaseThemeClassic",
        "BaseThemeDay",
        "BaseThemeNight",
        "BaseThemeTinted",
        "BindAuthKeyInner",
        "Blocked",
        "BlockedSlice",
        "BotCallbackAnswer",
        "BotCommand",
        "BotCommandScopeChatAdmins",
        "BotCommandScopeChats",
        "BotCommandScopeDefault",
        "BotCommandScopePeer",
        "BotCommandScopePeerAdmins",
        "BotCommandScopePeerUser",
        "BotCommandScopeUsers",
        "BotInfo",
        "BotInlineMediaResult",
        "BotInlineMessageMediaAuto",
        "BotInlineMessageMediaContact",
        "BotInlineMessageMediaGeo",
        "BotInlineMessageMediaInvoice",
        "BotInlineMessageMediaVenue",
        "BotInlineMessageText",
        "BotInlineResult",
        "BotResults",
        "BroadcastStats",
        "CdnConfig",
        "CdnFile",
        "CdnFileReuploadNeeded",
        "CdnPublicKey",
        "Channel",
        "ChannelAdminLogEvent",
        "ChannelAdminLogEventActionChangeAbout",
        "ChannelAdminLogEventActionChangeHistoryTTL",
        "ChannelAdminLogEventActionChangeLinkedChat",
        "ChannelAdminLogEventActionChangeLocation",
        "ChannelAdminLogEventActionChangePhoto",
        "ChannelAdminLogEventActionChangeStickerSet",
        "ChannelAdminLogEventActionChangeTitle",
        "ChannelAdminLogEventActionChangeUsername",
        "ChannelAdminLogEventActionDefaultBannedRights",
        "ChannelAdminLogEventActionDeleteMessage",
        "ChannelAdminLogEventActionDiscardGroupCall",
        "ChannelAdminLogEventActionEditMessage",
        "ChannelAdminLogEventActionExportedInviteDelete",
        "ChannelAdminLogEventActionExportedInviteEdit",
        "ChannelAdminLogEventActionExportedInviteRevoke",
        "ChannelAdminLogEventActionParticipantInvite",
        "ChannelAdminLogEventActionParticipantJoin",
        "ChannelAdminLogEventActionParticipantJoinByInvite",
        "ChannelAdminLogEventActionParticipantLeave",
        "ChannelAdminLogEventActionParticipantMute",
        "ChannelAdminLogEventActionParticipantToggleAdmin",
        "ChannelAdminLogEventActionParticipantToggleBan",
        "ChannelAdminLogEventActionParticipantUnmute",
        "ChannelAdminLogEventActionParticipantVolume",
        "ChannelAdminLogEventActionStartGroupCall",
        "ChannelAdminLogEventActionStopPoll",
        "ChannelAdminLogEventActionToggleGroupCallSetting",
        "ChannelAdminLogEventActionToggleInvites",
        "ChannelAdminLogEventActionTogglePreHistoryHidden",
        "ChannelAdminLogEventActionToggleSignatures",
        "ChannelAdminLogEventActionToggleSlowMode",
        "ChannelAdminLogEventActionUpdatePinned",
        "ChannelAdminLogEventsFilter",
        "ChannelDifference",
        "ChannelDifferenceEmpty",
        "ChannelDifferenceTooLong",
        "ChannelForbidden",
        "ChannelFull",
        "ChannelLocation",
        "ChannelLocationEmpty",
        "ChannelMessages",
        "ChannelMessagesFilter",
        "ChannelMessagesFilterEmpty",
        "ChannelParticipant",
        "channels.ChannelParticipant",
        "ChannelParticipantAdmin",
        "ChannelParticipantBanned",
        "ChannelParticipantCreator",
        "ChannelParticipantLeft",
        "ChannelParticipantSelf",
        "ChannelParticipants",
        "ChannelParticipantsAdmins",
        "ChannelParticipantsBanned",
        "ChannelParticipantsBots",
        "ChannelParticipantsContacts",
        "ChannelParticipantsKicked",
        "ChannelParticipantsMentions",
        "ChannelParticipantsNotModified",
        "ChannelParticipantsRecent",
        "ChannelParticipantsSearch",
        "Chat",
        "ChatAdminRights",
        "ChatAdminWithInvites",
        "ChatAdminsWithInvites",
        "ChatBannedRights",
        "ChatEmpty",
        "ChatForbidden",
        "ChatFull",
        "messages.ChatFull",
        "ChatInvite",
        "ChatInviteAlready",
        "ChatInviteExported",
        "ChatInviteImporter",
        "ChatInviteImporters",
        "ChatInvitePeek",
        "ChatOnlines",
        "ChatParticipant",
        "ChatParticipantAdmin",
        "ChatParticipantCreator",
        "ChatParticipants",
        "ChatParticipantsForbidden",
        "ChatPhoto",
        "ChatPhotoEmpty",
        "Chats",
        "ChatsSlice",
        "CheckedHistoryImportPeer",
        "ClientDHInnerData",
        "CodeSettings",
        "CodeTypeCall",
        "CodeTypeFlashCall",
        "CodeTypeSms",
        "Config",
        "ConfigSimple",
        "Contact",
        "ContactStatus",
        "Contacts",
        "ContactsNotModified",
        "ContentSettings",
        "CountriesList",
        "CountriesListNotModified",
        "Country",
        "CountryCode",
        "DataJSON",
        "DcOption",
        "DeepLinkInfo",
        "DeepLinkInfoEmpty",
        "DestroyAuthKeyFail",
        "DestroyAuthKeyNone",
        "DestroyAuthKeyOk",
        "DestroySessionNone",
        "DestroySessionOk",
        "DhConfig",
        "DhConfigNotModified",
        "DhGenFail",
        "DhGenOk",
        "DhGenRetry",
        "Dialog",
        "DialogFilter",
        "DialogFilterSuggested",
        "DialogFolder",
        "DialogPeer",
        "DialogPeerFolder",
        "Dialogs",
        "DialogsNotModified",
        "DialogsSlice",
        "Difference",
        "DifferenceEmpty",
        "DifferenceSlice",
        "DifferenceTooLong",
        "DiscussionMessage",
        "Document",
        "DocumentAttributeAnimated",
        "DocumentAttributeAudio",
        "DocumentAttributeFilename",
        "DocumentAttributeHasStickers",
        "DocumentAttributeImageSize",
        "DocumentAttributeSticker",
        "DocumentAttributeVideo",
        "DocumentEmpty",
        "DraftMessage",
        "DraftMessageEmpty",
        "EmojiKeyword",
        "EmojiKeywordDeleted",
        "EmojiKeywordsDifference",
        "EmojiLanguage",
        "EmojiURL",
        "EncryptedChat",
        "EncryptedChatDiscarded",
        "EncryptedChatEmpty",
        "EncryptedChatRequested",
        "EncryptedChatWaiting",
        "EncryptedFile",
        "EncryptedFileEmpty",
        "EncryptedMessage",
        "EncryptedMessageService",
        "ExportedAuthorization",
        "ExportedChatInvite",
        "ExportedChatInviteReplaced",
        "ExportedChatInvites",
        "ExportedGroupCallInvite",
        "ExportedMessageLink",
        "FavedStickers",
        "FavedStickersNotModified",
        "FeaturedStickers",
        "FeaturedStickersNotModified",
        "File",
        "FileCdnRedirect",
        "FileGif",
        "FileHash",
        "FileJpeg",
        "FileMov",
        "FileMp3",
        "FileMp4",
        "FilePartial",
        "FilePdf",
        "FilePng",
        "FileUnknown",
        "FileWebp",
        "Folder",
        "FolderPeer",
        "Found",
        "FoundStickerSets",
        "FoundStickerSetsNotModified",
        "FutureSalt",
        "FutureSalts",
        "Game",
        "GeoPoint",
        "GeoPointEmpty",
        "GlobalPrivacySettings",
        "GroupCall",
        "phone.GroupCall",
        "GroupCallDiscarded",
        "GroupCallParticipant",
        "GroupCallParticipantVideo",
        "GroupCallParticipantVideoSourceGroup",
        "GroupParticipants",
        "HighScore",
        "HighScores",
        "HistoryImport",
        "HistoryImportParsed",
        "HttpWait",
        "ImportedContact",
        "ImportedContacts",
        "InactiveChats",
        "InlineBotSwitchPM",
        "InlineQueryPeerTypeBroadcast",
        "InlineQueryPeerTypeChat",
        "InlineQueryPeerTypeMegagroup",
        "InlineQueryPeerTypePM",
        "InlineQueryPeerTypeSameBotPM",
        "InputAppEvent",
        "InputBotInlineMessageGame",
        "InputBotInlineMessageID",
        "InputBotInlineMessageMediaAuto",
        "InputBotInlineMessageMediaContact",
        "InputBotInlineMessageMediaGeo",
        "InputBotInlineMessageMediaInvoice",
        "InputBotInlineMessageMediaVenue",
        "InputBotInlineMessageText",
        "InputBotInlineResult",
        "InputBotInlineResultDocument",
        "InputBotInlineResultGame",
        "InputBotInlineResultPhoto",
        "InputChannel",
        "InputChannelEmpty",
        "InputChannelFromMessage",
        "InputChatPhoto",
        "InputChatPhotoEmpty",
        "InputChatUploadedPhoto",
        "InputCheckPasswordEmpty",
        "InputCheckPasswordSRP",
        "InputClientProxy",
        "InputDialogPeer",
        "InputDialogPeerFolder",
        "InputDocument",
        "InputDocumentEmpty",
        "InputDocumentFileLocation",
        "InputEncryptedChat",
        "InputEncryptedFile",
        "InputEncryptedFileBigUploaded",
        "InputEncryptedFileEmpty",
        "InputEncryptedFileLocation",
        "InputEncryptedFileUploaded",
        "InputFile",
        "InputFileBig",
        "InputFileLocation",
        "InputFolderPeer",
        "InputGameID",
        "InputGameShortName",
        "InputGeoPoint",
        "InputGeoPointEmpty",
        "InputGroupCall",
        "InputGroupCallStream",
        "InputKeyboardButtonUrlAuth",
        "InputMediaContact",
        "InputMediaDice",
        "InputMediaDocument",
        "InputMediaDocumentExternal",
        "InputMediaEmpty",
        "InputMediaGame",
        "InputMediaGeoLive",
        "InputMediaGeoPoint",
        "InputMediaInvoice",
        "InputMediaPhoto",
        "InputMediaPhotoExternal",
        "InputMediaPoll",
        "InputMediaUploadedDocument",
        "InputMediaUploadedPhoto",
        "InputMediaVenue",
        "InputMessageCallbackQuery",
        "InputMessageEntityMentionName",
        "InputMessageID",
        "InputMessagePinned",
        "InputMessageReplyTo",
        "InputMessagesFilterChatPhotos",
        "InputMessagesFilterContacts",
        "InputMessagesFilterDocument",
        "InputMessagesFilterEmpty",
        "InputMessagesFilterGeo",
        "InputMessagesFilterGif",
        "InputMessagesFilterMusic",
        "InputMessagesFilterMyMentions",
        "InputMessagesFilterPhoneCalls",
        "InputMessagesFilterPhotoVideo",
        "InputMessagesFilterPhotos",
        "InputMessagesFilterPinned",
        "InputMessagesFilterRoundVideo",
        "InputMessagesFilterRoundVoice",
        "InputMessagesFilterUrl",
        "InputMessagesFilterVideo",
        "InputMessagesFilterVoice",
        "InputNotifyBroadcasts",
        "InputNotifyChats",
        "InputNotifyPeer",
        "InputNotifyUsers",
        "InputPaymentCredentials",
        "InputPaymentCredentialsApplePay",
        "InputPaymentCredentialsGooglePay",
        "InputPaymentCredentialsSaved",
        "InputPeerChannel",
        "InputPeerChannelFromMessage",
        "InputPeerChat",
        "InputPeerEmpty",
        "InputPeerNotifySettings",
        "InputPeerPhotoFileLocation",
        "InputPeerSelf",
        "InputPeerUser",
        "InputPeerUserFromMessage",
        "InputPhoneCall",
        "InputPhoneContact",
        "InputPhoto",
        "InputPhotoEmpty",
        "InputPhotoFileLocation",
        "InputPhotoLegacyFileLocation",
        "InputPrivacyKeyAddedByPhone",
        "InputPrivacyKeyChatInvite",
        "InputPrivacyKeyForwards",
        "InputPrivacyKeyPhoneCall",
        "InputPrivacyKeyPhoneNumber",
        "InputPrivacyKeyPhoneP2P",
        "InputPrivacyKeyProfilePhoto",
        "InputPrivacyKeyStatusTimestamp",
        "InputPrivacyValueAllowAll",
        "InputPrivacyValueAllowChatParticipants",
        "InputPrivacyValueAllowContacts",
        "InputPrivacyValueAllowUsers",
        "InputPrivacyValueDisallowAll",
        "InputPrivacyValueDisallowChatParticipants",
        "InputPrivacyValueDisallowContacts",
        "InputPrivacyValueDisallowUsers",
        "InputReportReasonChildAbuse",
        "InputReportReasonCopyright",
        "InputReportReasonFake",
        "InputReportReasonGeoIrrelevant",
        "InputReportReasonOther",
        "InputReportReasonPornography",
        "InputReportReasonSpam",
        "InputReportReasonViolence",
        "InputSecureFile",
        "InputSecureFileLocation",
        "InputSecureFileUploaded",
        "InputSecureValue",
        "InputSingleMedia",
        "InputStickerSetAnimatedEmoji",
        "InputStickerSetDice",
        "InputStickerSetEmpty",
        "InputStickerSetID",
        "InputStickerSetItem",
        "InputStickerSetShortName",
        "InputStickerSetThumb",
        "InputStickeredMediaDocument",
        "InputStickeredMediaPhoto",
        "InputTakeoutFileLocation",
        "InputTheme",
        "InputThemeSettings",
        "InputThemeSlug",
        "InputUser",
        "InputUserEmpty",
        "InputUserFromMessage",
        "InputUserSelf",
        "InputWallPaper",
        "InputWallPaperNoFile",
        "InputWallPaperSlug",
        "InputWebDocument",
        "InputWebFileGeoPointLocation",
        "InputWebFileLocation",
        "InviteText",
        "Invoice",
        "IpPort",
        "IpPortSecret",
        "JoinAsPeers",
        "JsonArray",
        "JsonBool",
        "JsonNull",
        "JsonNumber",
        "JsonObject",
        "JsonObjectValue",
        "JsonString",
        "KeyboardButton",
        "KeyboardButtonBuy",
        "KeyboardButtonCallback",
        "KeyboardButtonGame",
        "KeyboardButtonRequestGeoLocation",
        "KeyboardButtonRequestPhone",
        "KeyboardButtonRequestPoll",
        "KeyboardButtonRow",
        "KeyboardButtonSwitchInline",
        "KeyboardButtonUrl",
        "KeyboardButtonUrlAuth",
        "LabeledPrice",
        "LangPackDifference",
        "LangPackLanguage",
        "LangPackString",
        "LangPackStringDeleted",
        "LangPackStringPluralized",
        "LoginToken",
        "LoginTokenMigrateTo",
        "LoginTokenSuccess",
        "MaskCoords",
        "MegagroupStats",
        "Message",
        "MessageActionBotAllowed",
        "MessageActionChannelCreate",
        "MessageActionChannelMigrateFrom",
        "MessageActionChatAddUser",
        "MessageActionChatCreate",
        "MessageActionChatDeletePhoto",
        "MessageActionChatDeleteUser",
        "MessageActionChatEditPhoto",
        "MessageActionChatEditTitle",
        "MessageActionChatJoinedByLink",
        "MessageActionChatMigrateTo",
        "MessageActionContactSignUp",
        "MessageActionCustomAction",
        "MessageActionEmpty",
        "MessageActionGameScore",
        "MessageActionGeoProximityReached",
        "MessageActionGroupCall",
        "MessageActionGroupCallScheduled",
        "MessageActionHistoryClear",
        "MessageActionInviteToGroupCall",
        "MessageActionPaymentSent",
        "MessageActionPaymentSentMe",
        "MessageActionPhoneCall",
        "MessageActionPinMessage",
        "MessageActionScreenshotTaken",
        "MessageActionSecureValuesSent",
        "MessageActionSecureValuesSentMe",
        "MessageActionSetMessagesTTL",
        "MessageEditData",
        "MessageEmpty",
        "MessageEntityBankCard",
        "MessageEntityBlockquote",
        "MessageEntityBold",
        "MessageEntityBotCommand",
        "MessageEntityCashtag",
        "MessageEntityCode",
        "MessageEntityEmail",
        "MessageEntityHashtag",
        "MessageEntityItalic",
        "MessageEntityMention",
        "MessageEntityMentionName",
        "MessageEntityPhone",
        "MessageEntityPre",
        "MessageEntityStrike",
        "MessageEntityTextUrl",
        "MessageEntityUnderline",
        "MessageEntityUnknown",
        "MessageEntityUrl",
        "MessageFwdHeader",
        "MessageInteractionCounters",
        "MessageMediaContact",
        "MessageMediaDice",
        "MessageMediaDocument",
        "MessageMediaEmpty",
        "MessageMediaGame",
        "MessageMediaGeo",
        "MessageMediaGeoLive",
        "MessageMediaInvoice",
        "MessageMediaPhoto",
        "MessageMediaPoll",
        "MessageMediaUnsupported",
        "MessageMediaVenue",
        "MessageMediaWebPage",
        "MessageRange",
        "MessageReplies",
        "MessageReplyHeader",
        "MessageService",
        "MessageStats",
        "MessageUserVote",
        "MessageUserVoteInputOption",
        "MessageUserVoteMultiple",
        "MessageViews",
        "messages.MessageViews",
        "Messages",
        "MessagesNotModified",
        "MessagesSlice",
        "MsgDetailedInfo",
        "MsgNewDetailedInfo",
        "MsgResendReq",
        "MsgsAck",
        "MsgsAllInfo",
        "MsgsStateInfo",
        "MsgsStateReq",
        "NearestDc",
        "NewSessionCreated",
        "NoAppUpdate",
        "NotifyBroadcasts",
        "NotifyChats",
        "NotifyPeer",
        "NotifyUsers",
        "PQInnerData",
        "PQInnerDataDc",
        "PQInnerDataTemp",
        "PQInnerDataTempDc",
        "Page",
        "PageBlockAnchor",
        "PageBlockAudio",
        "PageBlockAuthorDate",
        "PageBlockBlockquote",
        "PageBlockChannel",
        "PageBlockCollage",
        "PageBlockCover",
        "PageBlockDetails",
        "PageBlockDivider",
        "PageBlockEmbed",
        "PageBlockEmbedPost",
        "PageBlockFooter",
        "PageBlockHeader",
        "PageBlockKicker",
        "PageBlockList",
        "PageBlockMap",
        "PageBlockOrderedList",
        "PageBlockParagraph",
        "PageBlockPhoto",
        "PageBlockPreformatted",
        "PageBlockPullquote",
        "PageBlockRelatedArticles",
        "PageBlockSlideshow",
        "PageBlockSubheader",
        "PageBlockSubtitle",
        "PageBlockTable",
        "PageBlockTitle",
        "PageBlockUnsupported",
        "PageBlockVideo",
        "PageCaption",
        "PageListItemBlocks",
        "PageListItemText",
        "PageListOrderedItemBlocks",
        "PageListOrderedItemText",
        "PageRelatedArticle",
        "PageTableCell",
        "PageTableRow",
        "PassportConfig",
        "PassportConfigNotModified",
        "Password",
        "PasswordInputSettings",
        "PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow",
        "PasswordKdfAlgoUnknown",
        "PasswordRecovery",
        "PasswordSettings",
        "PaymentCharge",
        "PaymentForm",
        "PaymentReceipt",
        "PaymentRequestedInfo",
        "PaymentResult",
        "PaymentSavedCredentialsCard",
        "PaymentVerificationNeeded",
        "PeerBlocked",
        "PeerChannel",
        "PeerChat",
        "PeerDialogs",
        "PeerLocated",
        "PeerNotifySettings",
        "PeerSelfLocated",
        "PeerSettings",
        "PeerUser",
        "PhoneCall",
        "phone.PhoneCall",
        "PhoneCallAccepted",
        "PhoneCallDiscardReasonBusy",
        "PhoneCallDiscardReasonDisconnect",
        "PhoneCallDiscardReasonHangup",
        "PhoneCallDiscardReasonMissed",
        "PhoneCallDiscarded",
        "PhoneCallEmpty",
        "PhoneCallProtocol",
        "PhoneCallRequested",
        "PhoneCallWaiting",
        "PhoneConnection",
        "PhoneConnectionWebrtc",
        "Photo",
        "photos.Photo",
        "PhotoCachedSize",
        "PhotoEmpty",
        "PhotoPathSize",
        "PhotoSize",
        "PhotoSizeEmpty",
        "PhotoSizeProgressive",
        "PhotoStrippedSize",
        "Photos",
        "PhotosSlice",
        "Poll",
        "PollAnswer",
        "PollAnswerVoters",
        "PollResults",
        "Pong",
        "PopularContact",
        "PostAddress",
        "PrivacyKeyAddedByPhone",
        "PrivacyKeyChatInvite",
        "PrivacyKeyForwards",
        "PrivacyKeyPhoneCall",
        "PrivacyKeyPhoneNumber",
        "PrivacyKeyPhoneP2P",
        "PrivacyKeyProfilePhoto",
        "PrivacyKeyStatusTimestamp",
        "PrivacyRules",
        "PrivacyValueAllowAll",
        "PrivacyValueAllowChatParticipants",
        "PrivacyValueAllowContacts",
        "PrivacyValueAllowUsers",
        "PrivacyValueDisallowAll",
        "PrivacyValueDisallowChatParticipants",
        "PrivacyValueDisallowContacts",
        "PrivacyValueDisallowUsers",
        "PromoData",
        "PromoDataEmpty",
        "ReceivedNotifyMessage",
        "RecentMeUrlChat",
        "RecentMeUrlChatInvite",
        "RecentMeUrlStickerSet",
        "RecentMeUrlUnknown",
        "RecentMeUrlUser",
        "RecentMeUrls",
        "RecentStickers",
        "RecentStickersNotModified",
        "ReplyInlineMarkup",
        "ReplyKeyboardForceReply",
        "ReplyKeyboardHide",
        "ReplyKeyboardMarkup",
        "ResPQ",
        "ResolvedPeer",
        "RestrictionReason",
        "RpcAnswerDropped",
        "RpcAnswerDroppedRunning",
        "RpcAnswerUnknown",
        "RpcError",
        "SavedGifs",
        "SavedGifsNotModified",
        "SavedInfo",
        "SavedPhoneContact",
        "SearchCounter",
        "SecureCredentialsEncrypted",
        "SecureData",
        "SecureFile",
        "SecureFileEmpty",
        "SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000",
        "SecurePasswordKdfAlgoSHA512",
        "SecurePasswordKdfAlgoUnknown",
        "SecurePlainEmail",
        "SecurePlainPhone",
        "SecureRequiredType",
        "SecureRequiredTypeOneOf",
        "SecureSecretSettings",
        "SecureValue",
        "SecureValueError",
        "SecureValueErrorData",
        "SecureValueErrorFile",
        "SecureValueErrorFiles",
        "SecureValueErrorFrontSide",
        "SecureValueErrorReverseSide",
        "SecureValueErrorSelfie",
        "SecureValueErrorTranslationFile",
        "SecureValueErrorTranslationFiles",
        "SecureValueHash",
        "SecureValueTypeAddress",
        "SecureValueTypeBankStatement",
        "SecureValueTypeDriverLicense",
        "SecureValueTypeEmail",
        "SecureValueTypeIdentityCard",
        "SecureValueTypeInternalPassport",
        "SecureValueTypePassport",
        "SecureValueTypePassportRegistration",
        "SecureValueTypePersonalDetails",
        "SecureValueTypePhone",
        "SecureValueTypeRentalAgreement",
        "SecureValueTypeTemporaryRegistration",
        "SecureValueTypeUtilityBill",
        "SendMessageCancelAction",
        "SendMessageChooseContactAction",
        "SendMessageGamePlayAction",
        "SendMessageGeoLocationAction",
        "SendMessageHistoryImportAction",
        "SendMessageRecordAudioAction",
        "SendMessageRecordRoundAction",
        "SendMessageRecordVideoAction",
        "SendMessageTypingAction",
        "SendMessageUploadAudioAction",
        "SendMessageUploadDocumentAction",
        "SendMessageUploadPhotoAction",
        "SendMessageUploadRoundAction",
        "SendMessageUploadVideoAction",
        "SentCode",
        "SentCodeTypeApp",
        "SentCodeTypeCall",
        "SentCodeTypeFlashCall",
        "SentCodeTypeSms",
        "SentEmailCode",
        "SentEncryptedFile",
        "SentEncryptedMessage",
        "ServerDHInnerData",
        "ServerDHParamsFail",
        "ServerDHParamsOk",
        "ShippingOption",
        "SpeakingInGroupCallAction",
        "State",
        "StatsAbsValueAndPrev",
        "StatsDateRangeDays",
        "StatsGraph",
        "StatsGraphAsync",
        "StatsGraphError",
        "StatsGroupTopAdmin",
        "StatsGroupTopInviter",
        "StatsGroupTopPoster",
        "StatsPercentValue",
        "StatsURL",
        "StickerPack",
        "StickerSet",
        "messages.StickerSet",
        "StickerSetCovered",
        "StickerSetInstallResultArchive",
        "StickerSetInstallResultSuccess",
        "StickerSetMultiCovered",
        "Stickers",
        "StickersNotModified",
        "SuggestedShortName",
        "Support",
        "SupportName",
        "Takeout",
        "TermsOfService",
        "TermsOfServiceUpdate",
        "TermsOfServiceUpdateEmpty",
        "TextAnchor",
        "TextBold",
        "TextConcat",
        "TextEmail",
        "TextEmpty",
        "TextFixed",
        "TextImage",
        "TextItalic",
        "TextMarked",
        "TextPhone",
        "TextPlain",
        "TextStrike",
        "TextSubscript",
        "TextSuperscript",
        "TextUnderline",
        "TextUrl",
        "Theme",
        "ThemeSettings",
        "Themes",
        "ThemesNotModified",
        "TlsBlockDomain",
        "TlsBlockGrease",
        "TlsBlockPublicKey",
        "TlsBlockRandom",
        "TlsBlockScope",
        "TlsBlockString",
        "TlsBlockZero",
        "TlsClientHello",
        "TmpPassword",
        "TopPeer",
        "TopPeerCategoryBotsInline",
        "TopPeerCategoryBotsPM",
        "TopPeerCategoryChannels",
        "TopPeerCategoryCorrespondents",
        "TopPeerCategoryForwardChats",
        "TopPeerCategoryForwardUsers",
        "TopPeerCategoryGroups",
        "TopPeerCategoryPeers",
        "TopPeerCategoryPhoneCalls",
        "TopPeers",
        "TopPeersDisabled",
        "TopPeersNotModified",
        "UpdateBotCallbackQuery",
        "UpdateBotInlineQuery",
        "UpdateBotInlineSend",
        "UpdateBotPrecheckoutQuery",
        "UpdateBotShippingQuery",
        "UpdateBotStopped",
        "UpdateBotWebhookJSON",
        "UpdateBotWebhookJSONQuery",
        "UpdateChannel",
        "UpdateChannelAvailableMessages",
        "UpdateChannelMessageForwards",
        "UpdateChannelMessageViews",
        "UpdateChannelParticipant",
        "UpdateChannelReadMessagesContents",
        "UpdateChannelTooLong",
        "UpdateChannelUserTyping",
        "UpdateChannelWebPage",
        "UpdateChat",
        "UpdateChatDefaultBannedRights",
        "UpdateChatParticipant",
        "UpdateChatParticipantAdd",
        "UpdateChatParticipantAdmin",
        "UpdateChatParticipantDelete",
        "UpdateChatParticipants",
        "UpdateChatUserTyping",
        "UpdateConfig",
        "UpdateContactsReset",
        "UpdateDcOptions",
        "UpdateDeleteChannelMessages",
        "UpdateDeleteMessages",
        "UpdateDeleteScheduledMessages",
        "UpdateDialogFilter",
        "UpdateDialogFilterOrder",
        "UpdateDialogFilters",
        "UpdateDialogPinned",
        "UpdateDialogUnreadMark",
        "UpdateDraftMessage",
        "UpdateEditChannelMessage",
        "UpdateEditMessage",
        "UpdateEncryptedChatTyping",
        "UpdateEncryptedMessagesRead",
        "UpdateEncryption",
        "UpdateFavedStickers",
        "UpdateFolderPeers",
        "UpdateGeoLiveViewed",
        "UpdateGroupCall",
        "UpdateGroupCallConnection",
        "UpdateGroupCallParticipants",
        "UpdateInlineBotCallbackQuery",
        "UpdateLangPack",
        "UpdateLangPackTooLong",
        "UpdateLoginToken",
        "UpdateMessageID",
        "UpdateMessagePoll",
        "UpdateMessagePollVote",
        "UpdateNewChannelMessage",
        "UpdateNewEncryptedMessage",
        "UpdateNewMessage",
        "UpdateNewScheduledMessage",
        "UpdateNewStickerSet",
        "UpdateNotifySettings",
        "UpdatePeerBlocked",
        "UpdatePeerHistoryTTL",
        "UpdatePeerLocated",
        "UpdatePeerSettings",
        "UpdatePhoneCall",
        "UpdatePhoneCallSignalingData",
        "UpdatePinnedChannelMessages",
        "UpdatePinnedDialogs",
        "UpdatePinnedMessages",
        "UpdatePrivacy",
        "UpdatePtsChanged",
        "UpdateReadChannelDiscussionInbox",
        "UpdateReadChannelDiscussionOutbox",
        "UpdateReadChannelInbox",
        "UpdateReadChannelOutbox",
        "UpdateReadFeaturedStickers",
        "UpdateReadHistoryInbox",
        "UpdateReadHistoryOutbox",
        "UpdateReadMessagesContents",
        "UpdateRecentStickers",
        "UpdateSavedGifs",
        "UpdateServiceNotification",
        "UpdateShort",
        "UpdateShortChatMessage",
        "UpdateShortMessage",
        "UpdateShortSentMessage",
        "UpdateStickerSets",
        "UpdateStickerSetsOrder",
        "UpdateTheme",
        "UpdateUserName",
        "UpdateUserPhone",
        "UpdateUserPhoto",
        "UpdateUserStatus",
        "UpdateUserTyping",
        "UpdateWebPage",
        "Updates",
        "UpdatesCombined",
        "UpdatesTooLong",
        "UrlAuthResultAccepted",
        "UrlAuthResultDefault",
        "UrlAuthResultRequest",
        "User",
        "UserEmpty",
        "UserFull",
        "UserInfo",
        "UserInfoEmpty",
        "UserProfilePhoto",
        "UserProfilePhotoEmpty",
        "UserStatusEmpty",
        "UserStatusLastMonth",
        "UserStatusLastWeek",
        "UserStatusOffline",
        "UserStatusOnline",
        "UserStatusRecently",
        "ValidatedRequestedInfo",
        "VideoSize",
        "VotesList",
        "WallPaper",
        "WallPaperNoFile",
        "WallPaperSettings",
        "WallPapers",
        "WallPapersNotModified",
        "WebAuthorization",
        "WebAuthorizations",
        "WebDocument",
        "WebDocumentNoProxy",
        "WebFile",
        "WebPage",
        "WebPageAttributeTheme",
        "WebPageEmpty",
        "WebPageNotModified",
        "WebPagePending"
    ],
    "requests_urls":
    [
        "methods/account/accept_authorization.html",
        "methods/phone/accept_call.html",
        "methods/contacts/accept_contact.html",
        "methods/messages/accept_encryption.html",
        "methods/auth/accept_login_token.html",
        "methods/help/accept_terms_of_service.html",
        "methods/messages/accept_url_auth.html",
        "methods/messages/add_chat_user.html",
        "methods/contacts/add_contact.html",
        "methods/stickers/add_sticker_to_set.html",
        "methods/bots/answer_webhook_json_query.html",
        "methods/auth/bind_temp_auth_key.html",
        "methods/contacts/block.html",
        "methods/contacts/block_from_replies.html",
        "methods/auth/cancel_code.html",
        "methods/account/cancel_password_email.html",
        "methods/account/change_phone.html",
        "methods/stickers/change_sticker_position.html",
        "methods/messages/check_chat_invite.html",
        "methods/phone/check_group_call.html",
        "methods/messages/check_history_import.html",
        "methods/messages/check_history_import_peer.html",
        "methods/auth/check_password.html",
        "methods/stickers/check_short_name.html",
        "methods/account/check_username.html",
        "methods/channels/check_username.html",
        "methods/messages/clear_all_drafts.html",
        "methods/messages/clear_recent_stickers.html",
        "methods/payments/clear_saved_info.html",
        "methods/phone/confirm_call.html",
        "methods/account/confirm_password_email.html",
        "methods/account/confirm_phone.html",
        "methods/channels/convert_to_gigagroup.html",
        "methods/channels/create_channel.html",
        "methods/messages/create_chat.html",
        "methods/phone/create_group_call.html",
        "methods/stickers/create_sticker_set.html",
        "methods/account/create_theme.html",
        "methods/account/delete_account.html",
        "methods/contacts/delete_by_phones.html",
        "methods/channels/delete_channel.html",
        "methods/messages/delete_chat.html",
        "methods/messages/delete_chat_user.html",
        "methods/contacts/delete_contacts.html",
        "methods/messages/delete_exported_chat_invite.html",
        "methods/folders/delete_folder.html",
        "methods/messages/delete_history.html",
        "methods/channels/delete_history.html",
        "methods/messages/delete_messages.html",
        "methods/channels/delete_messages.html",
        "methods/messages/delete_phone_call_history.html",
        "methods/photos/delete_photos.html",
        "methods/messages/delete_revoked_exported_chat_invites.html",
        "methods/messages/delete_scheduled_messages.html",
        "methods/account/delete_secure_value.html",
        "methods/channels/delete_user_history.html",
        "methods/destroy_auth_key.html",
        "methods/destroy_session.html",
        "methods/phone/discard_call.html",
        "methods/messages/discard_encryption.html",
        "methods/phone/discard_group_call.html",
        "methods/help/dismiss_suggestion.html",
        "methods/auth/drop_temp_auth_keys.html",
        "methods/channels/edit_admin.html",
        "methods/channels/edit_banned.html",
        "methods/messages/edit_chat_about.html",
        "methods/messages/edit_chat_admin.html",
        "methods/messages/edit_chat_default_banned_rights.html",
        "methods/messages/edit_chat_photo.html",
        "methods/messages/edit_chat_title.html",
        "methods/channels/edit_creator.html",
        "methods/messages/edit_exported_chat_invite.html",
        "methods/phone/edit_group_call_participant.html",
        "methods/phone/edit_group_call_title.html",
        "methods/messages/edit_inline_bot_message.html",
        "methods/channels/edit_location.html",
        "methods/messages/edit_message.html",
        "methods/folders/edit_peer_folders.html",
        "methods/channels/edit_photo.html",
        "methods/channels/edit_title.html",
        "methods/help/edit_user_info.html",
        "methods/auth/export_authorization.html",
        "methods/messages/export_chat_invite.html",
        "methods/phone/export_group_call_invite.html",
        "methods/auth/export_login_token.html",
        "methods/channels/export_message_link.html",
        "methods/messages/fave_sticker.html",
        "methods/account/finish_takeout_session.html",
        "methods/messages/forward_messages.html",
        "methods/account/get_account_ttl.html",
        "methods/channels/get_admin_log.html",
        "methods/channels/get_admined_public_channels.html",
        "methods/messages/get_admins_with_invites.html",
        "methods/messages/get_all_chats.html",
        "methods/messages/get_all_drafts.html",
        "methods/account/get_all_secure_values.html",
        "methods/messages/get_all_stickers.html",
        "methods/help/get_app_changelog.html",
        "methods/help/get_app_config.html",
        "methods/help/get_app_update.html",
        "methods/messages/get_archived_stickers.html",
        "methods/messages/get_attached_stickers.html",
        "methods/account/get_authorization_form.html",
        "methods/account/get_authorizations.html",
        "methods/account/get_auto_download_settings.html",
        "methods/payments/get_bank_card_data.html",
        "methods/contacts/get_blocked.html",
        "methods/messages/get_bot_callback_answer.html",
        "methods/bots/get_bot_commands.html",
        "methods/stats/get_broadcast_stats.html",
        "methods/phone/get_call_config.html",
        "methods/help/get_cdn_config.html",
        "methods/upload/get_cdn_file.html",
        "methods/upload/get_cdn_file_hashes.html",
        "methods/updates/get_channel_difference.html",
        "methods/channels/get_channels.html",
        "methods/messages/get_chat_invite_importers.html",
        "methods/messages/get_chats.html",
        "methods/messages/get_common_chats.html",
        "methods/help/get_config.html",
        "methods/contacts/get_contact_i_ds.html",
        "methods/account/get_contact_sign_up_notification.html",
        "methods/contacts/get_contacts.html",
        "methods/account/get_content_settings.html",
        "methods/help/get_countries_list.html",
        "methods/help/get_deep_link_info.html",
        "methods/messages/get_dh_config.html",
        "methods/messages/get_dialog_filters.html",
        "methods/messages/get_dialog_unread_marks.html",
        "methods/messages/get_dialogs.html",
        "methods/updates/get_difference.html",
        "methods/langpack/get_difference.html",
        "methods/messages/get_discussion_message.html",
        "methods/messages/get_document_by_hash.html",
        "methods/messages/get_emoji_keywords.html",
        "methods/messages/get_emoji_keywords_difference.html",
        "methods/messages/get_emoji_keywords_languages.html",
        "methods/messages/get_emoji_url.html",
        "methods/messages/get_exported_chat_invite.html",
        "methods/messages/get_exported_chat_invites.html",
        "methods/messages/get_faved_stickers.html",
        "methods/messages/get_featured_stickers.html",
        "methods/upload/get_file.html",
        "methods/upload/get_file_hashes.html",
        "methods/channels/get_full_channel.html",
        "methods/messages/get_full_chat.html",
        "methods/users/get_full_user.html",
        "methods/messages/get_game_high_scores.html",
        "methods/account/get_global_privacy_settings.html",
        "methods/phone/get_group_call.html",
        "methods/phone/get_group_call_join_as.html",
        "methods/phone/get_group_participants.html",
        "methods/channels/get_groups_for_discussion.html",
        "methods/messages/get_history.html",
        "methods/channels/get_inactive_channels.html",
        "methods/messages/get_inline_bot_results.html",
        "methods/messages/get_inline_game_high_scores.html",
        "methods/help/get_invite_text.html",
        "methods/langpack/get_lang_pack.html",
        "methods/langpack/get_language.html",
        "methods/langpack/get_languages.html",
        "methods/channels/get_left_channels.html",
        "methods/contacts/get_located.html",
        "methods/messages/get_mask_stickers.html",
        "methods/stats/get_megagroup_stats.html",
        "methods/messages/get_message_edit_data.html",
        "methods/stats/get_message_public_forwards.html",
        "methods/stats/get_message_stats.html",
        "methods/messages/get_messages.html",
        "methods/channels/get_messages.html",
        "methods/messages/get_messages_views.html",
        "methods/account/get_multi_wall_papers.html",
        "methods/help/get_nearest_dc.html",
        "methods/account/get_notify_exceptions.html",
        "methods/account/get_notify_settings.html",
        "methods/messages/get_old_featured_stickers.html",
        "methods/messages/get_onlines.html",
        "methods/channels/get_participant.html",
        "methods/channels/get_participants.html",
        "methods/help/get_passport_config.html",
        "methods/account/get_password.html",
        "methods/account/get_password_settings.html",
        "methods/payments/get_payment_form.html",
        "methods/payments/get_payment_receipt.html",
        "methods/messages/get_peer_dialogs.html",
        "methods/messages/get_peer_settings.html",
        "methods/messages/get_pinned_dialogs.html",
        "methods/messages/get_poll_results.html",
        "methods/messages/get_poll_votes.html",
        "methods/account/get_privacy.html",
        "methods/help/get_promo_data.html",
        "methods/messages/get_recent_locations.html",
        "methods/help/get_recent_me_urls.html",
        "methods/messages/get_recent_stickers.html",
        "methods/messages/get_replies.html",
        "methods/contacts/get_saved.html",
        "methods/messages/get_saved_gifs.html",
        "methods/payments/get_saved_info.html",
        "methods/messages/get_scheduled_history.html",
        "methods/messages/get_scheduled_messages.html",
        "methods/messages/get_search_counters.html",
        "methods/account/get_secure_value.html",
        "methods/messages/get_split_ranges.html",
        "methods/updates/get_state.html",
        "methods/messages/get_stats_url.html",
        "methods/contacts/get_statuses.html",
        "methods/messages/get_sticker_set.html",
        "methods/messages/get_stickers.html",
        "methods/langpack/get_strings.html",
        "methods/messages/get_suggested_dialog_filters.html",
        "methods/help/get_support.html",
        "methods/help/get_support_name.html",
        "methods/help/get_terms_of_service_update.html",
        "methods/account/get_theme.html",
        "methods/account/get_themes.html",
        "methods/account/get_tmp_password.html",
        "methods/contacts/get_top_peers.html",
        "methods/messages/get_unread_mentions.html",
        "methods/help/get_user_info.html",
        "methods/photos/get_user_photos.html",
        "methods/users/get_users.html",
        "methods/account/get_wall_paper.html",
        "methods/account/get_wall_papers.html",
        "methods/account/get_web_authorizations.html",
        "methods/upload/get_web_file.html",
        "methods/messages/get_web_page.html",
        "methods/messages/get_web_page_preview.html",
        "methods/get_future_salts.html",
        "methods/messages/hide_peer_settings_bar.html",
        "methods/help/hide_promo_data.html",
        "methods/auth/import_authorization.html",
        "methods/auth/import_bot_authorization.html",
        "methods/messages/import_chat_invite.html",
        "methods/contacts/import_contacts.html",
        "methods/auth/import_login_token.html",
        "methods/init_connection.html",
        "methods/messages/init_history_import.html",
        "methods/account/init_takeout_session.html",
        "methods/messages/install_sticker_set.html",
        "methods/account/install_theme.html",
        "methods/account/install_wall_paper.html",
        "methods/channels/invite_to_channel.html",
        "methods/phone/invite_to_group_call.html",
        "methods/invoke_after_msg.html",
        "methods/invoke_after_msgs.html",
        "methods/invoke_with_layer.html",
        "methods/invoke_with_messages_range.html",
        "methods/invoke_with_takeout.html",
        "methods/invoke_without_updates.html",
        "methods/channels/join_channel.html",
        "methods/phone/join_group_call.html",
        "methods/phone/join_group_call_presentation.html",
        "methods/channels/leave_channel.html",
        "methods/phone/leave_group_call.html",
        "methods/phone/leave_group_call_presentation.html",
        "methods/stats/load_async_graph.html",
        "methods/auth/log_out.html",
        "methods/messages/mark_dialog_unread.html",
        "methods/messages/migrate_chat.html",
        "methods/ping.html",
        "methods/ping_delay_disconnect.html",
        "methods/messages/read_discussion.html",
        "methods/messages/read_encrypted_history.html",
        "methods/messages/read_featured_stickers.html",
        "methods/messages/read_history.html",
        "methods/channels/read_history.html",
        "methods/messages/read_mentions.html",
        "methods/messages/read_message_contents.html",
        "methods/channels/read_message_contents.html",
        "methods/phone/received_call.html",
        "methods/messages/received_messages.html",
        "methods/messages/received_queue.html",
        "methods/auth/recover_password.html",
        "methods/account/register_device.html",
        "methods/stickers/remove_sticker_from_set.html",
        "methods/messages/reorder_pinned_dialogs.html",
        "methods/messages/reorder_sticker_sets.html",
        "methods/messages/report.html",
        "methods/messages/report_encrypted_spam.html",
        "methods/account/report_peer.html",
        "methods/account/report_profile_photo.html",
        "methods/messages/report_spam.html",
        "methods/channels/report_spam.html",
        "methods/req_dh_params.html",
        "methods/req_pq.html",
        "methods/req_pq_multi.html",
        "methods/phone/request_call.html",
        "methods/messages/request_encryption.html",
        "methods/auth/request_password_recovery.html",
        "methods/messages/request_url_auth.html",
        "methods/auth/resend_code.html",
        "methods/account/resend_password_email.html",
        "methods/account/reset_authorization.html",
        "methods/auth/reset_authorizations.html",
        "methods/bots/reset_bot_commands.html",
        "methods/account/reset_notify_settings.html",
        "methods/contacts/reset_saved.html",
        "methods/contacts/reset_top_peer_rating.html",
        "methods/account/reset_wall_papers.html",
        "methods/account/reset_web_authorization.html",
        "methods/account/reset_web_authorizations.html",
        "methods/contacts/resolve_username.html",
        "methods/upload/reupload_cdn_file.html",
        "methods/rpc_drop_answer.html",
        "methods/help/save_app_log.html",
        "methods/account/save_auto_download_settings.html",
        "methods/upload/save_big_file_part.html",
        "methods/phone/save_call_debug.html",
        "methods/phone/save_default_group_call_join_as.html",
        "methods/messages/save_draft.html",
        "methods/upload/save_file_part.html",
        "methods/messages/save_gif.html",
        "methods/messages/save_recent_sticker.html",
        "methods/account/save_secure_value.html",
        "methods/account/save_theme.html",
        "methods/account/save_wall_paper.html",
        "methods/contacts/search.html",
        "methods/messages/search.html",
        "methods/messages/search_global.html",
        "methods/messages/search_sticker_sets.html",
        "methods/account/send_change_phone_code.html",
        "methods/auth/send_code.html",
        "methods/account/send_confirm_phone_code.html",
        "methods/bots/send_custom_request.html",
        "methods/messages/send_encrypted.html",
        "methods/messages/send_encrypted_file.html",
        "methods/messages/send_encrypted_service.html",
        "methods/messages/send_inline_bot_result.html",
        "methods/messages/send_media.html",
        "methods/messages/send_message.html",
        "methods/messages/send_multi_media.html",
        "methods/payments/send_payment_form.html",
        "methods/messages/send_scheduled_messages.html",
        "methods/messages/send_screenshot_notification.html",
        "methods/phone/send_signaling_data.html",
        "methods/account/send_verify_email_code.html",
        "methods/account/send_verify_phone_code.html",
        "methods/messages/send_vote.html",
        "methods/account/set_account_ttl.html",
        "methods/messages/set_bot_callback_answer.html",
        "methods/bots/set_bot_commands.html",
        "methods/messages/set_bot_precheckout_results.html",
        "methods/messages/set_bot_shipping_results.html",
        "methods/help/set_bot_updates_status.html",
        "methods/phone/set_call_rating.html",
        "methods/account/set_contact_sign_up_notification.html",
        "methods/account/set_content_settings.html",
        "methods/channels/set_discussion_group.html",
        "methods/messages/set_encrypted_typing.html",
        "methods/messages/set_game_score.html",
        "methods/account/set_global_privacy_settings.html",
        "methods/messages/set_history_ttl.html",
        "methods/messages/set_inline_bot_results.html",
        "methods/messages/set_inline_game_score.html",
        "methods/account/set_privacy.html",
        "methods/users/set_secure_value_errors.html",
        "methods/stickers/set_sticker_set_thumb.html",
        "methods/channels/set_stickers.html",
        "methods/messages/set_typing.html",
        "methods/set_client_dh_params.html",
        "methods/auth/sign_in.html",
        "methods/auth/sign_up.html",
        "methods/messages/start_bot.html",
        "methods/messages/start_history_import.html",
        "methods/phone/start_scheduled_group_call.html",
        "methods/stickers/suggest_short_name.html",
        "methods/messages/toggle_dialog_pin.html",
        "methods/phone/toggle_group_call_record.html",
        "methods/phone/toggle_group_call_settings.html",
        "methods/phone/toggle_group_call_start_subscription.html",
        "methods/channels/toggle_pre_history_hidden.html",
        "methods/channels/toggle_signatures.html",
        "methods/channels/toggle_slow_mode.html",
        "methods/messages/toggle_sticker_sets.html",
        "methods/contacts/toggle_top_peers.html",
        "methods/contacts/unblock.html",
        "methods/messages/uninstall_sticker_set.html",
        "methods/messages/unpin_all_messages.html",
        "methods/account/unregister_device.html",
        "methods/account/update_device_locked.html",
        "methods/messages/update_dialog_filter.html",
        "methods/messages/update_dialog_filters_order.html",
        "methods/account/update_notify_settings.html",
        "methods/account/update_password_settings.html",
        "methods/messages/update_pinned_message.html",
        "methods/account/update_profile.html",
        "methods/photos/update_profile_photo.html",
        "methods/account/update_status.html",
        "methods/account/update_theme.html",
        "methods/account/update_username.html",
        "methods/channels/update_username.html",
        "methods/messages/upload_encrypted_file.html",
        "methods/messages/upload_imported_media.html",
        "methods/messages/upload_media.html",
        "methods/photos/upload_profile_photo.html",
        "methods/account/upload_theme.html",
        "methods/account/upload_wall_paper.html",
        "methods/payments/validate_requested_info.html",
        "methods/account/verify_email.html",
        "methods/account/verify_phone.html"
    ],
    "types_urls":
    [
        "types/access_point_rule.html",
        "types/account_days_ttl.html",
        "types/authorization.html",
        "types/auto_download_settings.html",
        "types/bad_msg_notification.html",
        "types/bank_card_open_url.html",
        "types/base_theme.html",
        "types/bind_auth_key_inner.html",
        "types/bot_command.html",
        "types/bot_command_scope.html",
        "types/bot_info.html",
        "types/bot_inline_message.html",
        "types/bot_inline_result.html",
        "types/cdn_config.html",
        "types/cdn_public_key.html",
        "types/channel_admin_log_event.html",
        "types/channel_admin_log_event_action.html",
        "types/channel_admin_log_events_filter.html",
        "types/channel_location.html",
        "types/channel_messages_filter.html",
        "types/channel_participant.html",
        "types/channel_participants_filter.html",
        "types/chat.html",
        "types/chat_admin_rights.html",
        "types/chat_admin_with_invites.html",
        "types/chat_banned_rights.html",
        "types/chat_full.html",
        "types/chat_invite.html",
        "types/chat_invite_importer.html",
        "types/chat_onlines.html",
        "types/chat_participant.html",
        "types/chat_participants.html",
        "types/chat_photo.html",
        "types/client_dh__inner__data.html",
        "types/code_settings.html",
        "types/config.html",
        "types/contact.html",
        "types/contact_status.html",
        "types/data_json.html",
        "types/dc_option.html",
        "types/destroy_auth_key_res.html",
        "types/destroy_session_res.html",
        "types/dialog.html",
        "types/dialog_filter.html",
        "types/dialog_filter_suggested.html",
        "types/dialog_peer.html",
        "types/document.html",
        "types/document_attribute.html",
        "types/draft_message.html",
        "types/emoji_keyword.html",
        "types/emoji_keywords_difference.html",
        "types/emoji_language.html",
        "types/emoji_url.html",
        "types/encrypted_chat.html",
        "types/encrypted_file.html",
        "types/encrypted_message.html",
        "types/exported_chat_invite.html",
        "types/exported_message_link.html",
        "types/file_hash.html",
        "types/folder.html",
        "types/folder_peer.html",
        "types/future_salt.html",
        "types/future_salts.html",
        "types/game.html",
        "types/geo_point.html",
        "types/global_privacy_settings.html",
        "types/group_call.html",
        "types/group_call_participant.html",
        "types/group_call_participant_video.html",
        "types/group_call_participant_video_source_group.html",
        "types/high_score.html",
        "types/http_wait.html",
        "types/imported_contact.html",
        "types/inline_bot_switch_pm.html",
        "types/inline_query_peer_type.html",
        "types/input_app_event.html",
        "types/input_bot_inline_message.html",
        "types/input_bot_inline_message_id.html",
        "types/input_bot_inline_result.html",
        "types/input_channel.html",
        "types/input_chat_photo.html",
        "types/input_check_password_srp.html",
        "types/input_client_proxy.html",
        "types/input_contact.html",
        "types/input_dialog_peer.html",
        "types/input_document.html",
        "types/input_encrypted_chat.html",
        "types/input_encrypted_file.html",
        "types/input_file.html",
        "types/input_file_location.html",
        "types/input_folder_peer.html",
        "types/input_game.html",
        "types/input_geo_point.html",
        "types/input_group_call.html",
        "types/input_media.html",
        "types/input_message.html",
        "types/input_notify_peer.html",
        "types/input_payment_credentials.html",
        "types/input_peer.html",
        "types/input_peer_notify_settings.html",
        "types/input_phone_call.html",
        "types/input_photo.html",
        "types/input_privacy_key.html",
        "types/input_privacy_rule.html",
        "types/input_secure_file.html",
        "types/input_secure_value.html",
        "types/input_single_media.html",
        "types/input_sticker_set.html",
        "types/input_sticker_set_item.html",
        "types/input_stickered_media.html",
        "types/input_theme.html",
        "types/input_theme_settings.html",
        "types/input_user.html",
        "types/input_wall_paper.html",
        "types/input_web_document.html",
        "types/input_web_file_location.html",
        "types/invoice.html",
        "types/ip_port.html",
        "types/json_object_value.html",
        "types/json_value.html",
        "types/keyboard_button.html",
        "types/keyboard_button_row.html",
        "types/labeled_price.html",
        "types/lang_pack_difference.html",
        "types/lang_pack_language.html",
        "types/lang_pack_string.html",
        "types/mask_coords.html",
        "types/message.html",
        "types/message_action.html",
        "types/message_entity.html",
        "types/message_fwd_header.html",
        "types/message_interaction_counters.html",
        "types/message_media.html",
        "types/message_range.html",
        "types/message_replies.html",
        "types/message_reply_header.html",
        "types/message_user_vote.html",
        "types/message_views.html",
        "types/messages_filter.html",
        "types/msg_detailed_info.html",
        "types/msg_resend_req.html",
        "types/msgs_ack.html",
        "types/msgs_all_info.html",
        "types/msgs_state_info.html",
        "types/msgs_state_req.html",
        "types/nearest_dc.html",
        "types/new_session.html",
        "types/notify_peer.html",
        "types/p_q_inner_data.html",
        "types/page.html",
        "types/page_block.html",
        "types/page_caption.html",
        "types/page_list_item.html",
        "types/page_list_ordered_item.html",
        "types/page_related_article.html",
        "types/page_table_cell.html",
        "types/page_table_row.html",
        "types/password_kdf_algo.html",
        "types/payment_charge.html",
        "types/payment_requested_info.html",
        "types/payment_saved_credentials.html",
        "types/peer.html",
        "types/peer_blocked.html",
        "types/peer_located.html",
        "types/peer_notify_settings.html",
        "types/peer_settings.html",
        "types/phone_call.html",
        "types/phone_call_discard_reason.html",
        "types/phone_call_protocol.html",
        "types/phone_connection.html",
        "types/photo.html",
        "types/photo_size.html",
        "types/poll.html",
        "types/poll_answer.html",
        "types/poll_answer_voters.html",
        "types/poll_results.html",
        "types/pong.html",
        "types/popular_contact.html",
        "types/post_address.html",
        "types/privacy_key.html",
        "types/privacy_rule.html",
        "types/received_notify_message.html",
        "types/recent_me_url.html",
        "types/reply_markup.html",
        "types/report_reason.html",
        "types/res_pq.html",
        "types/restriction_reason.html",
        "types/rich_text.html",
        "types/rpc_drop_answer.html",
        "types/rpc_error.html",
        "types/saved_contact.html",
        "types/secure_credentials_encrypted.html",
        "types/secure_data.html",
        "types/secure_file.html",
        "types/secure_password_kdf_algo.html",
        "types/secure_plain_data.html",
        "types/secure_required_type.html",
        "types/secure_secret_settings.html",
        "types/secure_value.html",
        "types/secure_value_error.html",
        "types/secure_value_hash.html",
        "types/secure_value_type.html",
        "types/send_message_action.html",
        "types/server_dh__params.html",
        "types/server_dh_inner_data.html",
        "types/set_client_dh_params_answer.html",
        "types/shipping_option.html",
        "types/stats_abs_value_and_prev.html",
        "types/stats_date_range_days.html",
        "types/stats_graph.html",
        "types/stats_group_top_admin.html",
        "types/stats_group_top_inviter.html",
        "types/stats_group_top_poster.html",
        "types/stats_percent_value.html",
        "types/stats_url.html",
        "types/sticker_pack.html",
        "types/sticker_set.html",
        "types/sticker_set_covered.html",
        "types/theme.html",
        "types/theme_settings.html",
        "types/tls_block.html",
        "types/tls_client_hello.html",
        "types/top_peer.html",
        "types/top_peer_category.html",
        "types/top_peer_category_peers.html",
        "types/update.html",
        "types/updates.html",
        "types/url_auth_result.html",
        "types/user.html",
        "types/user_full.html",
        "types/user_profile_photo.html",
        "types/user_status.html",
        "types/video_size.html",
        "types/wall_paper.html",
        "types/wall_paper_settings.html",
        "types/web_authorization.html",
        "types/web_document.html",
        "types/web_page.html",
        "types/web_page_attribute.html",
        "types/x.html",
        "types/account/authorization_form.html",
        "types/account/authorizations.html",
        "types/account/auto_download_settings.html",
        "types/account/content_settings.html",
        "types/account/password.html",
        "types/account/password_input_settings.html",
        "types/account/password_settings.html",
        "types/account/privacy_rules.html",
        "types/account/sent_email_code.html",
        "types/account/takeout.html",
        "types/account/themes.html",
        "types/account/tmp_password.html",
        "types/account/wall_papers.html",
        "types/account/web_authorizations.html",
        "types/auth/authorization.html",
        "types/auth/code_type.html",
        "types/auth/exported_authorization.html",
        "types/auth/login_token.html",
        "types/auth/password_recovery.html",
        "types/auth/sent_code.html",
        "types/auth/sent_code_type.html",
        "types/channels/admin_log_results.html",
        "types/channels/channel_participant.html",
        "types/channels/channel_participants.html",
        "types/contacts/blocked.html",
        "types/contacts/contacts.html",
        "types/contacts/found.html",
        "types/contacts/imported_contacts.html",
        "types/contacts/resolved_peer.html",
        "types/contacts/top_peers.html",
        "types/help/app_update.html",
        "types/help/config_simple.html",
        "types/help/countries_list.html",
        "types/help/country.html",
        "types/help/country_code.html",
        "types/help/deep_link_info.html",
        "types/help/invite_text.html",
        "types/help/passport_config.html",
        "types/help/promo_data.html",
        "types/help/recent_me_urls.html",
        "types/help/support.html",
        "types/help/support_name.html",
        "types/help/terms_of_service.html",
        "types/help/terms_of_service_update.html",
        "types/help/user_info.html",
        "index.html#int",
        "index.html#long",
        "types/messages/affected_found_messages.html",
        "types/messages/affected_history.html",
        "types/messages/affected_messages.html",
        "types/messages/all_stickers.html",
        "types/messages/archived_stickers.html",
        "types/messages/bot_callback_answer.html",
        "types/messages/bot_results.html",
        "types/messages/chat_admins_with_invites.html",
        "types/messages/chat_full.html",
        "types/messages/chat_invite_importers.html",
        "types/messages/chats.html",
        "types/messages/checked_history_import_peer.html",
        "types/messages/dh_config.html",
        "types/messages/dialogs.html",
        "types/messages/discussion_message.html",
        "types/messages/exported_chat_invite.html",
        "types/messages/exported_chat_invites.html",
        "types/messages/faved_stickers.html",
        "types/messages/featured_stickers.html",
        "types/messages/found_sticker_sets.html",
        "types/messages/high_scores.html",
        "types/messages/history_import.html",
        "types/messages/history_import_parsed.html",
        "types/messages/inactive_chats.html",
        "types/messages/message_edit_data.html",
        "types/messages/message_views.html",
        "types/messages/messages.html",
        "types/messages/peer_dialogs.html",
        "types/messages/recent_stickers.html",
        "types/messages/saved_gifs.html",
        "types/messages/search_counter.html",
        "types/messages/sent_encrypted_message.html",
        "types/messages/sticker_set.html",
        "types/messages/sticker_set_install_result.html",
        "types/messages/stickers.html",
        "types/messages/votes_list.html",
        "types/payments/bank_card_data.html",
        "types/payments/payment_form.html",
        "types/payments/payment_receipt.html",
        "types/payments/payment_result.html",
        "types/payments/saved_info.html",
        "types/payments/validated_requested_info.html",
        "types/phone/exported_group_call_invite.html",
        "types/phone/group_call.html",
        "types/phone/group_participants.html",
        "types/phone/join_as_peers.html",
        "types/phone/phone_call.html",
        "types/photos/photo.html",
        "types/photos/photos.html",
        "types/stats/broadcast_stats.html",
        "types/stats/megagroup_stats.html",
        "types/stats/message_stats.html",
        "types/stickers/suggested_short_name.html",
        "types/storage/file_type.html",
        "types/updates/channel_difference.html",
        "types/updates/difference.html",
        "types/updates/state.html",
        "types/upload/cdn_file.html",
        "types/upload/file.html",
        "types/upload/web_file.html"
    ],
    "constructors_urls":
    [
        "constructors/access_point_rule.html",
        "constructors/account_days_ttl.html",
        "constructors/channels/admin_log_results.html",
        "constructors/messages/affected_found_messages.html",
        "constructors/messages/affected_history.html",
        "constructors/messages/affected_messages.html",
        "constructors/messages/all_stickers.html",
        "constructors/messages/all_stickers_not_modified.html",
        "constructors/help/app_update.html",
        "constructors/messages/archived_stickers.html",
        "constructors/auth/authorization.html",
        "constructors/authorization.html",
        "constructors/account/authorization_form.html",
        "constructors/auth/authorization_sign_up_required.html",
        "constructors/account/authorizations.html",
        "constructors/auto_download_settings.html",
        "constructors/account/auto_download_settings.html",
        "constructors/bad_msg_notification.html",
        "constructors/bad_server_salt.html",
        "constructors/payments/bank_card_data.html",
        "constructors/bank_card_open_url.html",
        "constructors/base_theme_arctic.html",
        "constructors/base_theme_classic.html",
        "constructors/base_theme_day.html",
        "constructors/base_theme_night.html",
        "constructors/base_theme_tinted.html",
        "constructors/bind_auth_key_inner.html",
        "constructors/contacts/blocked.html",
        "constructors/contacts/blocked_slice.html",
        "constructors/messages/bot_callback_answer.html",
        "constructors/bot_command.html",
        "constructors/bot_command_scope_chat_admins.html",
        "constructors/bot_command_scope_chats.html",
        "constructors/bot_command_scope_default.html",
        "constructors/bot_command_scope_peer.html",
        "constructors/bot_command_scope_peer_admins.html",
        "constructors/bot_command_scope_peer_user.html",
        "constructors/bot_command_scope_users.html",
        "constructors/bot_info.html",
        "constructors/bot_inline_media_result.html",
        "constructors/bot_inline_message_media_auto.html",
        "constructors/bot_inline_message_media_contact.html",
        "constructors/bot_inline_message_media_geo.html",
        "constructors/bot_inline_message_media_invoice.html",
        "constructors/bot_inline_message_media_venue.html",
        "constructors/bot_inline_message_text.html",
        "constructors/bot_inline_result.html",
        "constructors/messages/bot_results.html",
        "constructors/stats/broadcast_stats.html",
        "constructors/cdn_config.html",
        "constructors/upload/cdn_file.html",
        "constructors/upload/cdn_file_reupload_needed.html",
        "constructors/cdn_public_key.html",
        "constructors/channel.html",
        "constructors/channel_admin_log_event.html",
        "constructors/channel_admin_log_event_action_change_about.html",
        "constructors/channel_admin_log_event_action_change_history_ttl.html",
        "constructors/channel_admin_log_event_action_change_linked_chat.html",
        "constructors/channel_admin_log_event_action_change_location.html",
        "constructors/channel_admin_log_event_action_change_photo.html",
        "constructors/channel_admin_log_event_action_change_sticker_set.html",
        "constructors/channel_admin_log_event_action_change_title.html",
        "constructors/channel_admin_log_event_action_change_username.html",
        "constructors/channel_admin_log_event_action_default_banned_rights.html",
        "constructors/channel_admin_log_event_action_delete_message.html",
        "constructors/channel_admin_log_event_action_discard_group_call.html",
        "constructors/channel_admin_log_event_action_edit_message.html",
        "constructors/channel_admin_log_event_action_exported_invite_delete.html",
        "constructors/channel_admin_log_event_action_exported_invite_edit.html",
        "constructors/channel_admin_log_event_action_exported_invite_revoke.html",
        "constructors/channel_admin_log_event_action_participant_invite.html",
        "constructors/channel_admin_log_event_action_participant_join.html",
        "constructors/channel_admin_log_event_action_participant_join_by_invite.html",
        "constructors/channel_admin_log_event_action_participant_leave.html",
        "constructors/channel_admin_log_event_action_participant_mute.html",
        "constructors/channel_admin_log_event_action_participant_toggle_admin.html",
        "constructors/channel_admin_log_event_action_participant_toggle_ban.html",
        "constructors/channel_admin_log_event_action_participant_unmute.html",
        "constructors/channel_admin_log_event_action_participant_volume.html",
        "constructors/channel_admin_log_event_action_start_group_call.html",
        "constructors/channel_admin_log_event_action_stop_poll.html",
        "constructors/channel_admin_log_event_action_toggle_group_call_setting.html",
        "constructors/channel_admin_log_event_action_toggle_invites.html",
        "constructors/channel_admin_log_event_action_toggle_pre_history_hidden.html",
        "constructors/channel_admin_log_event_action_toggle_signatures.html",
        "constructors/channel_admin_log_event_action_toggle_slow_mode.html",
        "constructors/channel_admin_log_event_action_update_pinned.html",
        "constructors/channel_admin_log_events_filter.html",
        "constructors/updates/channel_difference.html",
        "constructors/updates/channel_difference_empty.html",
        "constructors/updates/channel_difference_too_long.html",
        "constructors/channel_forbidden.html",
        "constructors/channel_full.html",
        "constructors/channel_location.html",
        "constructors/channel_location_empty.html",
        "constructors/messages/channel_messages.html",
        "constructors/channel_messages_filter.html",
        "constructors/channel_messages_filter_empty.html",
        "constructors/channel_participant.html",
        "constructors/channels/channel_participant.html",
        "constructors/channel_participant_admin.html",
        "constructors/channel_participant_banned.html",
        "constructors/channel_participant_creator.html",
        "constructors/channel_participant_left.html",
        "constructors/channel_participant_self.html",
        "constructors/channels/channel_participants.html",
        "constructors/channel_participants_admins.html",
        "constructors/channel_participants_banned.html",
        "constructors/channel_participants_bots.html",
        "constructors/channel_participants_contacts.html",
        "constructors/channel_participants_kicked.html",
        "constructors/channel_participants_mentions.html",
        "constructors/channels/channel_participants_not_modified.html",
        "constructors/channel_participants_recent.html",
        "constructors/channel_participants_search.html",
        "constructors/chat.html",
        "constructors/chat_admin_rights.html",
        "constructors/chat_admin_with_invites.html",
        "constructors/messages/chat_admins_with_invites.html",
        "constructors/chat_banned_rights.html",
        "constructors/chat_empty.html",
        "constructors/chat_forbidden.html",
        "constructors/chat_full.html",
        "constructors/messages/chat_full.html",
        "constructors/chat_invite.html",
        "constructors/chat_invite_already.html",
        "constructors/chat_invite_exported.html",
        "constructors/chat_invite_importer.html",
        "constructors/messages/chat_invite_importers.html",
        "constructors/chat_invite_peek.html",
        "constructors/chat_onlines.html",
        "constructors/chat_participant.html",
        "constructors/chat_participant_admin.html",
        "constructors/chat_participant_creator.html",
        "constructors/chat_participants.html",
        "constructors/chat_participants_forbidden.html",
        "constructors/chat_photo.html",
        "constructors/chat_photo_empty.html",
        "constructors/messages/chats.html",
        "constructors/messages/chats_slice.html",
        "constructors/messages/checked_history_import_peer.html",
        "constructors/client_dh_inner_data.html",
        "constructors/code_settings.html",
        "constructors/auth/code_type_call.html",
        "constructors/auth/code_type_flash_call.html",
        "constructors/auth/code_type_sms.html",
        "constructors/config.html",
        "constructors/help/config_simple.html",
        "constructors/contact.html",
        "constructors/contact_status.html",
        "constructors/contacts/contacts.html",
        "constructors/contacts/contacts_not_modified.html",
        "constructors/account/content_settings.html",
        "constructors/help/countries_list.html",
        "constructors/help/countries_list_not_modified.html",
        "constructors/help/country.html",
        "constructors/help/country_code.html",
        "constructors/data_json.html",
        "constructors/dc_option.html",
        "constructors/help/deep_link_info.html",
        "constructors/help/deep_link_info_empty.html",
        "constructors/destroy_auth_key_fail.html",
        "constructors/destroy_auth_key_none.html",
        "constructors/destroy_auth_key_ok.html",
        "constructors/destroy_session_none.html",
        "constructors/destroy_session_ok.html",
        "constructors/messages/dh_config.html",
        "constructors/messages/dh_config_not_modified.html",
        "constructors/dh_gen_fail.html",
        "constructors/dh_gen_ok.html",
        "constructors/dh_gen_retry.html",
        "constructors/dialog.html",
        "constructors/dialog_filter.html",
        "constructors/dialog_filter_suggested.html",
        "constructors/dialog_folder.html",
        "constructors/dialog_peer.html",
        "constructors/dialog_peer_folder.html",
        "constructors/messages/dialogs.html",
        "constructors/messages/dialogs_not_modified.html",
        "constructors/messages/dialogs_slice.html",
        "constructors/updates/difference.html",
        "constructors/updates/difference_empty.html",
        "constructors/updates/difference_slice.html",
        "constructors/updates/difference_too_long.html",
        "constructors/messages/discussion_message.html",
        "constructors/document.html",
        "constructors/document_attribute_animated.html",
        "constructors/document_attribute_audio.html",
        "constructors/document_attribute_filename.html",
        "constructors/document_attribute_has_stickers.html",
        "constructors/document_attribute_image_size.html",
        "constructors/document_attribute_sticker.html",
        "constructors/document_attribute_video.html",
        "constructors/document_empty.html",
        "constructors/draft_message.html",
        "constructors/draft_message_empty.html",
        "constructors/emoji_keyword.html",
        "constructors/emoji_keyword_deleted.html",
        "constructors/emoji_keywords_difference.html",
        "constructors/emoji_language.html",
        "constructors/emoji_url.html",
        "constructors/encrypted_chat.html",
        "constructors/encrypted_chat_discarded.html",
        "constructors/encrypted_chat_empty.html",
        "constructors/encrypted_chat_requested.html",
        "constructors/encrypted_chat_waiting.html",
        "constructors/encrypted_file.html",
        "constructors/encrypted_file_empty.html",
        "constructors/encrypted_message.html",
        "constructors/encrypted_message_service.html",
        "constructors/auth/exported_authorization.html",
        "constructors/messages/exported_chat_invite.html",
        "constructors/messages/exported_chat_invite_replaced.html",
        "constructors/messages/exported_chat_invites.html",
        "constructors/phone/exported_group_call_invite.html",
        "constructors/exported_message_link.html",
        "constructors/messages/faved_stickers.html",
        "constructors/messages/faved_stickers_not_modified.html",
        "constructors/messages/featured_stickers.html",
        "constructors/messages/featured_stickers_not_modified.html",
        "constructors/upload/file.html",
        "constructors/upload/file_cdn_redirect.html",
        "constructors/storage/file_gif.html",
        "constructors/file_hash.html",
        "constructors/storage/file_jpeg.html",
        "constructors/storage/file_mov.html",
        "constructors/storage/file_mp3.html",
        "constructors/storage/file_mp4.html",
        "constructors/storage/file_partial.html",
        "constructors/storage/file_pdf.html",
        "constructors/storage/file_png.html",
        "constructors/storage/file_unknown.html",
        "constructors/storage/file_webp.html",
        "constructors/folder.html",
        "constructors/folder_peer.html",
        "constructors/contacts/found.html",
        "constructors/messages/found_sticker_sets.html",
        "constructors/messages/found_sticker_sets_not_modified.html",
        "constructors/future_salt.html",
        "constructors/future_salts.html",
        "constructors/game.html",
        "constructors/geo_point.html",
        "constructors/geo_point_empty.html",
        "constructors/global_privacy_settings.html",
        "constructors/group_call.html",
        "constructors/phone/group_call.html",
        "constructors/group_call_discarded.html",
        "constructors/group_call_participant.html",
        "constructors/group_call_participant_video.html",
        "constructors/group_call_participant_video_source_group.html",
        "constructors/phone/group_participants.html",
        "constructors/high_score.html",
        "constructors/messages/high_scores.html",
        "constructors/messages/history_import.html",
        "constructors/messages/history_import_parsed.html",
        "constructors/http_wait.html",
        "constructors/imported_contact.html",
        "constructors/contacts/imported_contacts.html",
        "constructors/messages/inactive_chats.html",
        "constructors/inline_bot_switch_pm.html",
        "constructors/inline_query_peer_type_broadcast.html",
        "constructors/inline_query_peer_type_chat.html",
        "constructors/inline_query_peer_type_megagroup.html",
        "constructors/inline_query_peer_type_pm.html",
        "constructors/inline_query_peer_type_same_bot_pm.html",
        "constructors/input_app_event.html",
        "constructors/input_bot_inline_message_game.html",
        "constructors/input_bot_inline_message_id.html",
        "constructors/input_bot_inline_message_media_auto.html",
        "constructors/input_bot_inline_message_media_contact.html",
        "constructors/input_bot_inline_message_media_geo.html",
        "constructors/input_bot_inline_message_media_invoice.html",
        "constructors/input_bot_inline_message_media_venue.html",
        "constructors/input_bot_inline_message_text.html",
        "constructors/input_bot_inline_result.html",
        "constructors/input_bot_inline_result_document.html",
        "constructors/input_bot_inline_result_game.html",
        "constructors/input_bot_inline_result_photo.html",
        "constructors/input_channel.html",
        "constructors/input_channel_empty.html",
        "constructors/input_channel_from_message.html",
        "constructors/input_chat_photo.html",
        "constructors/input_chat_photo_empty.html",
        "constructors/input_chat_uploaded_photo.html",
        "constructors/input_check_password_empty.html",
        "constructors/input_check_password_srp.html",
        "constructors/input_client_proxy.html",
        "constructors/input_dialog_peer.html",
        "constructors/input_dialog_peer_folder.html",
        "constructors/input_document.html",
        "constructors/input_document_empty.html",
        "constructors/input_document_file_location.html",
        "constructors/input_encrypted_chat.html",
        "constructors/input_encrypted_file.html",
        "constructors/input_encrypted_file_big_uploaded.html",
        "constructors/input_encrypted_file_empty.html",
        "constructors/input_encrypted_file_location.html",
        "constructors/input_encrypted_file_uploaded.html",
        "constructors/input_file.html",
        "constructors/input_file_big.html",
        "constructors/input_file_location.html",
        "constructors/input_folder_peer.html",
        "constructors/input_game_id.html",
        "constructors/input_game_short_name.html",
        "constructors/input_geo_point.html",
        "constructors/input_geo_point_empty.html",
        "constructors/input_group_call.html",
        "constructors/input_group_call_stream.html",
        "constructors/input_keyboard_button_url_auth.html",
        "constructors/input_media_contact.html",
        "constructors/input_media_dice.html",
        "constructors/input_media_document.html",
        "constructors/input_media_document_external.html",
        "constructors/input_media_empty.html",
        "constructors/input_media_game.html",
        "constructors/input_media_geo_live.html",
        "constructors/input_media_geo_point.html",
        "constructors/input_media_invoice.html",
        "constructors/input_media_photo.html",
        "constructors/input_media_photo_external.html",
        "constructors/input_media_poll.html",
        "constructors/input_media_uploaded_document.html",
        "constructors/input_media_uploaded_photo.html",
        "constructors/input_media_venue.html",
        "constructors/input_message_callback_query.html",
        "constructors/input_message_entity_mention_name.html",
        "constructors/input_message_id.html",
        "constructors/input_message_pinned.html",
        "constructors/input_message_reply_to.html",
        "constructors/input_messages_filter_chat_photos.html",
        "constructors/input_messages_filter_contacts.html",
        "constructors/input_messages_filter_document.html",
        "constructors/input_messages_filter_empty.html",
        "constructors/input_messages_filter_geo.html",
        "constructors/input_messages_filter_gif.html",
        "constructors/input_messages_filter_music.html",
        "constructors/input_messages_filter_my_mentions.html",
        "constructors/input_messages_filter_phone_calls.html",
        "constructors/input_messages_filter_photo_video.html",
        "constructors/input_messages_filter_photos.html",
        "constructors/input_messages_filter_pinned.html",
        "constructors/input_messages_filter_round_video.html",
        "constructors/input_messages_filter_round_voice.html",
        "constructors/input_messages_filter_url.html",
        "constructors/input_messages_filter_video.html",
        "constructors/input_messages_filter_voice.html",
        "constructors/input_notify_broadcasts.html",
        "constructors/input_notify_chats.html",
        "constructors/input_notify_peer.html",
        "constructors/input_notify_users.html",
        "constructors/input_payment_credentials.html",
        "constructors/input_payment_credentials_apple_pay.html",
        "constructors/input_payment_credentials_google_pay.html",
        "constructors/input_payment_credentials_saved.html",
        "constructors/input_peer_channel.html",
        "constructors/input_peer_channel_from_message.html",
        "constructors/input_peer_chat.html",
        "constructors/input_peer_empty.html",
        "constructors/input_peer_notify_settings.html",
        "constructors/input_peer_photo_file_location.html",
        "constructors/input_peer_self.html",
        "constructors/input_peer_user.html",
        "constructors/input_peer_user_from_message.html",
        "constructors/input_phone_call.html",
        "constructors/input_phone_contact.html",
        "constructors/input_photo.html",
        "constructors/input_photo_empty.html",
        "constructors/input_photo_file_location.html",
        "constructors/input_photo_legacy_file_location.html",
        "constructors/input_privacy_key_added_by_phone.html",
        "constructors/input_privacy_key_chat_invite.html",
        "constructors/input_privacy_key_forwards.html",
        "constructors/input_privacy_key_phone_call.html",
        "constructors/input_privacy_key_phone_number.html",
        "constructors/input_privacy_key_phone_p2_p.html",
        "constructors/input_privacy_key_profile_photo.html",
        "constructors/input_privacy_key_status_timestamp.html",
        "constructors/input_privacy_value_allow_all.html",
        "constructors/input_privacy_value_allow_chat_participants.html",
        "constructors/input_privacy_value_allow_contacts.html",
        "constructors/input_privacy_value_allow_users.html",
        "constructors/input_privacy_value_disallow_all.html",
        "constructors/input_privacy_value_disallow_chat_participants.html",
        "constructors/input_privacy_value_disallow_contacts.html",
        "constructors/input_privacy_value_disallow_users.html",
        "constructors/input_report_reason_child_abuse.html",
        "constructors/input_report_reason_copyright.html",
        "constructors/input_report_reason_fake.html",
        "constructors/input_report_reason_geo_irrelevant.html",
        "constructors/input_report_reason_other.html",
        "constructors/input_report_reason_pornography.html",
        "constructors/input_report_reason_spam.html",
        "constructors/input_report_reason_violence.html",
        "constructors/input_secure_file.html",
        "constructors/input_secure_file_location.html",
        "constructors/input_secure_file_uploaded.html",
        "constructors/input_secure_value.html",
        "constructors/input_single_media.html",
        "constructors/input_sticker_set_animated_emoji.html",
        "constructors/input_sticker_set_dice.html",
        "constructors/input_sticker_set_empty.html",
        "constructors/input_sticker_set_id.html",
        "constructors/input_sticker_set_item.html",
        "constructors/input_sticker_set_short_name.html",
        "constructors/input_sticker_set_thumb.html",
        "constructors/input_stickered_media_document.html",
        "constructors/input_stickered_media_photo.html",
        "constructors/input_takeout_file_location.html",
        "constructors/input_theme.html",
        "constructors/input_theme_settings.html",
        "constructors/input_theme_slug.html",
        "constructors/input_user.html",
        "constructors/input_user_empty.html",
        "constructors/input_user_from_message.html",
        "constructors/input_user_self.html",
        "constructors/input_wall_paper.html",
        "constructors/input_wall_paper_no_file.html",
        "constructors/input_wall_paper_slug.html",
        "constructors/input_web_document.html",
        "constructors/input_web_file_geo_point_location.html",
        "constructors/input_web_file_location.html",
        "constructors/help/invite_text.html",
        "constructors/invoice.html",
        "constructors/ip_port.html",
        "constructors/ip_port_secret.html",
        "constructors/phone/join_as_peers.html",
        "constructors/json_array.html",
        "constructors/json_bool.html",
        "constructors/json_null.html",
        "constructors/json_number.html",
        "constructors/json_object.html",
        "constructors/json_object_value.html",
        "constructors/json_string.html",
        "constructors/keyboard_button.html",
        "constructors/keyboard_button_buy.html",
        "constructors/keyboard_button_callback.html",
        "constructors/keyboard_button_game.html",
        "constructors/keyboard_button_request_geo_location.html",
        "constructors/keyboard_button_request_phone.html",
        "constructors/keyboard_button_request_poll.html",
        "constructors/keyboard_button_row.html",
        "constructors/keyboard_button_switch_inline.html",
        "constructors/keyboard_button_url.html",
        "constructors/keyboard_button_url_auth.html",
        "constructors/labeled_price.html",
        "constructors/lang_pack_difference.html",
        "constructors/lang_pack_language.html",
        "constructors/lang_pack_string.html",
        "constructors/lang_pack_string_deleted.html",
        "constructors/lang_pack_string_pluralized.html",
        "constructors/auth/login_token.html",
        "constructors/auth/login_token_migrate_to.html",
        "constructors/auth/login_token_success.html",
        "constructors/mask_coords.html",
        "constructors/stats/megagroup_stats.html",
        "constructors/message.html",
        "constructors/message_action_bot_allowed.html",
        "constructors/message_action_channel_create.html",
        "constructors/message_action_channel_migrate_from.html",
        "constructors/message_action_chat_add_user.html",
        "constructors/message_action_chat_create.html",
        "constructors/message_action_chat_delete_photo.html",
        "constructors/message_action_chat_delete_user.html",
        "constructors/message_action_chat_edit_photo.html",
        "constructors/message_action_chat_edit_title.html",
        "constructors/message_action_chat_joined_by_link.html",
        "constructors/message_action_chat_migrate_to.html",
        "constructors/message_action_contact_sign_up.html",
        "constructors/message_action_custom_action.html",
        "constructors/message_action_empty.html",
        "constructors/message_action_game_score.html",
        "constructors/message_action_geo_proximity_reached.html",
        "constructors/message_action_group_call.html",
        "constructors/message_action_group_call_scheduled.html",
        "constructors/message_action_history_clear.html",
        "constructors/message_action_invite_to_group_call.html",
        "constructors/message_action_payment_sent.html",
        "constructors/message_action_payment_sent_me.html",
        "constructors/message_action_phone_call.html",
        "constructors/message_action_pin_message.html",
        "constructors/message_action_screenshot_taken.html",
        "constructors/message_action_secure_values_sent.html",
        "constructors/message_action_secure_values_sent_me.html",
        "constructors/message_action_set_messages_ttl.html",
        "constructors/messages/message_edit_data.html",
        "constructors/message_empty.html",
        "constructors/message_entity_bank_card.html",
        "constructors/message_entity_blockquote.html",
        "constructors/message_entity_bold.html",
        "constructors/message_entity_bot_command.html",
        "constructors/message_entity_cashtag.html",
        "constructors/message_entity_code.html",
        "constructors/message_entity_email.html",
        "constructors/message_entity_hashtag.html",
        "constructors/message_entity_italic.html",
        "constructors/message_entity_mention.html",
        "constructors/message_entity_mention_name.html",
        "constructors/message_entity_phone.html",
        "constructors/message_entity_pre.html",
        "constructors/message_entity_strike.html",
        "constructors/message_entity_text_url.html",
        "constructors/message_entity_underline.html",
        "constructors/message_entity_unknown.html",
        "constructors/message_entity_url.html",
        "constructors/message_fwd_header.html",
        "constructors/message_interaction_counters.html",
        "constructors/message_media_contact.html",
        "constructors/message_media_dice.html",
        "constructors/message_media_document.html",
        "constructors/message_media_empty.html",
        "constructors/message_media_game.html",
        "constructors/message_media_geo.html",
        "constructors/message_media_geo_live.html",
        "constructors/message_media_invoice.html",
        "constructors/message_media_photo.html",
        "constructors/message_media_poll.html",
        "constructors/message_media_unsupported.html",
        "constructors/message_media_venue.html",
        "constructors/message_media_web_page.html",
        "constructors/message_range.html",
        "constructors/message_replies.html",
        "constructors/message_reply_header.html",
        "constructors/message_service.html",
        "constructors/stats/message_stats.html",
        "constructors/message_user_vote.html",
        "constructors/message_user_vote_input_option.html",
        "constructors/message_user_vote_multiple.html",
        "constructors/message_views.html",
        "constructors/messages/message_views.html",
        "constructors/messages/messages.html",
        "constructors/messages/messages_not_modified.html",
        "constructors/messages/messages_slice.html",
        "constructors/msg_detailed_info.html",
        "constructors/msg_new_detailed_info.html",
        "constructors/msg_resend_req.html",
        "constructors/msgs_ack.html",
        "constructors/msgs_all_info.html",
        "constructors/msgs_state_info.html",
        "constructors/msgs_state_req.html",
        "constructors/nearest_dc.html",
        "constructors/new_session_created.html",
        "constructors/help/no_app_update.html",
        "constructors/notify_broadcasts.html",
        "constructors/notify_chats.html",
        "constructors/notify_peer.html",
        "constructors/notify_users.html",
        "constructors/p_q_inner_data.html",
        "constructors/p_q_inner_data_dc.html",
        "constructors/p_q_inner_data_temp.html",
        "constructors/p_q_inner_data_temp_dc.html",
        "constructors/page.html",
        "constructors/page_block_anchor.html",
        "constructors/page_block_audio.html",
        "constructors/page_block_author_date.html",
        "constructors/page_block_blockquote.html",
        "constructors/page_block_channel.html",
        "constructors/page_block_collage.html",
        "constructors/page_block_cover.html",
        "constructors/page_block_details.html",
        "constructors/page_block_divider.html",
        "constructors/page_block_embed.html",
        "constructors/page_block_embed_post.html",
        "constructors/page_block_footer.html",
        "constructors/page_block_header.html",
        "constructors/page_block_kicker.html",
        "constructors/page_block_list.html",
        "constructors/page_block_map.html",
        "constructors/page_block_ordered_list.html",
        "constructors/page_block_paragraph.html",
        "constructors/page_block_photo.html",
        "constructors/page_block_preformatted.html",
        "constructors/page_block_pullquote.html",
        "constructors/page_block_related_articles.html",
        "constructors/page_block_slideshow.html",
        "constructors/page_block_subheader.html",
        "constructors/page_block_subtitle.html",
        "constructors/page_block_table.html",
        "constructors/page_block_title.html",
        "constructors/page_block_unsupported.html",
        "constructors/page_block_video.html",
        "constructors/page_caption.html",
        "constructors/page_list_item_blocks.html",
        "constructors/page_list_item_text.html",
        "constructors/page_list_ordered_item_blocks.html",
        "constructors/page_list_ordered_item_text.html",
        "constructors/page_related_article.html",
        "constructors/page_table_cell.html",
        "constructors/page_table_row.html",
        "constructors/help/passport_config.html",
        "constructors/help/passport_config_not_modified.html",
        "constructors/account/password.html",
        "constructors/account/password_input_settings.html",
        "constructors/password_kdf_algo_sha256_sha256_pbkdf2_hmacsha512iter100000_sha256_mod_pow.html",
        "constructors/password_kdf_algo_unknown.html",
        "constructors/auth/password_recovery.html",
        "constructors/account/password_settings.html",
        "constructors/payment_charge.html",
        "constructors/payments/payment_form.html",
        "constructors/payments/payment_receipt.html",
        "constructors/payment_requested_info.html",
        "constructors/payments/payment_result.html",
        "constructors/payment_saved_credentials_card.html",
        "constructors/payments/payment_verification_needed.html",
        "constructors/peer_blocked.html",
        "constructors/peer_channel.html",
        "constructors/peer_chat.html",
        "constructors/messages/peer_dialogs.html",
        "constructors/peer_located.html",
        "constructors/peer_notify_settings.html",
        "constructors/peer_self_located.html",
        "constructors/peer_settings.html",
        "constructors/peer_user.html",
        "constructors/phone_call.html",
        "constructors/phone/phone_call.html",
        "constructors/phone_call_accepted.html",
        "constructors/phone_call_discard_reason_busy.html",
        "constructors/phone_call_discard_reason_disconnect.html",
        "constructors/phone_call_discard_reason_hangup.html",
        "constructors/phone_call_discard_reason_missed.html",
        "constructors/phone_call_discarded.html",
        "constructors/phone_call_empty.html",
        "constructors/phone_call_protocol.html",
        "constructors/phone_call_requested.html",
        "constructors/phone_call_waiting.html",
        "constructors/phone_connection.html",
        "constructors/phone_connection_webrtc.html",
        "constructors/photo.html",
        "constructors/photos/photo.html",
        "constructors/photo_cached_size.html",
        "constructors/photo_empty.html",
        "constructors/photo_path_size.html",
        "constructors/photo_size.html",
        "constructors/photo_size_empty.html",
        "constructors/photo_size_progressive.html",
        "constructors/photo_stripped_size.html",
        "constructors/photos/photos.html",
        "constructors/photos/photos_slice.html",
        "constructors/poll.html",
        "constructors/poll_answer.html",
        "constructors/poll_answer_voters.html",
        "constructors/poll_results.html",
        "constructors/pong.html",
        "constructors/popular_contact.html",
        "constructors/post_address.html",
        "constructors/privacy_key_added_by_phone.html",
        "constructors/privacy_key_chat_invite.html",
        "constructors/privacy_key_forwards.html",
        "constructors/privacy_key_phone_call.html",
        "constructors/privacy_key_phone_number.html",
        "constructors/privacy_key_phone_p2_p.html",
        "constructors/privacy_key_profile_photo.html",
        "constructors/privacy_key_status_timestamp.html",
        "constructors/account/privacy_rules.html",
        "constructors/privacy_value_allow_all.html",
        "constructors/privacy_value_allow_chat_participants.html",
        "constructors/privacy_value_allow_contacts.html",
        "constructors/privacy_value_allow_users.html",
        "constructors/privacy_value_disallow_all.html",
        "constructors/privacy_value_disallow_chat_participants.html",
        "constructors/privacy_value_disallow_contacts.html",
        "constructors/privacy_value_disallow_users.html",
        "constructors/help/promo_data.html",
        "constructors/help/promo_data_empty.html",
        "constructors/received_notify_message.html",
        "constructors/recent_me_url_chat.html",
        "constructors/recent_me_url_chat_invite.html",
        "constructors/recent_me_url_sticker_set.html",
        "constructors/recent_me_url_unknown.html",
        "constructors/recent_me_url_user.html",
        "constructors/help/recent_me_urls.html",
        "constructors/messages/recent_stickers.html",
        "constructors/messages/recent_stickers_not_modified.html",
        "constructors/reply_inline_markup.html",
        "constructors/reply_keyboard_force_reply.html",
        "constructors/reply_keyboard_hide.html",
        "constructors/reply_keyboard_markup.html",
        "constructors/res_pq.html",
        "constructors/contacts/resolved_peer.html",
        "constructors/restriction_reason.html",
        "constructors/rpc_answer_dropped.html",
        "constructors/rpc_answer_dropped_running.html",
        "constructors/rpc_answer_unknown.html",
        "constructors/rpc_error.html",
        "constructors/messages/saved_gifs.html",
        "constructors/messages/saved_gifs_not_modified.html",
        "constructors/payments/saved_info.html",
        "constructors/saved_phone_contact.html",
        "constructors/messages/search_counter.html",
        "constructors/secure_credentials_encrypted.html",
        "constructors/secure_data.html",
        "constructors/secure_file.html",
        "constructors/secure_file_empty.html",
        "constructors/secure_password_kdf_algo_pbkdf2_hmacsha512iter100000.html",
        "constructors/secure_password_kdf_algo_sha512.html",
        "constructors/secure_password_kdf_algo_unknown.html",
        "constructors/secure_plain_email.html",
        "constructors/secure_plain_phone.html",
        "constructors/secure_required_type.html",
        "constructors/secure_required_type_one_of.html",
        "constructors/secure_secret_settings.html",
        "constructors/secure_value.html",
        "constructors/secure_value_error.html",
        "constructors/secure_value_error_data.html",
        "constructors/secure_value_error_file.html",
        "constructors/secure_value_error_files.html",
        "constructors/secure_value_error_front_side.html",
        "constructors/secure_value_error_reverse_side.html",
        "constructors/secure_value_error_selfie.html",
        "constructors/secure_value_error_translation_file.html",
        "constructors/secure_value_error_translation_files.html",
        "constructors/secure_value_hash.html",
        "constructors/secure_value_type_address.html",
        "constructors/secure_value_type_bank_statement.html",
        "constructors/secure_value_type_driver_license.html",
        "constructors/secure_value_type_email.html",
        "constructors/secure_value_type_identity_card.html",
        "constructors/secure_value_type_internal_passport.html",
        "constructors/secure_value_type_passport.html",
        "constructors/secure_value_type_passport_registration.html",
        "constructors/secure_value_type_personal_details.html",
        "constructors/secure_value_type_phone.html",
        "constructors/secure_value_type_rental_agreement.html",
        "constructors/secure_value_type_temporary_registration.html",
        "constructors/secure_value_type_utility_bill.html",
        "constructors/send_message_cancel_action.html",
        "constructors/send_message_choose_contact_action.html",
        "constructors/send_message_game_play_action.html",
        "constructors/send_message_geo_location_action.html",
        "constructors/send_message_history_import_action.html",
        "constructors/send_message_record_audio_action.html",
        "constructors/send_message_record_round_action.html",
        "constructors/send_message_record_video_action.html",
        "constructors/send_message_typing_action.html",
        "constructors/send_message_upload_audio_action.html",
        "constructors/send_message_upload_document_action.html",
        "constructors/send_message_upload_photo_action.html",
        "constructors/send_message_upload_round_action.html",
        "constructors/send_message_upload_video_action.html",
        "constructors/auth/sent_code.html",
        "constructors/auth/sent_code_type_app.html",
        "constructors/auth/sent_code_type_call.html",
        "constructors/auth/sent_code_type_flash_call.html",
        "constructors/auth/sent_code_type_sms.html",
        "constructors/account/sent_email_code.html",
        "constructors/messages/sent_encrypted_file.html",
        "constructors/messages/sent_encrypted_message.html",
        "constructors/server_dh_inner_data.html",
        "constructors/server_dh_params_fail.html",
        "constructors/server_dh_params_ok.html",
        "constructors/shipping_option.html",
        "constructors/speaking_in_group_call_action.html",
        "constructors/updates/state.html",
        "constructors/stats_abs_value_and_prev.html",
        "constructors/stats_date_range_days.html",
        "constructors/stats_graph.html",
        "constructors/stats_graph_async.html",
        "constructors/stats_graph_error.html",
        "constructors/stats_group_top_admin.html",
        "constructors/stats_group_top_inviter.html",
        "constructors/stats_group_top_poster.html",
        "constructors/stats_percent_value.html",
        "constructors/stats_url.html",
        "constructors/sticker_pack.html",
        "constructors/sticker_set.html",
        "constructors/messages/sticker_set.html",
        "constructors/sticker_set_covered.html",
        "constructors/messages/sticker_set_install_result_archive.html",
        "constructors/messages/sticker_set_install_result_success.html",
        "constructors/sticker_set_multi_covered.html",
        "constructors/messages/stickers.html",
        "constructors/messages/stickers_not_modified.html",
        "constructors/stickers/suggested_short_name.html",
        "constructors/help/support.html",
        "constructors/help/support_name.html",
        "constructors/account/takeout.html",
        "constructors/help/terms_of_service.html",
        "constructors/help/terms_of_service_update.html",
        "constructors/help/terms_of_service_update_empty.html",
        "constructors/text_anchor.html",
        "constructors/text_bold.html",
        "constructors/text_concat.html",
        "constructors/text_email.html",
        "constructors/text_empty.html",
        "constructors/text_fixed.html",
        "constructors/text_image.html",
        "constructors/text_italic.html",
        "constructors/text_marked.html",
        "constructors/text_phone.html",
        "constructors/text_plain.html",
        "constructors/text_strike.html",
        "constructors/text_subscript.html",
        "constructors/text_superscript.html",
        "constructors/text_underline.html",
        "constructors/text_url.html",
        "constructors/theme.html",
        "constructors/theme_settings.html",
        "constructors/account/themes.html",
        "constructors/account/themes_not_modified.html",
        "constructors/tls_block_domain.html",
        "constructors/tls_block_grease.html",
        "constructors/tls_block_public_key.html",
        "constructors/tls_block_random.html",
        "constructors/tls_block_scope.html",
        "constructors/tls_block_string.html",
        "constructors/tls_block_zero.html",
        "constructors/tls_client_hello.html",
        "constructors/account/tmp_password.html",
        "constructors/top_peer.html",
        "constructors/top_peer_category_bots_inline.html",
        "constructors/top_peer_category_bots_pm.html",
        "constructors/top_peer_category_channels.html",
        "constructors/top_peer_category_correspondents.html",
        "constructors/top_peer_category_forward_chats.html",
        "constructors/top_peer_category_forward_users.html",
        "constructors/top_peer_category_groups.html",
        "constructors/top_peer_category_peers.html",
        "constructors/top_peer_category_phone_calls.html",
        "constructors/contacts/top_peers.html",
        "constructors/contacts/top_peers_disabled.html",
        "constructors/contacts/top_peers_not_modified.html",
        "constructors/update_bot_callback_query.html",
        "constructors/update_bot_inline_query.html",
        "constructors/update_bot_inline_send.html",
        "constructors/update_bot_precheckout_query.html",
        "constructors/update_bot_shipping_query.html",
        "constructors/update_bot_stopped.html",
        "constructors/update_bot_webhook_json.html",
        "constructors/update_bot_webhook_json_query.html",
        "constructors/update_channel.html",
        "constructors/update_channel_available_messages.html",
        "constructors/update_channel_message_forwards.html",
        "constructors/update_channel_message_views.html",
        "constructors/update_channel_participant.html",
        "constructors/update_channel_read_messages_contents.html",
        "constructors/update_channel_too_long.html",
        "constructors/update_channel_user_typing.html",
        "constructors/update_channel_web_page.html",
        "constructors/update_chat.html",
        "constructors/update_chat_default_banned_rights.html",
        "constructors/update_chat_participant.html",
        "constructors/update_chat_participant_add.html",
        "constructors/update_chat_participant_admin.html",
        "constructors/update_chat_participant_delete.html",
        "constructors/update_chat_participants.html",
        "constructors/update_chat_user_typing.html",
        "constructors/update_config.html",
        "constructors/update_contacts_reset.html",
        "constructors/update_dc_options.html",
        "constructors/update_delete_channel_messages.html",
        "constructors/update_delete_messages.html",
        "constructors/update_delete_scheduled_messages.html",
        "constructors/update_dialog_filter.html",
        "constructors/update_dialog_filter_order.html",
        "constructors/update_dialog_filters.html",
        "constructors/update_dialog_pinned.html",
        "constructors/update_dialog_unread_mark.html",
        "constructors/update_draft_message.html",
        "constructors/update_edit_channel_message.html",
        "constructors/update_edit_message.html",
        "constructors/update_encrypted_chat_typing.html",
        "constructors/update_encrypted_messages_read.html",
        "constructors/update_encryption.html",
        "constructors/update_faved_stickers.html",
        "constructors/update_folder_peers.html",
        "constructors/update_geo_live_viewed.html",
        "constructors/update_group_call.html",
        "constructors/update_group_call_connection.html",
        "constructors/update_group_call_participants.html",
        "constructors/update_inline_bot_callback_query.html",
        "constructors/update_lang_pack.html",
        "constructors/update_lang_pack_too_long.html",
        "constructors/update_login_token.html",
        "constructors/update_message_id.html",
        "constructors/update_message_poll.html",
        "constructors/update_message_poll_vote.html",
        "constructors/update_new_channel_message.html",
        "constructors/update_new_encrypted_message.html",
        "constructors/update_new_message.html",
        "constructors/update_new_scheduled_message.html",
        "constructors/update_new_sticker_set.html",
        "constructors/update_notify_settings.html",
        "constructors/update_peer_blocked.html",
        "constructors/update_peer_history_ttl.html",
        "constructors/update_peer_located.html",
        "constructors/update_peer_settings.html",
        "constructors/update_phone_call.html",
        "constructors/update_phone_call_signaling_data.html",
        "constructors/update_pinned_channel_messages.html",
        "constructors/update_pinned_dialogs.html",
        "constructors/update_pinned_messages.html",
        "constructors/update_privacy.html",
        "constructors/update_pts_changed.html",
        "constructors/update_read_channel_discussion_inbox.html",
        "constructors/update_read_channel_discussion_outbox.html",
        "constructors/update_read_channel_inbox.html",
        "constructors/update_read_channel_outbox.html",
        "constructors/update_read_featured_stickers.html",
        "constructors/update_read_history_inbox.html",
        "constructors/update_read_history_outbox.html",
        "constructors/update_read_messages_contents.html",
        "constructors/update_recent_stickers.html",
        "constructors/update_saved_gifs.html",
        "constructors/update_service_notification.html",
        "constructors/update_short.html",
        "constructors/update_short_chat_message.html",
        "constructors/update_short_message.html",
        "constructors/update_short_sent_message.html",
        "constructors/update_sticker_sets.html",
        "constructors/update_sticker_sets_order.html",
        "constructors/update_theme.html",
        "constructors/update_user_name.html",
        "constructors/update_user_phone.html",
        "constructors/update_user_photo.html",
        "constructors/update_user_status.html",
        "constructors/update_user_typing.html",
        "constructors/update_web_page.html",
        "constructors/updates.html",
        "constructors/updates_combined.html",
        "constructors/updates_too_long.html",
        "constructors/url_auth_result_accepted.html",
        "constructors/url_auth_result_default.html",
        "constructors/url_auth_result_request.html",
        "constructors/user.html",
        "constructors/user_empty.html",
        "constructors/user_full.html",
        "constructors/help/user_info.html",
        "constructors/help/user_info_empty.html",
        "constructors/user_profile_photo.html",
        "constructors/user_profile_photo_empty.html",
        "constructors/user_status_empty.html",
        "constructors/user_status_last_month.html",
        "constructors/user_status_last_week.html",
        "constructors/user_status_offline.html",
        "constructors/user_status_online.html",
        "constructors/user_status_recently.html",
        "constructors/payments/validated_requested_info.html",
        "constructors/video_size.html",
        "constructors/messages/votes_list.html",
        "constructors/wall_paper.html",
        "constructors/wall_paper_no_file.html",
        "constructors/wall_paper_settings.html",
        "constructors/account/wall_papers.html",
        "constructors/account/wall_papers_not_modified.html",
        "constructors/web_authorization.html",
        "constructors/account/web_authorizations.html",
        "constructors/web_document.html",
        "constructors/web_document_no_proxy.html",
        "constructors/upload/web_file.html",
        "constructors/web_page.html",
        "constructors/web_page_attribute_theme.html",
        "constructors/web_page_empty.html",
        "constructors/web_page_not_modified.html",
        "constructors/web_page_pending.html"
    ],
    "requests_desc":
    [
        [
            "Sends a Telegram Passport authorization form, effectively sharing data with the service",
            "<strong>bot_id</strong> | <a href=\"/type/long\">long</a> | Bot ID\n<strong>scope</strong> | <a href=\"/type/string\">string</a> | Telegram Passport element types requested by the service\n<strong>public_key</strong> | <a href=\"/type/string\">string</a> | Service's public key\n<strong>value_hashes</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/SecureValueHash\">SecureValueHash</a>&gt; | Types of values sent and their hashes\n<strong>credentials</strong> | <a href=\"/type/SecureCredentialsEncrypted\">SecureCredentialsEncrypted</a> | Encrypted values"
        ],
        [
            "Accept incoming call",
            "<strong>peer</strong> | <a href=\"/type/InputPhoneCall\">InputPhoneCall</a> | The call to accept\n<strong>g_b</strong> | <a href=\"/type/bytes\">bytes</a> | <a href=\"/api/end-to-end/voice-calls\">Parameter for E2E encryption key exchange »</a>\n<strong>protocol</strong> | <a href=\"/type/PhoneCallProtocol\">PhoneCallProtocol</a> | Phone call settings"
        ],
        [
            "If the <a href=\"/constructor/peerSettings\">peer settings</a> of a new user allow us to add them as contact, add that user as contact",
            "<strong>id</strong> | <a href=\"/type/InputUser\">InputUser</a> | The user to add as contact"
        ],
        [
            "Confirms creation of a secret chat",
            "<strong>peer</strong> | <a href=\"/type/InputEncryptedChat\">InputEncryptedChat</a> | Secret chat ID\n<strong>g_b</strong> | <a href=\"/type/bytes\">bytes</a> | <code>B = g ^ b mod p</code>, see <a href=\"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\">Wikipedia</a>\n<strong>key_fingerprint</strong> | <a href=\"/type/long\">long</a> | 64-bit fingerprint of the received key"
        ],
        [
            "Accept QR code login token, logging in the app that generated it.",
            "<strong>token</strong> | <a href=\"/type/bytes\">bytes</a> | Login token embedded in QR code, for more info, see <a href=\"/api/qr-login\">login via QR code</a>."
        ],
        [
            "Accept the new terms of service",
            "<strong>id</strong> | <a href=\"/type/DataJSON\">DataJSON</a> | ID of terms of service"
        ],
        [
            "Use this to accept a Seamless Telegram Login authorization request, for more info <a href=\"/api/url-authorization\">click here »</a>",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>write_allowed</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Set this flag to allow the bot to send messages to you (if requested)\n<strong>peer</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/InputPeer\">InputPeer</a> | The location of the message\n<strong>msg_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/int\">int</a> | Message ID of the message with the login button\n<strong>button_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/int\">int</a> | ID of the login button\n<strong>url</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/string\">string</a> | URL used for <a href=\"/api/url-authorization#link-url-authorization\">link URL authorization, click here for more info »</a>"
        ],
        [
            "Adds a user to a chat and sends a service message on it.",
            "<strong>chat_id</strong> | <a href=\"/type/long\">long</a> | Chat ID\n<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | User ID to be added\n<strong>fwd_limit</strong> | <a href=\"/type/int\">int</a> | Number of last messages to be forwarded"
        ],
        [
            "Add an existing telegram user as contact.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>add_phone_privacy_exception</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Allow the other user to see our phone number?\n<strong>id</strong> | <a href=\"/type/InputUser\">InputUser</a> | Telegram ID of the other user\n<strong>first_name</strong> | <a href=\"/type/string\">string</a> | First name\n<strong>last_name</strong> | <a href=\"/type/string\">string</a> | Last name\n<strong>phone</strong> | <a href=\"/type/string\">string</a> | User's phone number"
        ],
        [
            "Add a sticker to a stickerset, bots only. The sticker set must have been created by the bot.",
            "<strong>stickerset</strong> | <a href=\"/type/InputStickerSet\">InputStickerSet</a> | The stickerset\n<strong>sticker</strong> | <a href=\"/type/InputStickerSetItem\">InputStickerSetItem</a> | The sticker"
        ],
        [
            "Answers a custom query; for bots only",
            "<strong>query_id</strong> | <a href=\"/type/long\">long</a> | Identifier of a custom query\n<strong>data</strong> | <a href=\"/type/DataJSON\">DataJSON</a> | JSON-serialized answer to the query"
        ],
        [
            "Binds a temporary authorization key <code>temp_auth_key_id</code> to the permanent authorization key <code>perm_auth_key_id</code>. Each permanent key may only be bound to one temporary key at a time, binding a new temporary key overwrites the previous one.",
            "<strong>perm_auth_key_id</strong> | <a href=\"/type/long\">long</a> | Permanent auth_key_id to bind to\n<strong>nonce</strong> | <a href=\"/type/long\">long</a> | Random long from <a href=\"#binding-message-contents\">Binding message contents</a>\n<strong>expires_at</strong> | <a href=\"/type/int\">int</a> | Unix timestamp to invalidate temporary key, see <a href=\"#binding-message-contents\">Binding message contents</a>\n<strong>encrypted_message</strong> | <a href=\"/type/bytes\">bytes</a> | See <a href=\"#generating-encrypted-message\">Generating encrypted_message</a>"
        ],
        [
            "Adds the user to the blacklist.",
            "<strong>id</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | User ID"
        ],
        [
            "Stop getting notifications about <a href=\"/api/threads\">thread replies</a> of a certain user in <code>@replies</code>",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>delete_message</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to delete the specified message as well\n<strong>delete_history</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Whether to delete all <code>@replies</code> messages from this user as well\n<strong>report_spam</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/constructor/true\">true</a> | Whether to also report this user for spam\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | ID of the message in the <a href=\"/api/threads#replies\">@replies</a> chat"
        ],
        [
            "Cancel the login verification code",
            "<strong>phone_number</strong> | <a href=\"/type/string\">string</a> | Phone number\n<strong>phone_code_hash</strong> | <a href=\"/type/string\">string</a> | Phone code hash from <a href=\"/method/auth.sendCode\">auth.sendCode</a>"
        ],
        [
            "Cancel the code that was sent to verify an email to use as <a href=\"/api/srp\">2FA recovery method</a>.",
            "No parameters"
        ],
        [
            "Change the phone number of the current account",
            "<strong>phone_number</strong> | <a href=\"/type/string\">string</a> | New phone number\n<strong>phone_code_hash</strong> | <a href=\"/type/string\">string</a> | Phone code hash received when calling <a href=\"/method/account.sendChangePhoneCode\">account.sendChangePhoneCode</a>\n<strong>phone_code</strong> | <a href=\"/type/string\">string</a> | Phone code received when calling <a href=\"/method/account.sendChangePhoneCode\">account.sendChangePhoneCode</a>"
        ],
        [
            "Changes the absolute position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot",
            "<strong>sticker</strong> | <a href=\"/type/InputDocument\">InputDocument</a> | The sticker\n<strong>position</strong> | <a href=\"/type/int\">int</a> | The new position of the sticker, zero-based"
        ],
        [
            "Check the validity of a chat invite link and get basic info about it",
            "<strong>hash</strong> | <a href=\"/type/string\">string</a> | Invite hash in <code>t.me/joinchat/hash</code> or <code>t.me/+hash</code>"
        ],
        [
            "Check whether the group call Server Forwarding Unit is currently receiving the streams with the specified WebRTC source IDs",
            "<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | Group call\n<strong>sources</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | Source IDs"
        ],
        [
            "Obtains information about a chat export file, generated by a foreign chat app, <a href=\"/api/import\">click here for more info about imported chats »</a>.",
            "<strong>import_head</strong> | <a href=\"/type/string\">string</a> | Beginning of the message file; up to 100 lines."
        ],
        [
            "Check whether chat history exported from another chat app can be <a href=\"/api/import\">imported into a specific Telegram chat, click here for more info »</a>.",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The chat where we want to <a href=\"/api/import\">import history »</a>."
        ],
        [
            "Try logging to an account protected by a <a href=\"/api/srp\">2FA password</a>.",
            "<strong>password</strong> | <a href=\"/type/InputCheckPasswordSRP\">InputCheckPasswordSRP</a> | The account's password (see <a href=\"/api/srp\">SRP</a>)"
        ],
        [
            "Check whether the given short name is available",
            "<strong>short_name</strong> | <a href=\"/type/string\">string</a> | Short name"
        ],
        [
            "Validates a username and checks availability.",
            "<strong>username</strong> | <a href=\"/type/string\">string</a> | username<br>Accepted characters: A-z (case-insensitive), 0-9 and underscores.<br>Length: 5-32 characters."
        ],
        [
            "Check if a username is free and can be assigned to a channel/supergroup",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | The <a href=\"/api/channel\">channel/supergroup</a> that will assigned the specified username\n<strong>username</strong> | <a href=\"/type/string\">string</a> | The username to check"
        ],
        [
            "Clear all <a href=\"/api/drafts\">drafts</a>.",
            "No parameters"
        ],
        [
            "Clear recent stickers",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>attached</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Set this flag to clear the list of stickers recently attached to photo or video files"
        ],
        [
            "Clear saved payment information",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>credentials</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Remove saved payment credentials\n<strong>info</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Clear the last order settings saved by the user"
        ],
        [
            "<a href=\"/api/end-to-end/voice-calls\">Complete phone call E2E encryption key exchange »</a>",
            "<strong>peer</strong> | <a href=\"/type/InputPhoneCall\">InputPhoneCall</a> | The phone call\n<strong>g_a</strong> | <a href=\"/type/bytes\">bytes</a> | <a href=\"/api/end-to-end/voice-calls\">Parameter for E2E encryption key exchange »</a>\n<strong>key_fingerprint</strong> | <a href=\"/type/long\">long</a> | Key fingerprint\n<strong>protocol</strong> | <a href=\"/type/PhoneCallProtocol\">PhoneCallProtocol</a> | Phone call settings"
        ],
        [
            "Verify an email to use as <a href=\"/api/srp\">2FA recovery method</a>.",
            "<strong>code</strong> | <a href=\"/type/string\">string</a> | The phone code that was received after <a href=\"/api/srp#email-verification\">setting a recovery email</a>"
        ],
        [
            "Confirm a phone number to cancel account deletion, for more info <a href=\"/api/account-deletion\">click here »</a>",
            "<strong>phone_code_hash</strong> | <a href=\"/type/string\">string</a> | Phone code hash, for more info <a href=\"/api/account-deletion\">click here »</a>\n<strong>phone_code</strong> | <a href=\"/type/string\">string</a> | SMS code, for more info <a href=\"/api/account-deletion\">click here »</a>"
        ],
        [
            "Convert a <a href=\"/api/channel\">supergroup</a> to a <a href=\"/api/channel\">gigagroup</a>, when requested by <a href=\"/api/config#channel-suggestions\">channel suggestions</a>.",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | The <a href=\"/api/channel\">supergroup</a> to convert"
        ],
        [
            "Create a <a href=\"/api/channel\">supergroup/channel</a>.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>broadcast</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to create a <a href=\"/api/channel\">channel</a>\n<strong>megagroup</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Whether to create a <a href=\"/api/channel\">supergroup</a>\n<strong>for_import</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/constructor/true\">true</a> | Whether the supergroup is being created to import messages from a foreign chat service using <a href=\"/method/messages.initHistoryImport\">messages.initHistoryImport</a>\n<strong>title</strong> | <a href=\"/type/string\">string</a> | Channel title\n<strong>about</strong> | <a href=\"/type/string\">string</a> | Channel description\n<strong>geo_point</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/InputGeoPoint\">InputGeoPoint</a> | Geogroup location\n<strong>address</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/string\">string</a> | Geogroup address"
        ],
        [
            "Creates a new chat.",
            "<strong>users</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputUser\">InputUser</a>&gt; | List of user IDs to be invited\n<strong>title</strong> | <a href=\"/type/string\">string</a> | Chat name"
        ],
        [
            "Create a group call or livestream",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>rtmp_stream</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/constructor/true\">true</a> | Whether RTMP stream support should be enabled: only the <a href=\"/api/channel\">group/supergroup/channel</a> owner can use this flag.\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Associate the group call or livestream to the provided <a href=\"/api/channel\">group/supergroup/channel</a>\n<strong>random_id</strong> | <a href=\"/type/int\">int</a> | Unique client message ID required to prevent creation of duplicate group calls\n<strong>title</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/string\">string</a> | Call title\n<strong>schedule_date</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/int\">int</a> | For scheduled group call or livestreams, the absolute date when the group call will start"
        ],
        [
            "Create a stickerset, bots only.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>masks</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether this is a mask stickerset\n<strong>animated</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Whether this is an animated stickerset\n<strong>videos</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.4?<a href=\"/constructor/true\">true</a> | Whether this is a video stickerset\n<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | Stickerset owner\n<strong>title</strong> | <a href=\"/type/string\">string</a> | Stickerset name, <code>1-64</code> chars\n<strong>short_name</strong> | <a href=\"/type/string\">string</a> | Sticker set name. Can contain only English letters, digits and underscores. Must end with <em>\"</em>by<em><bot username=\"\">\"</bot></em> (<em><bot_username></bot_username></em> is case insensitive); 1-64 characters\n<strong>thumb</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/InputDocument\">InputDocument</a> | Thumbnail\n<strong>stickers</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputStickerSetItem\">InputStickerSetItem</a>&gt; | Stickers\n<strong>software</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/string\">string</a> | Used when <a href=\"/import-stickers\">importing stickers using the sticker import SDKs</a>, specifies the name of the software that created the stickers"
        ],
        [
            "Create a theme",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>slug</strong> | <a href=\"/type/string\">string</a> | Unique theme ID\n<strong>title</strong> | <a href=\"/type/string\">string</a> | Theme name\n<strong>document</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/InputDocument\">InputDocument</a> | Theme file\n<strong>settings</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputThemeSettings\">InputThemeSettings</a>&gt; | Theme settings"
        ],
        [
            "Delete the user's account from the telegram servers. Can be used, for example, to delete the account of a user that provided the login code, but forgot the <a href=\"/api/srp\">2FA password and no recovery method is configured</a>.",
            "<strong>reason</strong> | <a href=\"/type/string\">string</a> | Why is the account being deleted, can be empty"
        ],
        [
            "Delete contacts by phone number",
            "<strong>phones</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/string\">string</a>&gt; | Phone numbers"
        ],
        [
            "Delete a <a href=\"/api/channel\">channel/supergroup</a>",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | <a href=\"/api/channel\">Channel/supergroup</a> to delete"
        ],
        [
            "Delete a <a href=\"/api/channel\">chat</a>",
            "<strong>chat_id</strong> | <a href=\"/type/long\">long</a> | Chat ID"
        ],
        [
            "Deletes a user from a chat and sends a service message on it.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>revoke_history</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Remove the entire chat history of the specified user in this chat.\n<strong>chat_id</strong> | <a href=\"/type/long\">long</a> | Chat ID\n<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | User ID to be deleted"
        ],
        [
            "Deletes several contacts from the list.",
            "<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputUser\">InputUser</a>&gt; | User ID list"
        ],
        [
            "Delete a chat invite",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer\n<strong>link</strong> | <a href=\"/type/string\">string</a> | Invite link"
        ],
        [
            "Delete a <a href=\"/api/folders#peer-folders\">peer folder</a>",
            "<strong>folder_id</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/folders#peer-folders\">Peer folder ID, for more info click here</a>"
        ],
        [
            "Deletes communication history.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>just_clear</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Just clear history for the current user, without actually removing messages for every chat user\n<strong>revoke</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Whether to delete the message history for all chat participants\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | User or chat, communication history of which will be deleted\n<strong>max_id</strong> | <a href=\"/type/int\">int</a> | Maximum ID of message to delete\n<strong>min_date</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/int\">int</a> | Delete all messages newer than this UNIX timestamp\n<strong>max_date</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/int\">int</a> | Delete all messages older than this UNIX timestamp"
        ],
        [
            "Delete the history of a <a href=\"/api/channel\">supergroup</a>",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | <a href=\"/api/channel\">Supergroup</a> whose history must be deleted\n<strong>max_id</strong> | <a href=\"/type/int\">int</a> | ID of message <strong>up to which</strong> the history must be deleted"
        ],
        [
            "Deletes messages by their identifiers.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>revoke</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to delete messages for all participants of the chat\n<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | Message ID list"
        ],
        [
            "Delete messages in a <a href=\"/api/channel\">channel/supergroup</a>",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | <a href=\"/api/channel\">Channel/supergroup</a>\n<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | IDs of messages to delete"
        ],
        [
            "Delete the entire phone call history.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>revoke</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to remove phone call history for participants as well"
        ],
        [
            "Deletes profile photos.",
            "<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputPhoto\">InputPhoto</a>&gt; | Input photos to delete"
        ],
        [
            "Delete all revoked chat invites",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Chat\n<strong>admin_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | ID of the admin that originally generated the revoked chat invites"
        ],
        [
            "Delete scheduled messages",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer\n<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | Scheduled message IDs"
        ],
        [
            "Delete stored <a href=\"/passport\">Telegram Passport</a> documents, <a href=\"/passport/encryption#encryption\">for more info see the passport docs »</a>",
            "<strong>types</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/SecureValueType\">SecureValueType</a>&gt; | Document types to delete"
        ],
        [
            "Delete all messages sent by a certain user in a <a href=\"/api/channel\">supergroup</a>",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | <a href=\"/api/channel\">Supergroup</a>\n<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | User whose messages should be deleted"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "Refuse or end running call",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>video</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether this is a video call\n<strong>peer</strong> | <a href=\"/type/InputPhoneCall\">InputPhoneCall</a> | The phone call\n<strong>duration</strong> | <a href=\"/type/int\">int</a> | Call duration\n<strong>reason</strong> | <a href=\"/type/PhoneCallDiscardReason\">PhoneCallDiscardReason</a> | Why was the call discarded\n<strong>connection_id</strong> | <a href=\"/type/long\">long</a> | Preferred libtgvoip relay ID"
        ],
        [
            "Cancels a request for creation and/or delete info on secret chat.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>delete_history</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to delete the entire chat history for the other user as well\n<strong>chat_id</strong> | <a href=\"/type/int\">int</a> | Secret chat ID"
        ],
        [
            "Terminate a group call",
            "<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | The group call to terminate"
        ],
        [
            "Dismiss a <a href=\"/api/config#suggestions\">suggestion, see here for more info »</a>.",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | In the case of pending suggestions in <a href=\"/constructor/channelFull\">channels</a>, the channel ID.\n<strong>suggestion</strong> | <a href=\"/type/string\">string</a> | <a href=\"/api/config#suggestions\">Suggestion, see here for more info »</a>."
        ],
        [
            "Delete all temporary authorization keys <strong>except for</strong> the ones specified",
            "<strong>except_auth_keys</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/long\">long</a>&gt; | The auth keys that <strong>shouldn't</strong> be dropped."
        ],
        [
            "Modify the admin rights of a user in a <a href=\"/api/channel\">supergroup/channel</a>.",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | The <a href=\"/api/channel\">supergroup/channel</a>.\n<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | The ID of the user whose admin rights should be modified\n<strong>admin_rights</strong> | <a href=\"/type/ChatAdminRights\">ChatAdminRights</a> | The admin rights\n<strong>rank</strong> | <a href=\"/type/string\">string</a> | Indicates the role (rank) of the admin in the group: just an arbitrary string"
        ],
        [
            "Ban/unban/kick a user in a <a href=\"/api/channel\">supergroup/channel</a>.",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | The <a href=\"/api/channel\">supergroup/channel</a>.\n<strong>participant</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Participant to ban\n<strong>banned_rights</strong> | <a href=\"/type/ChatBannedRights\">ChatBannedRights</a> | The banned rights"
        ],
        [
            "Edit the description of a <a href=\"/api/channel\">group/supergroup/channel</a>.",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The <a href=\"/api/channel\">group/supergroup/channel</a>.\n<strong>about</strong> | <a href=\"/type/string\">string</a> | The new description"
        ],
        [
            "Make a user admin in a <a href=\"/api/channel#legacy-groups\">legacy group</a>.",
            "<strong>chat_id</strong> | <a href=\"/type/long\">long</a> | The ID of the group\n<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | The user to make admin\n<strong>is_admin</strong> | <a href=\"/type/Bool\">Bool</a> | Whether to make them admin"
        ],
        [
            "Edit the default banned rights of a <a href=\"/api/channel\">channel/supergroup/group</a>.",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The peer\n<strong>banned_rights</strong> | <a href=\"/type/ChatBannedRights\">ChatBannedRights</a> | The new global rights"
        ],
        [
            "Changes chat photo and sends a service message on it",
            "<strong>chat_id</strong> | <a href=\"/type/long\">long</a> | Chat ID\n<strong>photo</strong> | <a href=\"/type/InputChatPhoto\">InputChatPhoto</a> | Photo to be set"
        ],
        [
            "Changes chat name and sends a service message on it.",
            "<strong>chat_id</strong> | <a href=\"/type/long\">long</a> | Chat ID\n<strong>title</strong> | <a href=\"/type/string\">string</a> | New chat name, different from the old one"
        ],
        [
            "Transfer channel ownership",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel\n<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | New channel owner\n<strong>password</strong> | <a href=\"/type/InputCheckPasswordSRP\">InputCheckPasswordSRP</a> | <a href=\"/api/srp\">2FA password</a> of account"
        ],
        [
            "Edit an exported chat invite",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>revoked</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/constructor/true\">true</a> | Whether to revoke the chat invite\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Chat\n<strong>link</strong> | <a href=\"/type/string\">string</a> | Invite link\n<strong>expire_date</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/int\">int</a> | New expiration date\n<strong>usage_limit</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/int\">int</a> | Maximum number of users that can join using this link\n<strong>request_needed</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/Bool\">Bool</a> | Whether admin confirmation is required before admitting each separate user into the chat\n<strong>title</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.4?<a href=\"/type/string\">string</a> | Description of the invite link, visible only to administrators"
        ],
        [
            "Edit information about a given group call participant",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | The group call\n<strong>participant</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The group call participant (can also be the user itself)\n<strong>muted</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/Bool\">Bool</a> | Whether to mute or unmute the specified participant\n<strong>volume</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/int\">int</a> | New volume\n<strong>raise_hand</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/Bool\">Bool</a> | Raise or lower hand\n<strong>video_stopped</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/Bool\">Bool</a> | Start or stop the video stream\n<strong>video_paused</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.4?<a href=\"/type/Bool\">Bool</a> | Pause or resume the video stream\n<strong>presentation_paused</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.5?<a href=\"/type/Bool\">Bool</a> | Pause or resume the screen sharing stream"
        ],
        [
            "Edit the title of a group call or livestream",
            "<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | Group call\n<strong>title</strong> | <a href=\"/type/string\">string</a> | New title"
        ],
        [
            "Edit an inline bot message",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>no_webpage</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Disable webpage preview\n<strong>id</strong> | <a href=\"/type/InputBotInlineMessageID\">InputBotInlineMessageID</a> | Sent inline message ID\n<strong>message</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.11?<a href=\"/type/string\">string</a> | Message\n<strong>media</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.14?<a href=\"/type/InputMedia\">InputMedia</a> | Media\n<strong>reply_markup</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/ReplyMarkup\">ReplyMarkup</a> | Reply markup for inline keyboards\n<strong>entities</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/MessageEntity\">MessageEntity</a>&gt; | <a href=\"/api/entities\">Message entities for styled text</a>"
        ],
        [
            "Edit location of geogroup",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | <a href=\"/api/channel\">Geogroup</a>\n<strong>geo_point</strong> | <a href=\"/type/InputGeoPoint\">InputGeoPoint</a> | New geolocation\n<strong>address</strong> | <a href=\"/type/string\">string</a> | Address string"
        ],
        [
            "Edit message",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>no_webpage</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Disable webpage preview\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Where was the message sent\n<strong>id</strong> | <a href=\"/type/int\">int</a> | ID of the message to edit\n<strong>message</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.11?<a href=\"/type/string\">string</a> | New message\n<strong>media</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.14?<a href=\"/type/InputMedia\">InputMedia</a> | New attached media\n<strong>reply_markup</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/ReplyMarkup\">ReplyMarkup</a> | Reply markup for inline keyboards\n<strong>entities</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/MessageEntity\">MessageEntity</a>&gt; | <a href=\"/api/entities\">Message entities for styled text</a>\n<strong>schedule_date</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.15?<a href=\"/type/int\">int</a> | Scheduled message date for <a href=\"/api/scheduled-messages\">scheduled messages</a>"
        ],
        [
            "Edit peers in <a href=\"/api/folders#peer-folders\">peer folder</a>",
            "<strong>folder_peers</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputFolderPeer\">InputFolderPeer</a>&gt; | New peer list"
        ],
        [
            "Change the photo of a <a href=\"/api/channel\">channel/supergroup</a>",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel/supergroup whose photo should be edited\n<strong>photo</strong> | <a href=\"/type/InputChatPhoto\">InputChatPhoto</a> | New photo"
        ],
        [
            "Edit the name of a <a href=\"/api/channel\">channel/supergroup</a>",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel/supergroup\n<strong>title</strong> | <a href=\"/type/string\">string</a> | New name"
        ],
        [
            "Internal use",
            "<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | User\n<strong>message</strong> | <a href=\"/type/string\">string</a> | Message\n<strong>entities</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/MessageEntity\">MessageEntity</a>&gt; | <a href=\"/api/entities\">Message entities for styled text</a>"
        ],
        [
            "Returns data for copying authorization to another data-center.",
            "<strong>dc_id</strong> | <a href=\"/type/int\">int</a> | Number of a target data-center"
        ],
        [
            "Export an invite link for a chat",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>legacy_revoke_permanent</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/constructor/true\">true</a> | Legacy flag, reproducing legacy behavior of this method: if set, revokes all previous links before creating a new one. Kept for bot API BC, should not be used by modern clients.\n<strong>request_needed</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/constructor/true\">true</a> | Whether admin confirmation is required before admitting each separate user into the chat\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Chat\n<strong>expire_date</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/int\">int</a> | Expiration date\n<strong>usage_limit</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/int\">int</a> | Maximum number of users that can join using this link\n<strong>title</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.4?<a href=\"/type/string\">string</a> | Description of the invite link, visible only to administrators"
        ],
        [
            "Get an invite link for a group call or livestream",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>can_self_unmute</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | For livestreams, if set, users that join using this link will be able to speak without explicitly requesting permission by (for example by raising their hand).\n<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | The group call"
        ],
        [
            "Generate a login token, for <a href=\"/api/qr-login\">login via QR code</a>.<br>\nThe generated login token should be encoded using base64url, then shown as a <code>tg://login?token=base64encodedtoken</code> URL in the QR code.",
            "<strong>api_id</strong> | <a href=\"/type/int\">int</a> | Application identifier (see. <a href=\"/myapp\">App configuration</a>)\n<strong>api_hash</strong> | <a href=\"/type/string\">string</a> | Application identifier hash (see. <a href=\"/myapp\">App configuration</a>)\n<strong>except_ids</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/long\">long</a>&gt; | List of already logged-in user IDs, to prevent logging in twice with the same user"
        ],
        [
            "Get link and embed info of a message in a <a href=\"/api/channel\">channel/supergroup</a>",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>grouped</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to include other grouped media (for albums)\n<strong>thread</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Whether to also include a thread ID, if available, inside of the link\n<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel\n<strong>id</strong> | <a href=\"/type/int\">int</a> | Message ID"
        ],
        [
            "Mark or unmark a sticker as favorite",
            "<strong>id</strong> | <a href=\"/type/InputDocument\">InputDocument</a> | Sticker in question\n<strong>unfave</strong> | <a href=\"/type/Bool\">Bool</a> | Whether to add or remove a sticker from favorites"
        ],
        [
            "Finish account takeout session",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>success</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Data exported successfully"
        ],
        [
            "Forwards messages by their IDs.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>silent</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.5?<a href=\"/constructor/true\">true</a> | Whether to send messages silently (no notification will be triggered on the destination clients)\n<strong>background</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.6?<a href=\"/constructor/true\">true</a> | Whether to send the message in background\n<strong>with_my_score</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.8?<a href=\"/constructor/true\">true</a> | When forwarding games, whether to include your score in the game\n<strong>drop_author</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.11?<a href=\"/constructor/true\">true</a> | Whether to forward messages without quoting the original author\n<strong>drop_media_captions</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.12?<a href=\"/constructor/true\">true</a> | Whether to strip captions from media\n<strong>noforwards</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.14?<a href=\"/constructor/true\">true</a> | Only for bots, disallows further re-forwarding and saving of the messages, even if the destination chat doesn't have <a href=\"https://telegram.org/blog/protected-content-delete-by-date-and-more\">content protection</a> enabled\n<strong>from_peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Source of messages\n<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | IDs of messages\n<strong>random_id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/long\">long</a>&gt; | Random ID to prevent resending of messages\n<strong>to_peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Destination peer\n<strong>schedule_date</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.10?<a href=\"/type/int\">int</a> | Scheduled message date for scheduled messages\n<strong>send_as</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.13?<a href=\"/type/InputPeer\">InputPeer</a> | Forward the messages as the specified peer"
        ],
        [
            "Get days to live of account",
            "No parameters"
        ],
        [
            "Get the admin log of a <a href=\"/api/channel\">channel/supergroup</a>",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel\n<strong>q</strong> | <a href=\"/type/string\">string</a> | Search query, can be empty\n<strong>events_filter</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/ChannelAdminLogEventsFilter\">ChannelAdminLogEventsFilter</a> | Event filter\n<strong>admins</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputUser\">InputUser</a>&gt; | Only show events from these admins\n<strong>max_id</strong> | <a href=\"/type/long\">long</a> | Maximum ID of message to return (see <a href=\"/api/offsets\">pagination</a>)\n<strong>min_id</strong> | <a href=\"/type/long\">long</a> | Minimum ID of message to return (see <a href=\"/api/offsets\">pagination</a>)\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>"
        ],
        [
            "Get <a href=\"/api/channel\">channels/supergroups/geogroups</a> we're admin in. Usually called when the user exceeds the <a href=\"/constructor/config\">limit</a> for owned public <a href=\"/api/channel\">channels/supergroups/geogroups</a>, and the user is given the choice to remove one of his channels/supergroups/geogroups.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>by_location</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Get geogroups\n<strong>check_limit</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | If set and the user has reached the limit of owned public <a href=\"/api/channel\">channels/supergroups/geogroups</a>, instead of returning the channel list one of the specified <a href=\"#possible-errors\">errors</a> will be returned.<br>Useful to check if a new public channel can indeed be created, even before asking the user to enter a channel username to use in <a href=\"/method/channels.checkUsername\">channels.checkUsername</a>/<a href=\"/method/channels.updateUsername\">channels.updateUsername</a>."
        ],
        [
            "Get info about chat invites generated by admins.",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Chat"
        ],
        [
            "Get all chats, channels and supergroups",
            "<strong>except_ids</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/long\">long</a>&gt; | Except these chats/channels/supergroups"
        ],
        [
            "Save get all message <a href=\"/api/drafts\">drafts</a>.",
            "No parameters"
        ],
        [
            "Get all saved <a href=\"/passport\">Telegram Passport</a> documents, <a href=\"/passport/encryption#encryption\">for more info see the passport docs »</a>",
            "No parameters"
        ],
        [
            "Get all installed stickers",
            "<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get changelog of current app.<br>\nTypically, an <a href=\"/constructor/updates\">updates</a> constructor will be returned, containing one or more <a href=\"/constructor/updateServiceNotification\">updateServiceNotification</a> updates with app-specific changelogs.",
            "<strong>prev_app_version</strong> | <a href=\"/type/string\">string</a> | Previous app version"
        ],
        [
            "Get app-specific configuration, see <a href=\"/api/config#client-configuration\">client configuration</a> for more info on the result.",
            "No parameters"
        ],
        [
            "Returns information on update availability for the current application.",
            "<strong>source</strong> | <a href=\"/type/string\">string</a> | Source"
        ],
        [
            "Get all archived stickers",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>masks</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Get mask stickers\n<strong>offset_id</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>"
        ],
        [
            "Get stickers attached to a photo or video",
            "<strong>media</strong> | <a href=\"/type/InputStickeredMedia\">InputStickeredMedia</a> | Stickered media"
        ],
        [
            "Returns a Telegram Passport authorization form for sharing data with a service",
            "<strong>bot_id</strong> | <a href=\"/type/long\">long</a> | User identifier of the service's bot\n<strong>scope</strong> | <a href=\"/type/string\">string</a> | Telegram Passport element types requested by the service\n<strong>public_key</strong> | <a href=\"/type/string\">string</a> | Service's public key"
        ],
        [
            "Get logged-in sessions",
            "No parameters"
        ],
        [
            "Get media autodownload settings",
            "No parameters"
        ],
        [
            "Get info about a credit card",
            "<strong>number</strong> | <a href=\"/type/string\">string</a> | Credit card number"
        ],
        [
            "Returns the list of blocked users.",
            "<strong>offset</strong> | <a href=\"/type/int\">int</a> | The number of list elements to be skipped\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | The number of list elements to be returned"
        ],
        [
            "Press an inline callback button and get a callback answer from the bot",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>game</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Whether this is a \"play game\" button\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Where was the inline keyboard sent\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | ID of the Message with the inline keyboard\n<strong>data</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/bytes\">bytes</a> | Callback data\n<strong>password</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/InputCheckPasswordSRP\">InputCheckPasswordSRP</a> | For buttons <a href=\"/constructor/keyboardButtonCallback\">requiring you to verify your identity with your 2FA password</a>, the SRP payload generated using <a href=\"/api/srp\">SRP</a>."
        ],
        [
            "Obtain a list of bot commands for the specified bot scope and language code",
            "<strong>scope</strong> | <a href=\"/type/BotCommandScope\">BotCommandScope</a> | Command scope\n<strong>lang_code</strong> | <a href=\"/type/string\">string</a> | Language code"
        ],
        [
            "Get <a href=\"/api/stats\">channel statistics</a>",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>dark</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to enable dark theme for graph colors\n<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | The channel"
        ],
        [
            "Get phone call configuration to be passed to libtgvoip's shared config",
            "No parameters"
        ],
        [
            "Get configuration for <a href=\"/cdn\">CDN</a> file downloads.",
            "No parameters"
        ],
        [
            "Download a <a href=\"/cdn\">CDN</a> file.",
            "<strong>file_token</strong> | <a href=\"/type/bytes\">bytes</a> | File token\n<strong>offset</strong> | <a href=\"/type/int\">int</a> | Offset of chunk to download\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Length of chunk to download"
        ],
        [
            "Get SHA256 hashes for verifying downloaded <a href=\"/cdn\">CDN</a> files",
            "<strong>file_token</strong> | <a href=\"/type/bytes\">bytes</a> | File\n<strong>offset</strong> | <a href=\"/type/int\">int</a> | Offset from which to start getting hashes"
        ],
        [
            "Returns the difference between the current state of updates of a certain channel and transmitted.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>force</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Set to true to skip some possibly unneeded updates and reduce server-side load\n<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | The channel\n<strong>filter</strong> | <a href=\"/type/ChannelMessagesFilter\">ChannelMessagesFilter</a> | Messsage filter\n<strong>pts</strong> | <a href=\"/type/int\">int</a> | Persistent timestamp (see <a href=\"/api/updates\">updates</a>)\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | How many updates to fetch, max <code>100000</code><br>Ordinary (non-bot) users are supposed to pass <code>10-100</code>"
        ],
        [
            "Get info about <a href=\"/api/channel\">channels/supergroups</a>",
            "<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputChannel\">InputChannel</a>&gt; | IDs of channels/supergroups to get info about"
        ],
        [
            "Get info about the users that joined the chat using a specific chat invite",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>requested</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | If set, only returns info about users with pending <a href=\"/api/invites#join-requests\">join requests »</a>\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Chat\n<strong>link</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/string\">string</a> | Invite link\n<strong>q</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/string\">string</a> | Search for a user in the pending <a href=\"/api/invites#join-requests\">join requests »</a> list: only available when the <code>requested</code> flag is set, cannot be used together with a specific <code>link</code>.\n<strong>offset_date</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>offset_user</strong> | <a href=\"/type/InputUser\">InputUser</a> | User ID for <a href=\"/api/offsets\">pagination</a>\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>"
        ],
        [
            "Returns chat basic info on their IDs.",
            "<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/long\">long</a>&gt; | List of chat IDs"
        ],
        [
            "Get chats in common with a user",
            "<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | User ID\n<strong>max_id</strong> | <a href=\"/type/long\">long</a> | Maximum ID of chat to return (see <a href=\"/api/offsets\">pagination</a>)\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>"
        ],
        [
            "Returns current configuration, including data center configuration.",
            "400 | CONNECTION_API_ID_INVALID | The provided API id is invalid.\n400 | CONNECTION_APP_VERSION_EMPTY | App version is empty.\n400 | CONNECTION_LAYER_INVALID | Layer invalid.\n400 | DATA_INVALID | Encrypted data invalid.\n400 | MSG_ID_INVALID | Invalid message ID provided.\n400 | USERNAME_INVALID | The provided username is not valid.\n403 | USER_PRIVACY_RESTRICTED | The user's privacy settings do not allow you to do this."
        ],
        [
            "Get contact by telegram IDs",
            "<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Whether the user will receive notifications when contacts sign up",
            "No parameters"
        ],
        [
            "Returns the current user's contact list.",
            "<strong>hash</strong> | <a href=\"/type/long\">long</a> | If there already is a full contact list on the client, a <a href=\"/api/offsets#hash-generation\">hash</a> of a the list of contact IDs in ascending order may be passed in this parameter. If the contact set was not changed, <a href=\"/constructor/contacts.contactsNotModified\">(contacts.contactsNotModified)</a> will be returned."
        ],
        [
            "Get sensitive content settings",
            "No parameters"
        ],
        [
            "Get name, ISO code, localized name and phone codes/patterns of all available countries",
            "<strong>lang_code</strong> | <a href=\"/type/string\">string</a> | Language code of the current user\n<strong>hash</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get info about a <code>t.me</code> link",
            "<strong>path</strong> | <a href=\"/type/string\">string</a> | Path in <code>t.me/path</code>"
        ],
        [
            "Returns configuration parameters for Diffie-Hellman key generation. Can also return a random sequence of bytes of required length.",
            "<strong>version</strong> | <a href=\"/type/int\">int</a> | Value of the <strong>version</strong> parameter from <a href=\"/constructor/messages.dhConfig\">messages.dhConfig</a>, available at the client\n<strong>random_length</strong> | <a href=\"/type/int\">int</a> | Length of the required random sequence"
        ],
        [
            "Get <a href=\"/api/folders\">folders</a>",
            "No parameters"
        ],
        [
            "Get dialogs manually marked as unread",
            "No parameters"
        ],
        [
            "Returns the current user dialog list.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>exclude_pinned</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Exclude pinned dialogs\n<strong>folder_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/int\">int</a> | <a href=\"/api/folders#peer-folders\">Peer folder ID, for more info click here</a>\n<strong>offset_date</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>offset_id</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>offset_peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | <a href=\"/api/offsets\">Offset peer for pagination</a>\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Number of list elements to be returned\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get new <a href=\"/api/updates\">updates</a>.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>pts</strong> | <a href=\"/type/int\">int</a> | PTS, see <a href=\"/api/updates\">updates</a>.\n<strong>pts_total_limit</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/int\">int</a> | For fast updating: if provided and <code>pts + pts_total_limit &lt; remote pts</code>, <a href=\"/constructor/updates.differenceTooLong\">updates.differenceTooLong</a> will be returned.<br>Simply tells the server to not return the difference if it is bigger than <code>pts_total_limit</code><br>If the remote pts is too big (&gt; ~4000000), this field will default to 1000000\n<strong>date</strong> | <a href=\"/type/int\">int</a> | date, see <a href=\"/api/updates\">updates</a>.\n<strong>qts</strong> | <a href=\"/type/int\">int</a> | QTS, see <a href=\"/api/updates\">updates</a>."
        ],
        [
            "Get new strings in language pack",
            "<strong>lang_pack</strong> | <a href=\"/type/string\">string</a> | Language pack\n<strong>lang_code</strong> | <a href=\"/type/string\">string</a> | Language code\n<strong>from_version</strong> | <a href=\"/type/int\">int</a> | Previous localization pack version"
        ],
        [
            "Get <a href=\"/api/threads\">discussion message</a> from the <a href=\"/api/discussion\">associated discussion group</a> of a channel to show it on top of the comment section, without actually joining the group",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | <a href=\"/api/channel\">Channel ID</a>\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | Message ID"
        ],
        [
            "Get a document by its SHA256 hash, mainly used for gifs",
            "<strong>sha256</strong> | <a href=\"/type/bytes\">bytes</a> | SHA256 of file\n<strong>size</strong> | <a href=\"/type/int\">int</a> | Size of the file in bytes\n<strong>mime_type</strong> | <a href=\"/type/string\">string</a> | Mime type"
        ],
        [
            "Get localized emoji keywords",
            "<strong>lang_code</strong> | <a href=\"/type/string\">string</a> | Language code"
        ],
        [
            "Get changed emoji keywords",
            "<strong>lang_code</strong> | <a href=\"/type/string\">string</a> | Language code\n<strong>from_version</strong> | <a href=\"/type/int\">int</a> | Previous emoji keyword localization version"
        ],
        [
            "Get info about an emoji keyword localization",
            "<strong>lang_codes</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/string\">string</a>&gt; | Language codes"
        ],
        [
            "Returns an HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation",
            "<strong>lang_code</strong> | <a href=\"/type/string\">string</a> | Language code for which the emoji replacements will be suggested"
        ],
        [
            "Get info about a chat invite",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Chat\n<strong>link</strong> | <a href=\"/type/string\">string</a> | Invite link"
        ],
        [
            "Get info about the chat invites of a specific chat",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>revoked</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/constructor/true\">true</a> | Whether to fetch revoked chat invites\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Chat\n<strong>admin_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | Whether to only fetch chat invites from this admin\n<strong>offset_date</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>offset_link</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/string\">string</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>"
        ],
        [
            "Get faved stickers",
            "<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get featured stickers",
            "<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Returns content of a whole file or its part.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>precise</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Disable some checks on limit and offset values, useful for example to stream videos by keyframes\n<strong>cdn_supported</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Whether the current client supports <a href=\"/cdn\">CDN downloads</a>\n<strong>location</strong> | <a href=\"/type/InputFileLocation\">InputFileLocation</a> | File location\n<strong>offset</strong> | <a href=\"/type/int\">int</a> | Number of bytes to be skipped\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Number of bytes to be returned"
        ],
        [
            "Get SHA256 hashes for verifying downloaded files",
            "<strong>location</strong> | <a href=\"/type/InputFileLocation\">InputFileLocation</a> | File\n<strong>offset</strong> | <a href=\"/type/int\">int</a> | Offset from which to get file hashes"
        ],
        [
            "Get full info about a <a href=\"/api/channel#supergroups\">supergroup</a>, <a href=\"/api/channel#gigagroups\">gigagroup</a> or <a href=\"/api/channel#channels\">channel</a>",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | The <a href=\"/api/channel#channels\">channel</a>, <a href=\"/api/channel#supergroups\">supergroup</a> or <a href=\"/api/channel#gigagroups\">gigagroup</a> to get info about"
        ],
        [
            "Get full info about a <a href=\"/api/channel#legacy-groups\">legacy group</a>.",
            "<strong>chat_id</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/channel#legacy-groups\">Legacy group</a> ID."
        ],
        [
            "Returns extended user info by ID.",
            "<strong>id</strong> | <a href=\"/type/InputUser\">InputUser</a> | User ID"
        ],
        [
            "Get highscores of a game",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Where was the game sent\n<strong>id</strong> | <a href=\"/type/int\">int</a> | ID of message with game media attachment\n<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | Get high scores made by a certain user"
        ],
        [
            "Get global privacy settings",
            "No parameters"
        ],
        [
            "Get info about a group call",
            "<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | The group call\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>"
        ],
        [
            "Get a list of peers that can be used to join a group call, presenting yourself as a specific user/channel.",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The dialog whose group call or livestream we're trying to join"
        ],
        [
            "Get group call participants",
            "<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | Group call\n<strong>ids</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputPeer\">InputPeer</a>&gt; | If specified, will fetch group participant info about the specified peers\n<strong>sources</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | If specified, will fetch group participant info about the specified WebRTC source IDs\n<strong>offset</strong> | <a href=\"/type/string\">string</a> | Offset for results, taken from the <code>next_offset</code> field of <a href=\"/constructor/phone.groupParticipants\">phone.groupParticipants</a>, initially an empty string. <br>Note: if no more results are available, the method call will return an empty <code>next_offset</code>; thus, avoid providing the <code>next_offset</code> returned in <a href=\"/constructor/phone.groupParticipants\">phone.groupParticipants</a> if it is empty, to avoid an infinite loop.\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>"
        ],
        [
            "Get all groups that can be used as <a href=\"/api/discussion\">discussion groups</a>.",
            "No parameters"
        ],
        [
            "Gets back the conversation history with one interlocutor / within a chat",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Target peer\n<strong>offset_id</strong> | <a href=\"/type/int\">int</a> | Only return messages starting from the specified message ID\n<strong>offset_date</strong> | <a href=\"/type/int\">int</a> | Only return messages sent before the specified date\n<strong>add_offset</strong> | <a href=\"/type/int\">int</a> | Number of list elements to be skipped, negative values are also accepted.\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Number of results to return\n<strong>max_id</strong> | <a href=\"/type/int\">int</a> | If a positive value was transferred, the method will return only messages with IDs less than <strong>max_id</strong>\n<strong>min_id</strong> | <a href=\"/type/int\">int</a> | If a positive value was transferred, the method will return only messages with IDs more than <strong>min_id</strong>\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets\">Result hash</a>"
        ],
        [
            "Get inactive channels and supergroups",
            "No parameters"
        ],
        [
            "Query an inline bot",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>bot</strong> | <a href=\"/type/InputUser\">InputUser</a> | The bot to query\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The currently opened chat\n<strong>geo_point</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/InputGeoPoint\">InputGeoPoint</a> | The geolocation, if requested\n<strong>query</strong> | <a href=\"/type/string\">string</a> | The query\n<strong>offset</strong> | <a href=\"/type/string\">string</a> | The offset within the results, will be passed directly as-is to the bot."
        ],
        [
            "Get highscores of a game sent using an inline bot",
            "<strong>id</strong> | <a href=\"/type/InputBotInlineMessageID\">InputBotInlineMessageID</a> | ID of inline message\n<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | Get high scores of a certain user"
        ],
        [
            "Returns localized text of a text message with an invitation.",
            "No parameters"
        ],
        [
            "Get localization pack strings",
            "<strong>lang_pack</strong> | <a href=\"/type/string\">string</a> | Language pack name\n<strong>lang_code</strong> | <a href=\"/type/string\">string</a> | Language code"
        ],
        [
            "Get information about a language in a localization pack",
            "<strong>lang_pack</strong> | <a href=\"/type/string\">string</a> | Language pack name\n<strong>lang_code</strong> | <a href=\"/type/string\">string</a> | Language code"
        ],
        [
            "Get information about all languages in a localization pack",
            "<strong>lang_pack</strong> | <a href=\"/type/string\">string</a> | Language pack"
        ],
        [
            "Get a list of <a href=\"/api/channel\">channels/supergroups</a> we left",
            "<strong>offset</strong> | <a href=\"/type/int\">int</a> | Offset for <a href=\"/api/offsets\">pagination</a>"
        ],
        [
            "Get contacts near you",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>background</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | While the geolocation of the current user is public, clients should update it in the background every half-an-hour or so, while setting this flag. <br>Do this only if the new location is more than 1 KM away from the previous one, or if the previous location is unknown.\n<strong>geo_point</strong> | <a href=\"/type/InputGeoPoint\">InputGeoPoint</a> | Geolocation\n<strong>self_expires</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/int\">int</a> | If set, the geolocation of the current user will be public for the specified number of seconds; pass 0x7fffffff to disable expiry, 0 to make the current geolocation private; if the flag isn't set, no changes will be applied."
        ],
        [
            "Get installed mask stickers",
            "<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get <a href=\"/api/stats\">supergroup statistics</a>",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>dark</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to enable dark theme for graph colors\n<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | <a href=\"/api/channel\">Supergroup ID</a>"
        ],
        [
            "Find out if a media message's caption can be edited",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer where the media was sent\n<strong>id</strong> | <a href=\"/type/int\">int</a> | ID of message"
        ],
        [
            "Obtains a list of messages, indicating to which other public channels was a channel message forwarded.<br>\nWill return a list of <a href=\"/constructor/message\">messages</a> with <code>peer_id</code> equal to the public channel to which this message was forwarded.",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Source channel\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | Source message ID\n<strong>offset_rate</strong> | <a href=\"/type/int\">int</a> | Initially 0, then set to the <code>next_rate</code> parameter of <a href=\"/constructor/messages.messagesSlice\">messages.messagesSlice</a>\n<strong>offset_peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>offset_id</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>"
        ],
        [
            "Get <a href=\"/api/stats\">message statistics</a>",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>dark</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to enable dark theme for graph colors\n<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel ID\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | Message ID"
        ],
        [
            "Returns the list of messages by their IDs.",
            "<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputMessage\">InputMessage</a>&gt; | Message ID list"
        ],
        [
            "Get <a href=\"/api/channel\">channel/supergroup</a> messages",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel/supergroup\n<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputMessage\">InputMessage</a>&gt; | IDs of messages to get"
        ],
        [
            "Get and increase the view counter of a message sent or forwarded from a <a href=\"/api/channel\">channel</a>",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer where the message was found\n<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | ID of message\n<strong>increment</strong> | <a href=\"/type/Bool\">Bool</a> | Whether to mark the message as viewed and increment the view counter"
        ],
        [
            "Get info about multiple wallpapers",
            "<strong>wallpapers</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputWallPaper\">InputWallPaper</a>&gt; | Wallpapers to fetch info about"
        ],
        [
            "Returns info on data center nearest to the user.",
            "No parameters"
        ],
        [
            "Returns list of chats with non-default notification settings",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>compare_sound</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | If true, chats with non-default sound will also be returned\n<strong>peer</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/InputNotifyPeer\">InputNotifyPeer</a> | If specified, only chats of the specified category will be returned"
        ],
        [
            "Gets current notification settings for a given user/group, from all users/all groups.",
            "<strong>peer</strong> | <a href=\"/type/InputNotifyPeer\">InputNotifyPeer</a> | Notification source"
        ],
        [
            "Method for fetching previously featured stickers",
            "<strong>offset</strong> | <a href=\"/type/int\">int</a> | Offset\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get count of online users in a chat",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The chat"
        ],
        [
            "Get info about a <a href=\"/api/channel\">channel/supergroup</a> participant",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel/supergroup\n<strong>participant</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Participant to get info about"
        ],
        [
            "Get the participants of a <a href=\"/api/channel\">supergroup/channel</a>",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel\n<strong>filter</strong> | <a href=\"/type/ChannelParticipantsFilter\">ChannelParticipantsFilter</a> | Which participant types to fetch\n<strong>offset</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offset</a>\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Limit</a>\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets\">Hash</a>"
        ],
        [
            "Get <a href=\"/passport\">passport</a> configuration",
            "<strong>hash</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Obtain configuration for two-factor authorization with password",
            "No parameters"
        ],
        [
            "Get private info associated to the password info (recovery email, telegram <a href=\"/passport\">passport</a> info &amp; so on)",
            "<strong>password</strong> | <a href=\"/type/InputCheckPasswordSRP\">InputCheckPasswordSRP</a> | The password (see <a href=\"/api/srp\">SRP</a>)"
        ],
        [
            "Get a payment form",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The peer where the payment form was sent\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | Message ID of payment form\n<strong>theme_params</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/DataJSON\">DataJSON</a> | A JSON object with the following keys, containing color theme information (integers, RGB24) to pass to the payment provider, to apply in eventual verification pages: <br><code>bg_color</code> - Background color <br><code>text_color</code> - Text color <br><code>hint_color</code> - Hint text color <br><code>link_color</code> - Link color <br><code>button_color</code> - Button color <br><code>button_text_color</code> - Button text color"
        ],
        [
            "Get payment receipt",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The peer where the payment receipt was sent\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | Message ID of receipt"
        ],
        [
            "Get dialog info of specified peers",
            "<strong>peers</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputDialogPeer\">InputDialogPeer</a>&gt; | Peers"
        ],
        [
            "Get peer settings",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The peer"
        ],
        [
            "Get pinned dialogs",
            "<strong>folder_id</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/folders#peer-folders\">Peer folder ID, for more info click here</a>"
        ],
        [
            "Get poll results",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer where the poll was found\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | Message ID of poll message"
        ],
        [
            "Get poll results for non-anonymous polls",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Chat where the poll was sent\n<strong>id</strong> | <a href=\"/type/int\">int</a> | Message ID\n<strong>option</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/bytes\">bytes</a> | Get only results for the specified poll <code>option</code>\n<strong>offset</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/string\">string</a> | Offset for results, taken from the <code>next_offset</code> field of <a href=\"/constructor/messages.votesList\">messages.votesList</a>, initially an empty string. <br>Note: if no more results are available, the method call will return an empty <code>next_offset</code>; thus, avoid providing the <code>next_offset</code> returned in <a href=\"/constructor/messages.votesList\">messages.votesList</a> if it is empty, to avoid an infinite loop.\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Number of results to return"
        ],
        [
            "Get privacy settings of current account",
            "<strong>key</strong> | <a href=\"/type/InputPrivacyKey\">InputPrivacyKey</a> | Peer category whose privacy settings should be fetched"
        ],
        [
            "Get MTProxy/Public Service Announcement information",
            "No parameters"
        ],
        [
            "Get live location history of a certain user",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | User\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get recently used <code>t.me</code> links",
            "<strong>referer</strong> | <a href=\"/type/string\">string</a> | Referer"
        ],
        [
            "Get recent stickers",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>attached</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Get stickers recently attached to photo or video files\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get messages in a reply thread",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | Message ID\n<strong>offset_id</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>offset_date</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>add_offset</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>\n<strong>max_id</strong> | <a href=\"/type/int\">int</a> | If a positive value was transferred, the method will return only messages with ID smaller than max_id\n<strong>min_id</strong> | <a href=\"/type/int\">int</a> | If a positive value was transferred, the method will return only messages with ID bigger than min_id\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get all contacts",
            "403 | TAKEOUT_REQUIRED | A takeout session has to be initialized, first."
        ],
        [
            "Get saved GIFs",
            "<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get saved payment information",
            "No parameters"
        ],
        [
            "Get scheduled messages",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get scheduled messages",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer\n<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | IDs of scheduled messages"
        ],
        [
            "Get the number of results that would be found by a <a href=\"/method/messages.search\">messages.search</a> call with the same parameters",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer where to search\n<strong>filters</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/MessagesFilter\">MessagesFilter</a>&gt; | Search filters"
        ],
        [
            "Get saved <a href=\"/passport\">Telegram Passport</a> document, <a href=\"/passport/encryption#encryption\">for more info see the passport docs »</a>",
            "<strong>types</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/SecureValueType\">SecureValueType</a>&gt; | Requested value types"
        ],
        [
            "Get message ranges for saving the user's chat history",
            "No parameters"
        ],
        [
            "Returns a current state of updates.",
            "No parameters"
        ],
        [
            "Returns URL with the chat statistics. Currently this method can be used only for channels",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>dark</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Pass true if a URL with the dark theme must be returned\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Chat identifier\n<strong>params</strong> | <a href=\"/type/string\">string</a> | Parameters from <code>tg://statsrefresh?params=******</code> link"
        ],
        [
            "Returns the list of contact statuses.",
            "No parameters"
        ],
        [
            "Get info about a stickerset",
            "<strong>stickerset</strong> | <a href=\"/type/InputStickerSet\">InputStickerSet</a> | Stickerset\n<strong>hash</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get stickers by emoji",
            "<strong>emoticon</strong> | <a href=\"/type/string\">string</a> | The emoji\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get strings from a language pack",
            "<strong>lang_pack</strong> | <a href=\"/type/string\">string</a> | Language pack name\n<strong>lang_code</strong> | <a href=\"/type/string\">string</a> | Language code\n<strong>keys</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/string\">string</a>&gt; | Strings to get"
        ],
        [
            "Get <a href=\"/api/folders\">suggested folders</a>",
            "No parameters"
        ],
        [
            "Returns the support user for the \"ask a question\" feature.",
            "No parameters"
        ],
        [
            "Get localized name of the telegram support user",
            "403 | USER_INVALID | Invalid user provided."
        ],
        [
            "Look for updates of telegram's terms of service",
            "No parameters"
        ],
        [
            "Get theme information",
            "<strong>format</strong> | <a href=\"/type/string\">string</a> | Theme format, a string that identifies the theming engines supported by the client\n<strong>theme</strong> | <a href=\"/type/InputTheme\">InputTheme</a> | Theme\n<strong>document_id</strong> | <a href=\"/type/long\">long</a> | Document ID"
        ],
        [
            "Get installed themes",
            "<strong>format</strong> | <a href=\"/type/string\">string</a> | Theme format, a string that identifies the theming engines supported by the client\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get temporary payment password",
            "<strong>password</strong> | <a href=\"/type/InputCheckPasswordSRP\">InputCheckPasswordSRP</a> | SRP password parameters\n<strong>period</strong> | <a href=\"/type/int\">int</a> | Time during which the temporary password will be valid, in seconds; should be between 60 and 86400"
        ],
        [
            "Get most used peers",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>correspondents</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Users we've chatted most frequently with\n<strong>bots_pm</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Most used bots\n<strong>bots_inline</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/constructor/true\">true</a> | Most used inline bots\n<strong>phone_calls</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/constructor/true\">true</a> | Most frequently called users\n<strong>forward_users</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.4?<a href=\"/constructor/true\">true</a> | Users to which the users often forwards messages to\n<strong>forward_chats</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.5?<a href=\"/constructor/true\">true</a> | Chats to which the users often forwards messages to\n<strong>groups</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.10?<a href=\"/constructor/true\">true</a> | Often-opened groups and supergroups\n<strong>channels</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.15?<a href=\"/constructor/true\">true</a> | Most frequently visited channels\n<strong>offset</strong> | <a href=\"/type/int\">int</a> | Offset for <a href=\"/api/offsets\">pagination</a>\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get unread messages where we were mentioned",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer where to look for mentions\n<strong>offset_id</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>add_offset</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of results to return, <a href=\"/api/offsets\">see pagination</a>\n<strong>max_id</strong> | <a href=\"/type/int\">int</a> | Maximum message ID to return, <a href=\"/api/offsets\">see pagination</a>\n<strong>min_id</strong> | <a href=\"/type/int\">int</a> | Minimum message ID to return, <a href=\"/api/offsets\">see pagination</a>"
        ],
        [
            "Internal use",
            "<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | User ID"
        ],
        [
            "Returns the list of user photos.",
            "<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | User ID\n<strong>offset</strong> | <a href=\"/type/int\">int</a> | Number of list elements to be skipped\n<strong>max_id</strong> | <a href=\"/type/long\">long</a> | If a positive value was transferred, the method will return only photos with IDs less than the set one\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Number of list elements to be returned"
        ],
        [
            "Returns basic user info according to their identifiers.",
            "<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputUser\">InputUser</a>&gt; | List of user identifiers"
        ],
        [
            "Get info about a certain wallpaper",
            "<strong>wallpaper</strong> | <a href=\"/type/InputWallPaper\">InputWallPaper</a> | The wallpaper to get info about"
        ],
        [
            "Returns a list of available wallpapers.",
            "<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get web <a href=\"/widgets/login\">login widget</a> authorizations",
            "No parameters"
        ],
        [
            "Returns content of an HTTP file or a part, by proxying the request through telegram.",
            "<strong>location</strong> | <a href=\"/type/InputWebFileLocation\">InputWebFileLocation</a> | The file to download\n<strong>offset</strong> | <a href=\"/type/int\">int</a> | Number of bytes to be skipped\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Number of bytes to be returned"
        ],
        [
            "Get <a href=\"https://instantview.telegram.org\">instant view</a> page",
            "<strong>url</strong> | <a href=\"/type/string\">string</a> | URL of IV page to fetch\n<strong>hash</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Get preview of webpage",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>message</strong> | <a href=\"/type/string\">string</a> | Message from which to extract the preview\n<strong>entities</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/MessageEntity\">MessageEntity</a>&gt; | <a href=\"/api/entities\">Message entities for styled text</a>"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "Should be called after the user hides the report spam/add as contact bar of a new chat, effectively prevents the user from executing the actions specified in the <a href=\"/constructor/peerSettings\">peer's settings</a>.",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer"
        ],
        [
            "Hide MTProxy/Public Service Announcement information",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer to hide"
        ],
        [
            "Logs in a user using a key transmitted from his native data-center.",
            "<strong>id</strong> | <a href=\"/type/long\">long</a> | User ID\n<strong>bytes</strong> | <a href=\"/type/bytes\">bytes</a> | Authorization key"
        ],
        [
            "Login as a bot",
            "<strong>flags</strong> | <a href=\"/type/int\">int</a> | Reserved for future use\n<strong>api_id</strong> | <a href=\"/type/int\">int</a> | Application identifier (see. <a href=\"/myapp\">App configuration</a>)\n<strong>api_hash</strong> | <a href=\"/type/string\">string</a> | Application identifier hash (see. <a href=\"/myapp\">App configuration</a>)\n<strong>bot_auth_token</strong> | <a href=\"/type/string\">string</a> | Bot token (see <a href=\"/bots\">bots</a>)"
        ],
        [
            "Import a chat invite and join a private chat/supergroup/channel",
            "<strong>hash</strong> | <a href=\"/type/string\">string</a> | <code>hash</code> from <code>t.me/joinchat/hash</code>"
        ],
        [
            "Imports contacts: saves a full list on the server, adds already registered contacts to the contact list, returns added contacts and their info.",
            "<strong>contacts</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputContact\">InputContact</a>&gt; | List of contacts to import"
        ],
        [
            "Login using a redirected login token, generated in case of DC mismatch during <a href=\"/api/qr-login\">QR code login</a>.",
            "<strong>token</strong> | <a href=\"/type/bytes\">bytes</a> | Login token"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "Import chat history from a foreign chat app into a specific Telegram chat, <a href=\"/api/import\">click here for more info about imported chats »</a>.",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The Telegram chat where the <a href=\"/api/import\">history should be imported</a>.\n<strong>file</strong> | <a href=\"/type/InputFile\">InputFile</a> | File with messages to import.\n<strong>media_count</strong> | <a href=\"/type/int\">int</a> | Number of media files associated with the chat that will be uploaded using <a href=\"/method/messages.uploadImportedMedia\">messages.uploadImportedMedia</a>."
        ],
        [
            "Initialize account takeout session",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>contacts</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to export contacts\n<strong>message_users</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Whether to export messages in private chats\n<strong>message_chats</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/constructor/true\">true</a> | Whether to export messages in <a href=\"/api/channel#legacy-groups\">legacy groups</a>\n<strong>message_megagroups</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/constructor/true\">true</a> | Whether to export messages in <a href=\"/api/channel#supergroups\">supergroups</a>\n<strong>message_channels</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.4?<a href=\"/constructor/true\">true</a> | Whether to export messages in <a href=\"/api/channel#channels\">channels</a>\n<strong>files</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.5?<a href=\"/constructor/true\">true</a> | Whether to export files\n<strong>file_max_size</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.5?<a href=\"/type/int\">int</a> | Maximum size of files to export"
        ],
        [
            "Install a stickerset",
            "<strong>stickerset</strong> | <a href=\"/type/InputStickerSet\">InputStickerSet</a> | Stickerset to install\n<strong>archived</strong> | <a href=\"/type/Bool\">Bool</a> | Whether to archive stickerset"
        ],
        [
            "Install a theme",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>dark</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to install the dark version\n<strong>theme</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/InputTheme\">InputTheme</a> | Theme to install\n<strong>format</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/string\">string</a> | Theme format, a string that identifies the theming engines supported by the client\n<strong>base_theme</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/BaseTheme\">BaseTheme</a> | Indicates a basic theme provided by all clients"
        ],
        [
            "Install wallpaper",
            "<strong>wallpaper</strong> | <a href=\"/type/InputWallPaper\">InputWallPaper</a> | Wallpaper to install\n<strong>settings</strong> | <a href=\"/type/WallPaperSettings\">WallPaperSettings</a> | Wallpaper settings"
        ],
        [
            "Invite users to a channel/supergroup",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel/supergroup\n<strong>users</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputUser\">InputUser</a>&gt; | Users to invite"
        ],
        [
            "Invite a set of users to a group call.",
            "<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | The group call\n<strong>users</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputUser\">InputUser</a>&gt; | The users to invite."
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "Join a channel/supergroup",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel/supergroup to join"
        ],
        [
            "Join a group call",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>muted</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | If set, the user will be muted by default upon joining.\n<strong>video_stopped</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/constructor/true\">true</a> | If set, the user's video will be disabled by default upon joining.\n<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | The group call\n<strong>join_as</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Join the group call, presenting yourself as the specified user/channel\n<strong>invite_hash</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/string\">string</a> | The invitation hash from the invite link: <code>https://t.me/username?voicechat=hash</code>\n<strong>params</strong> | <a href=\"/type/DataJSON\">DataJSON</a> | WebRTC parameters"
        ],
        [
            "Start screen sharing in a call",
            "<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | The group call\n<strong>params</strong> | <a href=\"/type/DataJSON\">DataJSON</a> | WebRTC parameters"
        ],
        [
            "Leave a <a href=\"/api/channel\">channel/supergroup</a>",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | <a href=\"/api/channel\">Channel/supergroup</a> to leave"
        ],
        [
            "Leave a group call",
            "<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | The group call\n<strong>source</strong> | <a href=\"/type/int\">int</a> | Your source ID"
        ],
        [
            "Stop screen sharing in a group call",
            "<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | The group call"
        ],
        [
            "Load <a href=\"/api/stats\">channel statistics graph</a> asynchronously",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>token</strong> | <a href=\"/type/string\">string</a> | Graph token from <a href=\"/constructor/statsGraphAsync\">statsGraphAsync</a> constructor\n<strong>x</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/long\">long</a> | Zoom value, if required"
        ],
        [
            "Logs out the user.",
            "No parameters"
        ],
        [
            "Manually mark dialog as unread",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>unread</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Mark as unread/read\n<strong>peer</strong> | <a href=\"/type/InputDialogPeer\">InputDialogPeer</a> | Dialog"
        ],
        [
            "Turn a <a href=\"/api/channel#migration\">legacy group into a supergroup</a>",
            "<strong>chat_id</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/channel#legacy-groups\">Legacy group</a> to migrate"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "Mark a <a href=\"/api/threads\">thread</a> as read",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Group ID\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | ID of message that started the thread\n<strong>read_max_id</strong> | <a href=\"/type/int\">int</a> | ID up to which thread messages were read"
        ],
        [
            "Marks message history within a secret chat as read.",
            "<strong>peer</strong> | <a href=\"/type/InputEncryptedChat\">InputEncryptedChat</a> | Secret chat ID\n<strong>max_date</strong> | <a href=\"/type/int\">int</a> | Maximum date value for received messages in history"
        ],
        [
            "Mark new featured stickers as read",
            "<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/long\">long</a>&gt; | IDs of stickersets to mark as read"
        ],
        [
            "Marks message history as read.",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Target user or group\n<strong>max_id</strong> | <a href=\"/type/int\">int</a> | If a positive value is passed, only messages with identifiers less or equal than the given one will be read"
        ],
        [
            "Mark <a href=\"/api/channel\">channel/supergroup</a> history as read",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | <a href=\"/api/channel\">Channel/supergroup</a>\n<strong>max_id</strong> | <a href=\"/type/int\">int</a> | ID of message up to which messages should be marked as read"
        ],
        [
            "Mark mentions as read",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Dialog"
        ],
        [
            "Notifies the sender about the recipient having listened a voice message or watched a video.",
            "<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | Message ID list"
        ],
        [
            "Mark <a href=\"/api/channel\">channel/supergroup</a> message contents as read",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | <a href=\"/api/channel\">Channel/supergroup</a>\n<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | IDs of messages whose contents should be marked as read"
        ],
        [
            "Optional: notify the server that the user is currently busy in a call: this will automatically refuse all incoming phone calls until the current phone call is ended.",
            "<strong>peer</strong> | <a href=\"/type/InputPhoneCall\">InputPhoneCall</a> | The phone call we're currently in"
        ],
        [
            "Confirms receipt of messages by a client, cancels PUSH-notification sending.",
            "<strong>max_id</strong> | <a href=\"/type/int\">int</a> | Maximum message ID available in a client."
        ],
        [
            "Confirms receipt of messages in a secret chat by client, cancels push notifications.",
            "<strong>max_qts</strong> | <a href=\"/type/int\">int</a> | Maximum qts value available at the client"
        ],
        [
            "Reset the <a href=\"/api/srp\">2FA password</a> using the recovery code sent using <a href=\"/method/auth.requestPasswordRecovery\">auth.requestPasswordRecovery</a>.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>code</strong> | <a href=\"/type/string\">string</a> | Code received via email\n<strong>new_settings</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/account.PasswordInputSettings\">account.PasswordInputSettings</a> | New password"
        ],
        [
            "Register device to receive <a href=\"/api/push-updates\">PUSH notifications</a>",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>no_muted</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Avoid receiving (silent and invisible background) notifications. Useful to save battery.\n<strong>token_type</strong> | <a href=\"/type/int\">int</a> | Device token type.<br><strong>Possible values</strong>:<br><code>1</code> - APNS (device token for apple push)<br><code>2</code> - FCM (firebase token for google firebase)<br><code>3</code> - MPNS (channel URI for microsoft push)<br><code>4</code> - Simple push (endpoint for firefox's simple push API)<br><code>5</code> - Ubuntu phone (token for ubuntu push)<br><code>6</code> - Blackberry (token for blackberry push)<br><code>7</code> - Unused<br><code>8</code> - WNS (windows push)<br><code>9</code> - APNS VoIP (token for apple push VoIP)<br><code>10</code> - Web push (web push, see below)<br><code>11</code> - MPNS VoIP (token for microsoft push VoIP)<br><code>12</code> - Tizen (token for tizen push)<br><br>For <code>10</code> web push, the token must be a JSON-encoded object containing the keys described in <a href=\"/api/push-updates\">PUSH updates</a>\n<strong>token</strong> | <a href=\"/type/string\">string</a> | Device token\n<strong>app_sandbox</strong> | <a href=\"/type/Bool\">Bool</a> | If <a href=\"/constructor/boolTrue\">(boolTrue)</a> is transmitted, a sandbox-certificate will be used during transmission.\n<strong>secret</strong> | <a href=\"/type/bytes\">bytes</a> | For FCM and APNS VoIP, optional encryption key used to encrypt push notifications\n<strong>other_uids</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/long\">long</a>&gt; | List of user identifiers of other users currently using the client"
        ],
        [
            "Remove a sticker from the set where it belongs, bots only. The sticker set must have been created by the bot.",
            "<strong>sticker</strong> | <a href=\"/type/InputDocument\">InputDocument</a> | The sticker to remove"
        ],
        [
            "Reorder pinned dialogs",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>force</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | If set, dialogs pinned server-side but not present in the <code>order</code> field will be unpinned.\n<strong>folder_id</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/folders#peer-folders\">Peer folder ID, for more info click here</a>\n<strong>order</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputDialogPeer\">InputDialogPeer</a>&gt; | New dialog order"
        ],
        [
            "Reorder installed stickersets",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>masks</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Reorder mask stickersets\n<strong>order</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/long\">long</a>&gt; | New stickerset order by stickerset IDs"
        ],
        [
            "Report a message in a chat for violation of telegram's Terms of Service",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer\n<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | IDs of messages to report\n<strong>reason</strong> | <a href=\"/type/ReportReason\">ReportReason</a> | Why are these messages being reported\n<strong>message</strong> | <a href=\"/type/string\">string</a> | Comment for report moderation"
        ],
        [
            "Report a secret chat for spam",
            "<strong>peer</strong> | <a href=\"/type/InputEncryptedChat\">InputEncryptedChat</a> | The secret chat to report"
        ],
        [
            "Report a peer for violation of telegram's Terms of Service",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The peer to report\n<strong>reason</strong> | <a href=\"/type/ReportReason\">ReportReason</a> | The reason why this peer is being reported\n<strong>message</strong> | <a href=\"/type/string\">string</a> | Comment for report moderation"
        ],
        [
            "Report a profile photo of a dialog",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The dialog\n<strong>photo_id</strong> | <a href=\"/type/InputPhoto\">InputPhoto</a> | Dialog photo ID\n<strong>reason</strong> | <a href=\"/type/ReportReason\">ReportReason</a> | Report reason\n<strong>message</strong> | <a href=\"/type/string\">string</a> | Comment for report moderation"
        ],
        [
            "Report a new incoming chat for spam, if the <a href=\"/constructor/peerSettings\">peer settings</a> of the chat allow us to do that",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer to report"
        ],
        [
            "Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Supergroup\n<strong>participant</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Participant whose messages should be reported\n<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | IDs of spam messages"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "Start a telegram phone call",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>video</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to start a video call\n<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | Destination of the phone call\n<strong>random_id</strong> | <a href=\"/type/int\">int</a> | Random ID to avoid resending the same object\n<strong>g_a_hash</strong> | <a href=\"/type/bytes\">bytes</a> | <a href=\"/api/end-to-end/voice-calls\">Parameter for E2E encryption key exchange »</a>\n<strong>protocol</strong> | <a href=\"/type/PhoneCallProtocol\">PhoneCallProtocol</a> | Phone call settings"
        ],
        [
            "Sends a request to start a secret chat to the user.",
            "<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | User ID\n<strong>random_id</strong> | <a href=\"/type/int\">int</a> | Unique client request ID required to prevent resending. This also doubles as the chat ID.\n<strong>g_a</strong> | <a href=\"/type/bytes\">bytes</a> | <code>A = g ^ a mod p</code>, see <a href=\"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\">Wikipedia</a>"
        ],
        [
            "Request recovery code of a <a href=\"/api/srp\">2FA password</a>, only for accounts with a <a href=\"/api/srp#email-verification\">recovery email configured</a>.",
            "400 | PASSWORD_EMPTY | The provided password is empty.\n400 | PASSWORD_RECOVERY_NA | No email was set, can't recover password via email."
        ],
        [
            "Get more info about a Seamless Telegram Login authorization request, for more info <a href=\"/api/url-authorization\">click here »</a>",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>peer</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/InputPeer\">InputPeer</a> | Peer where the message is located\n<strong>msg_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/int\">int</a> | The message\n<strong>button_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/int\">int</a> | The ID of the button with the authorization request\n<strong>url</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/string\">string</a> | URL used for <a href=\"/api/url-authorization#link-url-authorization\">link URL authorization, click here for more info »</a>"
        ],
        [
            "Resend the login code via another medium, the phone code type is determined by the return value of the previous auth.sendCode/auth.resendCode: see <a href=\"/api/auth\">login</a> for more info.",
            "<strong>phone_number</strong> | <a href=\"/type/string\">string</a> | The phone number\n<strong>phone_code_hash</strong> | <a href=\"/type/string\">string</a> | The phone code hash obtained from <a href=\"/method/auth.sendCode\">auth.sendCode</a>"
        ],
        [
            "Resend the code to verify an email to use as <a href=\"/api/srp\">2FA recovery method</a>.",
            "No parameters"
        ],
        [
            "Log out an active <a href=\"/api/auth\">authorized session</a> by its hash",
            "<strong>hash</strong> | <a href=\"/type/long\">long</a> | Session hash"
        ],
        [
            "Terminates all user's authorized sessions except for the current one.",
            "406 | FRESH_RESET_AUTHORISATION_FORBIDDEN | You can't logout other sessions if less than 24 hours have passed since you logged on the current session."
        ],
        [
            "Clear bot commands for the specified bot scope and language code",
            "<strong>scope</strong> | <a href=\"/type/BotCommandScope\">BotCommandScope</a> | Command scope\n<strong>lang_code</strong> | <a href=\"/type/string\">string</a> | Language code"
        ],
        [
            "Resets all notification settings from users and groups.",
            "No parameters"
        ],
        [
            "Delete saved contacts",
            "No parameters"
        ],
        [
            "Reset <a href=\"/api/top-rating\">rating</a> of top peer",
            "<strong>category</strong> | <a href=\"/type/TopPeerCategory\">TopPeerCategory</a> | Top peer category\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer whose rating should be reset"
        ],
        [
            "Delete installed wallpapers",
            "No parameters"
        ],
        [
            "Log out an active web <a href=\"/widgets/login\">telegram login</a> session",
            "<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/constructor/webAuthorization\">Session</a> hash"
        ],
        [
            "Reset all active web <a href=\"/widgets/login\">telegram login</a> sessions",
            "No parameters"
        ],
        [
            "Resolve a @username to get peer info",
            "<strong>username</strong> | <a href=\"/type/string\">string</a> | @username to resolve"
        ],
        [
            "Request a reupload of a certain file to a <a href=\"/cdn\">CDN DC</a>.",
            "<strong>file_token</strong> | <a href=\"/type/bytes\">bytes</a> | File token\n<strong>request_token</strong> | <a href=\"/type/bytes\">bytes</a> | Request token"
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "Saves logs of application on the server.",
            "<strong>events</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputAppEvent\">InputAppEvent</a>&gt; | List of input events"
        ],
        [
            "Change media autodownload settings",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>low</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to save media in the low data usage preset\n<strong>high</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Whether to save media in the high data usage preset\n<strong>settings</strong> | <a href=\"/type/AutoDownloadSettings\">AutoDownloadSettings</a> | Media autodownload settings"
        ],
        [
            "Saves a part of a large file (over 10 MB in size) to be later passed to one of the methods.",
            "<strong>file_id</strong> | <a href=\"/type/long\">long</a> | Random file id, created by the client\n<strong>file_part</strong> | <a href=\"/type/int\">int</a> | Part sequence number\n<strong>file_total_parts</strong> | <a href=\"/type/int\">int</a> | Total number of parts\n<strong>bytes</strong> | <a href=\"/type/bytes\">bytes</a> | Binary data, part contents"
        ],
        [
            "Send phone call debug data to server",
            "<strong>peer</strong> | <a href=\"/type/InputPhoneCall\">InputPhoneCall</a> | Phone call\n<strong>debug</strong> | <a href=\"/type/DataJSON\">DataJSON</a> | Debug statistics obtained from libtgvoip"
        ],
        [
            "Set the default peer that will be used to join a group call in a specific dialog.",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The dialog\n<strong>join_as</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The default peer that will be used to join group calls in this dialog, presenting yourself as a specific user/channel."
        ],
        [
            "Save a message <a href=\"/api/drafts\">draft</a> associated to a chat.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>no_webpage</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Disable generation of the webpage preview\n<strong>reply_to_msg_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/int\">int</a> | Message ID the message should reply to\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Destination of the message that should be sent\n<strong>message</strong> | <a href=\"/type/string\">string</a> | The draft\n<strong>entities</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/MessageEntity\">MessageEntity</a>&gt; | Message <a href=\"/api/entities\">entities</a> for styled text"
        ],
        [
            "Saves a part of file for further sending to one of the methods.",
            "<strong>file_id</strong> | <a href=\"/type/long\">long</a> | Random file identifier created by the client\n<strong>file_part</strong> | <a href=\"/type/int\">int</a> | Numerical order of a part\n<strong>bytes</strong> | <a href=\"/type/bytes\">bytes</a> | Binary data, contend of a part"
        ],
        [
            "Add GIF to saved gifs list",
            "<strong>id</strong> | <a href=\"/type/InputDocument\">InputDocument</a> | GIF to save\n<strong>unsave</strong> | <a href=\"/type/Bool\">Bool</a> | Whether to remove GIF from saved gifs list"
        ],
        [
            "Add/remove sticker from recent stickers list",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>attached</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to add/remove stickers recently attached to photo or video files\n<strong>id</strong> | <a href=\"/type/InputDocument\">InputDocument</a> | Sticker\n<strong>unsave</strong> | <a href=\"/type/Bool\">Bool</a> | Whether to save or unsave the sticker"
        ],
        [
            "Securely save <a href=\"/passport\">Telegram Passport</a> document, <a href=\"/passport/encryption#encryption\">for more info see the passport docs »</a>",
            "<strong>value</strong> | <a href=\"/type/InputSecureValue\">InputSecureValue</a> | Secure value, <a href=\"/passport/encryption#encryption\">for more info see the passport docs »</a>\n<strong>secure_secret_id</strong> | <a href=\"/type/long\">long</a> | Passport secret hash, <a href=\"/passport/encryption#encryption\">for more info see the passport docs »</a>"
        ],
        [
            "Save a theme",
            "<strong>theme</strong> | <a href=\"/type/InputTheme\">InputTheme</a> | Theme to save\n<strong>unsave</strong> | <a href=\"/type/Bool\">Bool</a> | Unsave"
        ],
        [
            "Install/uninstall wallpaper",
            "<strong>wallpaper</strong> | <a href=\"/type/InputWallPaper\">InputWallPaper</a> | Wallpaper to save\n<strong>unsave</strong> | <a href=\"/type/Bool\">Bool</a> | Uninstall wallpaper?\n<strong>settings</strong> | <a href=\"/type/WallPaperSettings\">WallPaperSettings</a> | Wallpaper settings"
        ],
        [
            "Returns users found by username substring.",
            "<strong>q</strong> | <a href=\"/type/string\">string</a> | Target substring\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | Maximum number of users to be returned"
        ],
        [
            "Gets back found messages",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | User or chat, histories with which are searched, or <a href=\"/constructor/inputPeerEmpty\">(inputPeerEmpty)</a> constructor for global search\n<strong>q</strong> | <a href=\"/type/string\">string</a> | Text search request\n<strong>from_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/InputPeer\">InputPeer</a> | Only return messages sent by the specified user ID\n<strong>top_msg_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/int\">int</a> | <a href=\"/api/threads\">Thread ID</a>\n<strong>filter</strong> | <a href=\"/type/MessagesFilter\">MessagesFilter</a> | Filter to return only specified message types\n<strong>min_date</strong> | <a href=\"/type/int\">int</a> | If a positive value was transferred, only messages with a sending date bigger than the transferred one will be returned\n<strong>max_date</strong> | <a href=\"/type/int\">int</a> | If a positive value was transferred, only messages with a sending date smaller than the transferred one will be returned\n<strong>offset_id</strong> | <a href=\"/type/int\">int</a> | Only return messages starting from the specified message ID\n<strong>add_offset</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Additional offset</a>\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Number of results to return</a>\n<strong>max_id</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Maximum message ID to return</a>\n<strong>min_id</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Minimum message ID to return</a>\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets\">Hash</a>"
        ],
        [
            "Search for messages and peers globally",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>folder_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/int\">int</a> | <a href=\"/api/folders#peer-folders\">Peer folder ID, for more info click here</a>\n<strong>q</strong> | <a href=\"/type/string\">string</a> | Query\n<strong>filter</strong> | <a href=\"/type/MessagesFilter\">MessagesFilter</a> | Global search filter\n<strong>min_date</strong> | <a href=\"/type/int\">int</a> | If a positive value was specified, the method will return only messages with date bigger than min_date\n<strong>max_date</strong> | <a href=\"/type/int\">int</a> | If a positive value was transferred, the method will return only messages with date smaller than max_date\n<strong>offset_rate</strong> | <a href=\"/type/int\">int</a> | Initially 0, then set to the <a href=\"/constructor/messages.messagesSlice\"><code>next_rate</code> parameter of messages.messagesSlice</a>\n<strong>offset_peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>offset_id</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>\n<strong>limit</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/offsets\">Offsets for pagination, for more info click here</a>"
        ],
        [
            "Search for stickersets",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>exclude_featured</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Exclude featured stickersets from results\n<strong>q</strong> | <a href=\"/type/string\">string</a> | Query string\n<strong>hash</strong> | <a href=\"/type/long\">long</a> | <a href=\"/api/offsets#hash-generation\">Hash for pagination, for more info click here</a>"
        ],
        [
            "Verify a new phone number to associate to the current account",
            "<strong>phone_number</strong> | <a href=\"/type/string\">string</a> | New phone number\n<strong>settings</strong> | <a href=\"/type/CodeSettings\">CodeSettings</a> | Phone code settings"
        ],
        [
            "Send the verification code for login",
            "<strong>phone_number</strong> | <a href=\"/type/string\">string</a> | Phone number in international format\n<strong>api_id</strong> | <a href=\"/type/int\">int</a> | Application identifier (see <a href=\"/myapp\">App configuration</a>)\n<strong>api_hash</strong> | <a href=\"/type/string\">string</a> | Application secret hash (see <a href=\"/myapp\">App configuration</a>)\n<strong>settings</strong> | <a href=\"/type/CodeSettings\">CodeSettings</a> | Settings for the code type to send"
        ],
        [
            "Send confirmation code to cancel account deletion, for more info <a href=\"/api/account-deletion\">click here »</a>",
            "<strong>hash</strong> | <a href=\"/type/string\">string</a> | The hash from the service notification, for more info <a href=\"/api/account-deletion\">click here »</a>\n<strong>settings</strong> | <a href=\"/type/CodeSettings\">CodeSettings</a> | Phone code settings"
        ],
        [
            "Sends a custom request; for bots only",
            "<strong>custom_method</strong> | <a href=\"/type/string\">string</a> | The method name\n<strong>params</strong> | <a href=\"/type/DataJSON\">DataJSON</a> | JSON-serialized method parameters"
        ],
        [
            "Sends a text message to a secret chat.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>silent</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Send encrypted message without a notification\n<strong>peer</strong> | <a href=\"/type/InputEncryptedChat\">InputEncryptedChat</a> | Secret chat ID\n<strong>random_id</strong> | <a href=\"/type/long\">long</a> | Unique client message ID, necessary to avoid message resending\n<strong>data</strong> | <a href=\"/type/bytes\">bytes</a> | TL-serialization of <a href=\"/type/DecryptedMessage\">DecryptedMessage</a> type, encrypted with a key that was created during chat initialization"
        ],
        [
            "Sends a message with a file attachment to a secret chat",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>silent</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to send the file without triggering a notification\n<strong>peer</strong> | <a href=\"/type/InputEncryptedChat\">InputEncryptedChat</a> | Secret chat ID\n<strong>random_id</strong> | <a href=\"/type/long\">long</a> | Unique client message ID necessary to prevent message resending\n<strong>data</strong> | <a href=\"/type/bytes\">bytes</a> | TL-serialization of <a href=\"/type/DecryptedMessage\">DecryptedMessage</a> type, encrypted with a key generated during chat initialization\n<strong>file</strong> | <a href=\"/type/InputEncryptedFile\">InputEncryptedFile</a> | File attachment for the secret chat"
        ],
        [
            "Sends a service message to a secret chat.",
            "<strong>peer</strong> | <a href=\"/type/InputEncryptedChat\">InputEncryptedChat</a> | Secret chat ID\n<strong>random_id</strong> | <a href=\"/type/long\">long</a> | Unique client message ID required to prevent message resending\n<strong>data</strong> | <a href=\"/type/bytes\">bytes</a> | TL-serialization of  <a href=\"/type/DecryptedMessage\">DecryptedMessage</a> type, encrypted with a key generated during chat initialization"
        ],
        [
            "Send a result obtained using <a href=\"/method/messages.getInlineBotResults\">messages.getInlineBotResults</a>.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>silent</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.5?<a href=\"/constructor/true\">true</a> | Whether to send the message silently (no notification will be triggered on the other client)\n<strong>background</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.6?<a href=\"/constructor/true\">true</a> | Whether to send the message in background\n<strong>clear_draft</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.7?<a href=\"/constructor/true\">true</a> | Whether to clear the <a href=\"/api/drafts\">draft</a>\n<strong>hide_via</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.11?<a href=\"/constructor/true\">true</a> | Whether to hide the <code>via @botname</code> in the resulting message (only for bot usernames encountered in the <a href=\"/constructor/config\">config</a>)\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Destination\n<strong>reply_to_msg_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/int\">int</a> | ID of the message this message should reply to\n<strong>random_id</strong> | <a href=\"/type/long\">long</a> | Random ID to avoid resending the same query\n<strong>query_id</strong> | <a href=\"/type/long\">long</a> | Query ID from <a href=\"/method/messages.getInlineBotResults\">messages.getInlineBotResults</a>\n<strong>id</strong> | <a href=\"/type/string\">string</a> | Result ID from <a href=\"/method/messages.getInlineBotResults\">messages.getInlineBotResults</a>\n<strong>schedule_date</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.10?<a href=\"/type/int\">int</a> | Scheduled message date for scheduled messages\n<strong>send_as</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.13?<a href=\"/type/InputPeer\">InputPeer</a> | Send this message as the specified peer"
        ],
        [
            "Send a media",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>silent</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.5?<a href=\"/constructor/true\">true</a> | Send message silently (no notification should be triggered)\n<strong>background</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.6?<a href=\"/constructor/true\">true</a> | Send message in background\n<strong>clear_draft</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.7?<a href=\"/constructor/true\">true</a> | Clear the draft\n<strong>noforwards</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.14?<a href=\"/constructor/true\">true</a> | Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have <a href=\"https://telegram.org/blog/protected-content-delete-by-date-and-more\">content protection</a> enabled\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Destination\n<strong>reply_to_msg_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/int\">int</a> | Message ID to which this message should reply to\n<strong>media</strong> | <a href=\"/type/InputMedia\">InputMedia</a> | Attached media\n<strong>message</strong> | <a href=\"/type/string\">string</a> | Caption\n<strong>random_id</strong> | <a href=\"/type/long\">long</a> | Random ID to avoid resending the same message\n<strong>reply_markup</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/ReplyMarkup\">ReplyMarkup</a> | Reply markup for bot keyboards\n<strong>entities</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/MessageEntity\">MessageEntity</a>&gt; | Message <a href=\"/api/entities\">entities</a> for styled text\n<strong>schedule_date</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.10?<a href=\"/type/int\">int</a> | Scheduled message date for <a href=\"/api/scheduled-messages\">scheduled messages</a>\n<strong>send_as</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.13?<a href=\"/type/InputPeer\">InputPeer</a> | Send this message as the specified peer"
        ],
        [
            "Sends a message to a chat",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>no_webpage</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Set this flag to disable generation of the webpage preview\n<strong>silent</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.5?<a href=\"/constructor/true\">true</a> | Send this message silently (no notifications for the receivers)\n<strong>background</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.6?<a href=\"/constructor/true\">true</a> | Send this message as background message\n<strong>clear_draft</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.7?<a href=\"/constructor/true\">true</a> | Clear the draft field\n<strong>noforwards</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.14?<a href=\"/constructor/true\">true</a> | Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have <a href=\"https://telegram.org/blog/protected-content-delete-by-date-and-more\">content protection</a> enabled\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The destination where the message will be sent\n<strong>reply_to_msg_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/int\">int</a> | The message ID to which this message will reply to\n<strong>message</strong> | <a href=\"/type/string\">string</a> | The message\n<strong>random_id</strong> | <a href=\"/type/long\">long</a> | Unique client message ID required to prevent message resending\n<strong>reply_markup</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/ReplyMarkup\">ReplyMarkup</a> | Reply markup for sending bot buttons\n<strong>entities</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/MessageEntity\">MessageEntity</a>&gt; | Message <a href=\"/api/entities\">entities</a> for sending styled text\n<strong>schedule_date</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.10?<a href=\"/type/int\">int</a> | Scheduled message date for <a href=\"/api/scheduled-messages\">scheduled messages</a>\n<strong>send_as</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.13?<a href=\"/type/InputPeer\">InputPeer</a> | Send this message as the specified peer"
        ],
        [
            "Send an <a href=\"/api/files#albums-grouped-media\">album or grouped media</a>",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>silent</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.5?<a href=\"/constructor/true\">true</a> | Whether to send the album silently (no notification triggered)\n<strong>background</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.6?<a href=\"/constructor/true\">true</a> | Send in background?\n<strong>clear_draft</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.7?<a href=\"/constructor/true\">true</a> | Whether to clear <a href=\"/api/drafts\">drafts</a>\n<strong>noforwards</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.14?<a href=\"/constructor/true\">true</a> | Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have <a href=\"https://telegram.org/blog/protected-content-delete-by-date-and-more\">content protection</a> enabled\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The destination chat\n<strong>reply_to_msg_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/int\">int</a> | The message to reply to\n<strong>multi_media</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputSingleMedia\">InputSingleMedia</a>&gt; | The medias to send\n<strong>schedule_date</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.10?<a href=\"/type/int\">int</a> | Scheduled message date for scheduled messages\n<strong>send_as</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.13?<a href=\"/type/InputPeer\">InputPeer</a> | Send this message as the specified peer"
        ],
        [
            "Send compiled payment form",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>form_id</strong> | <a href=\"/type/long\">long</a> | Form ID\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The peer where the payment form was sent\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | Message ID of form\n<strong>requested_info_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/string\">string</a> | ID of saved and validated <a href=\"/constructor/payments.validatedRequestedInfo\">order info</a>\n<strong>shipping_option_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/string\">string</a> | Chosen shipping option ID\n<strong>credentials</strong> | <a href=\"/type/InputPaymentCredentials\">InputPaymentCredentials</a> | Payment credentials\n<strong>tip_amount</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/long\">long</a> | Tip, in the smallest units of the currency (integer, not float/double). For example, for a price of <code>US$ 1.45</code> pass <code>amount = 145</code>. See the exp parameter in <a href=\"/bots/payments/currencies.json\">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)."
        ],
        [
            "Send scheduled messages right away",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer\n<strong>id</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | Scheduled message IDs"
        ],
        [
            "Notify the other user in a private chat that a screenshot of the chat was taken",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Other user\n<strong>reply_to_msg_id</strong> | <a href=\"/type/int\">int</a> | ID of message that was screenshotted, can be 0\n<strong>random_id</strong> | <a href=\"/type/long\">long</a> | Random ID to avoid message resending"
        ],
        [
            "Send VoIP signaling data",
            "<strong>peer</strong> | <a href=\"/type/InputPhoneCall\">InputPhoneCall</a> | Phone call\n<strong>data</strong> | <a href=\"/type/bytes\">bytes</a> | Signaling payload"
        ],
        [
            "Send the verification email code for telegram <a href=\"/passport\">passport</a>.",
            "<strong>email</strong> | <a href=\"/type/string\">string</a> | The email where to send the code"
        ],
        [
            "Send the verification phone code for telegram <a href=\"/passport\">passport</a>.",
            "<strong>phone_number</strong> | <a href=\"/type/string\">string</a> | The phone number to verify\n<strong>settings</strong> | <a href=\"/type/CodeSettings\">CodeSettings</a> | Phone code settings"
        ],
        [
            "Vote in a <a href=\"/constructor/poll\">poll</a>",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The chat where the poll was sent\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | The message ID of the poll\n<strong>options</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/bytes\">bytes</a>&gt; | The options that were chosen"
        ],
        [
            "Set account self-destruction period",
            "<strong>ttl</strong> | <a href=\"/type/AccountDaysTTL\">AccountDaysTTL</a> | Time to live in days"
        ],
        [
            "Set the callback answer to a user button press (bots only)",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>alert</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Whether to show the message as a popup instead of a toast notification\n<strong>query_id</strong> | <a href=\"/type/long\">long</a> | Query ID\n<strong>message</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/string\">string</a> | Popup to show\n<strong>url</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/string\">string</a> | URL to open\n<strong>cache_time</strong> | <a href=\"/type/int\">int</a> | Cache validity"
        ],
        [
            "Set bot command list",
            "<strong>scope</strong> | <a href=\"/type/BotCommandScope\">BotCommandScope</a> | Command scope\n<strong>lang_code</strong> | <a href=\"/type/string\">string</a> | Language code\n<strong>commands</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/BotCommand\">BotCommand</a>&gt; | Bot commands"
        ],
        [
            "Once the user has confirmed their payment and shipping details, the bot receives an <a href=\"/constructor/updateBotPrecheckoutQuery\">updateBotPrecheckoutQuery</a> update.<br>\nUse this method to respond to such pre-checkout queries.<br>\n<strong>Note</strong>: Telegram must receive an answer within 10 seconds after the pre-checkout query was sent.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>success</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Set this flag if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order, otherwise do not set it, and set the <code>error</code> field, instead\n<strong>query_id</strong> | <a href=\"/type/long\">long</a> | Unique identifier for the query to be answered\n<strong>error</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/string\">string</a> | Required if the <code>success</code> isn't set. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user."
        ],
        [
            "If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the bot will receive an <a href=\"/constructor/updateBotShippingQuery\">updateBotShippingQuery</a> update. Use this method to reply to shipping queries.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>query_id</strong> | <a href=\"/type/long\">long</a> | Unique identifier for the query to be answered\n<strong>error</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/string\">string</a> | Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable\"). Telegram will display this message to the user.\n<strong>shipping_options</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/ShippingOption\">ShippingOption</a>&gt; | A vector of available shipping options."
        ],
        [
            "Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only",
            "<strong>pending_updates_count</strong> | <a href=\"/type/int\">int</a> | Number of pending updates\n<strong>message</strong> | <a href=\"/type/string\">string</a> | Error message, if present"
        ],
        [
            "Rate a call",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>user_initiative</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether the user decided on their own initiative to rate the call\n<strong>peer</strong> | <a href=\"/type/InputPhoneCall\">InputPhoneCall</a> | The call to rate\n<strong>rating</strong> | <a href=\"/type/int\">int</a> | Rating in <code>1-5</code> stars\n<strong>comment</strong> | <a href=\"/type/string\">string</a> | An additional comment"
        ],
        [
            "Toggle contact sign up notifications",
            "<strong>silent</strong> | <a href=\"/type/Bool\">Bool</a> | Whether to disable contact sign up notifications"
        ],
        [
            "Set sensitive content settings (for viewing or hiding NSFW content)",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>sensitive_enabled</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Enable NSFW content"
        ],
        [
            "Associate a group to a channel as <a href=\"/api/discussion\">discussion group</a> for that channel",
            "<strong>broadcast</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel\n<strong>group</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | <a href=\"/api/discussion\">Discussion group</a> to associate to the channel"
        ],
        [
            "Send typing event by the current user to a secret chat.",
            "<strong>peer</strong> | <a href=\"/type/InputEncryptedChat\">InputEncryptedChat</a> | Secret chat ID\n<strong>typing</strong> | <a href=\"/type/Bool\">Bool</a> | Typing.<br><strong>Possible values</strong>:<br><a href=\"/constructor/boolTrue\">(boolTrue)</a>, if the user started typing and more than <strong>5 seconds</strong> have passed since the last request<br><a href=\"/constructor/boolFalse\">(boolFalse)</a>, if the user stopped typing"
        ],
        [
            "Use this method to set the score of the specified user in a game sent as a normal message (bots only).",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>edit_message</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Set this flag if the game message should be automatically edited to include the current scoreboard\n<strong>force</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Unique identifier of target chat\n<strong>id</strong> | <a href=\"/type/int\">int</a> | Identifier of the sent message\n<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | User identifier\n<strong>score</strong> | <a href=\"/type/int\">int</a> | New score"
        ],
        [
            "Set global privacy settings",
            "<strong>settings</strong> | <a href=\"/type/GlobalPrivacySettings\">GlobalPrivacySettings</a> | Global privacy settings"
        ],
        [
            "Set maximum Time-To-Live of all messages in the specified chat",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The dialog\n<strong>period</strong> | <a href=\"/type/int\">int</a> | Automatically delete all messages sent in the chat after this many seconds"
        ],
        [
            "Answer an inline query, for bots only",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>gallery</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Set this flag if the results are composed of media files\n<strong>private</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Set this flag if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query\n<strong>query_id</strong> | <a href=\"/type/long\">long</a> | Unique identifier for the answered query\n<strong>results</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputBotInlineResult\">InputBotInlineResult</a>&gt; | Vector of results for the inline query\n<strong>cache_time</strong> | <a href=\"/type/int\">int</a> | The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.\n<strong>next_offset</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/string\">string</a> | Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.\n<strong>switch_pm</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/InlineBotSwitchPM\">InlineBotSwitchPM</a> | If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with a certain parameter."
        ],
        [
            "Use this method to set the score of the specified user in a game sent as an inline message (bots only).",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>edit_message</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Set this flag if the game message should be automatically edited to include the current scoreboard\n<strong>force</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters\n<strong>id</strong> | <a href=\"/type/InputBotInlineMessageID\">InputBotInlineMessageID</a> | ID of the inline message\n<strong>user_id</strong> | <a href=\"/type/InputUser\">InputUser</a> | User identifier\n<strong>score</strong> | <a href=\"/type/int\">int</a> | New score"
        ],
        [
            "Change privacy settings of current account",
            "<strong>key</strong> | <a href=\"/type/InputPrivacyKey\">InputPrivacyKey</a> | Peers to which the privacy rules apply\n<strong>rules</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputPrivacyRule\">InputPrivacyRule</a>&gt; | New privacy rules"
        ],
        [
            "Notify the user that the sent <a href=\"/passport\">passport</a> data contains some errors The user will not be able to re-submit their Passport data to you until the errors are fixed (the contents of the field for which you returned the error must change).",
            "<strong>id</strong> | <a href=\"/type/InputUser\">InputUser</a> | The user\n<strong>errors</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/SecureValueError\">SecureValueError</a>&gt; | Errors"
        ],
        [
            "Set stickerset thumbnail",
            "<strong>stickerset</strong> | <a href=\"/type/InputStickerSet\">InputStickerSet</a> | Stickerset\n<strong>thumb</strong> | <a href=\"/type/InputDocument\">InputDocument</a> | Thumbnail"
        ],
        [
            "Associate a stickerset to the supergroup",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Supergroup\n<strong>stickerset</strong> | <a href=\"/type/InputStickerSet\">InputStickerSet</a> | The stickerset to associate"
        ],
        [
            "Sends a current user typing event (see <a href=\"/type/SendMessageAction\">SendMessageAction</a> for all event types) to a conversation partner or group.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Target user or group\n<strong>top_msg_id</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/int\">int</a> | <a href=\"/api/threads\">Thread ID</a>\n<strong>action</strong> | <a href=\"/type/SendMessageAction\">SendMessageAction</a> | Type of action<br>Parameter added in <a href=\"/api/layers#layer-17\">Layer 17</a>."
        ],
        [
            "No occurence in TG Schema",
            "No parameters"
        ],
        [
            "Signs in a user with a validated phone number.",
            "<strong>phone_number</strong> | <a href=\"/type/string\">string</a> | Phone number in the international format\n<strong>phone_code_hash</strong> | <a href=\"/type/string\">string</a> | SMS-message ID, obtained from <a href=\"/method/auth.sendCode\">auth.sendCode</a>\n<strong>phone_code</strong> | <a href=\"/type/string\">string</a> | Valid numerical code from the SMS-message"
        ],
        [
            "Registers a validated phone number in the system.",
            "<strong>phone_number</strong> | <a href=\"/type/string\">string</a> | Phone number in the international format\n<strong>phone_code_hash</strong> | <a href=\"/type/string\">string</a> | SMS-message ID\n<strong>first_name</strong> | <a href=\"/type/string\">string</a> | New user first name\n<strong>last_name</strong> | <a href=\"/type/string\">string</a> | New user last name"
        ],
        [
            "Start a conversation with a bot using a <a href=\"/bots#deep-linking\">deep linking parameter</a>",
            "<strong>bot</strong> | <a href=\"/type/InputUser\">InputUser</a> | The bot\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The chat where to start the bot, can be the bot's private chat or a group\n<strong>random_id</strong> | <a href=\"/type/long\">long</a> | Random ID to avoid resending the same message\n<strong>start_param</strong> | <a href=\"/type/string\">string</a> | <a href=\"/bots#deep-linking\">Deep linking parameter</a>"
        ],
        [
            "Complete the <a href=\"/api/import\">history import process</a>, importing all messages into the chat.<br>\nTo be called only after initializing the import with <a href=\"/method/messages.initHistoryImport\">messages.initHistoryImport</a> and uploading all files using <a href=\"/method/messages.uploadImportedMedia\">messages.uploadImportedMedia</a>.",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The Telegram chat where the messages should be <a href=\"/api/import\">imported, click here for more info »</a>\n<strong>import_id</strong> | <a href=\"/type/long\">long</a> | Identifier of a history import session, returned by <a href=\"/method/messages.initHistoryImport\">messages.initHistoryImport</a>."
        ],
        [
            "Start a scheduled group call.",
            "<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | The scheduled group call"
        ],
        [
            "Suggests a short name for a given stickerpack name",
            "<strong>title</strong> | <a href=\"/type/string\">string</a> | Sticker pack name"
        ],
        [
            "Pin/unpin a dialog",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>pinned</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to pin or unpin the dialog\n<strong>peer</strong> | <a href=\"/type/InputDialogPeer\">InputDialogPeer</a> | The dialog to pin"
        ],
        [
            "Start or stop recording a group call: the recorded audio and video streams will be automatically sent to <code>Saved messages</code> (the chat with ourselves).",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>start</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Whether to start or stop recording\n<strong>video</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/constructor/true\">true</a> | Whether to also record video streams\n<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | The group call or livestream\n<strong>title</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/string\">string</a> | Recording title\n<strong>video_portrait</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/Bool\">Bool</a> | If video stream recording is enabled, whether to record in portrait or landscape mode"
        ],
        [
            "Change group call settings",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>reset_invite_hash</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Invalidate existing invite links\n<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | Group call\n<strong>join_muted</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/Bool\">Bool</a> | Whether all users will that join this group call are muted by default upon joining the group call"
        ],
        [
            "Subscribe or unsubscribe to a scheduled group call",
            "<strong>call</strong> | <a href=\"/type/InputGroupCall\">InputGroupCall</a> | Scheduled group call\n<strong>subscribed</strong> | <a href=\"/type/Bool\">Bool</a> | Enable or disable subscription"
        ],
        [
            "Hide/unhide message history for new channel/supergroup users",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel/supergroup\n<strong>enabled</strong> | <a href=\"/type/Bool\">Bool</a> | Hide/unhide"
        ],
        [
            "Enable/disable message signatures in channels",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel\n<strong>enabled</strong> | <a href=\"/type/Bool\">Bool</a> | Value"
        ],
        [
            "Toggle supergroup slow mode: if enabled, users will only be able to send one message every <code>seconds</code> seconds",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | The <a href=\"/api/channel\">supergroup</a>\n<strong>seconds</strong> | <a href=\"/type/int\">int</a> | Users will only be able to send one message every <code>seconds</code> seconds, <code>0</code> to disable the limitation"
        ],
        [
            "Apply changes to multiple stickersets",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>uninstall</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Uninstall the specified stickersets\n<strong>archive</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Archive the specified stickersets\n<strong>unarchive</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/constructor/true\">true</a> | Unarchive the specified stickersets\n<strong>stickersets</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputStickerSet\">InputStickerSet</a>&gt; | Stickersets to act upon"
        ],
        [
            "Enable/disable <a href=\"/api/top-rating\">top peers</a>",
            "<strong>enabled</strong> | <a href=\"/type/Bool\">Bool</a> | Enable/disable"
        ],
        [
            "Deletes the user from the blacklist.",
            "<strong>id</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | User ID"
        ],
        [
            "Uninstall a stickerset",
            "<strong>stickerset</strong> | <a href=\"/type/InputStickerSet\">InputStickerSet</a> | The stickerset to uninstall"
        ],
        [
            "<a href=\"/api/pin\">Unpin</a> all pinned messages",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Chat where to unpin"
        ],
        [
            "Deletes a device by its token, stops sending PUSH-notifications to it.",
            "<strong>token_type</strong> | <a href=\"/type/int\">int</a> | Device token type.<br><strong>Possible values</strong>:<br><code>1</code> - APNS (device token for apple push)<br><code>2</code> - FCM (firebase token for google firebase)<br><code>3</code> - MPNS (channel URI for microsoft push)<br><code>4</code> - Simple push (endpoint for firefox's simple push API)<br><code>5</code> - Ubuntu phone (token for ubuntu push)<br><code>6</code> - Blackberry (token for blackberry push)<br><code>7</code> - Unused<br><code>8</code> - WNS (windows push)<br><code>9</code> - APNS VoIP (token for apple push VoIP)<br><code>10</code> - Web push (web push, see below)<br><code>11</code> - MPNS VoIP (token for microsoft push VoIP)<br><code>12</code> - Tizen (token for tizen push)<br><br>For <code>10</code> web push, the token must be a JSON-encoded object containing the keys described in <a href=\"/api/push-updates\">PUSH updates</a>\n<strong>token</strong> | <a href=\"/type/string\">string</a> | Device token\n<strong>other_uids</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/long\">long</a>&gt; | List of user identifiers of other users currently using the client"
        ],
        [
            "When client-side passcode lock feature is enabled, will not show message texts in incoming <a href=\"/api/push-updates\">PUSH notifications</a>.",
            "<strong>period</strong> | <a href=\"/type/int\">int</a> | Inactivity period after which to start hiding message texts in <a href=\"/api/push-updates\">PUSH notifications</a>."
        ],
        [
            "Update <a href=\"/api/folders\">folder</a>",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>id</strong> | <a href=\"/type/int\">int</a> | <a href=\"/api/folders\">Folder</a> ID\n<strong>filter</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/DialogFilter\">DialogFilter</a> | <a href=\"/api/folders\">Folder</a> info"
        ],
        [
            "Reorder <a href=\"/api/folders\">folders</a>",
            "<strong>order</strong> | <a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/int\">int</a>&gt; | New <a href=\"/api/folders\">folder</a> order"
        ],
        [
            "Edits notification settings from a given user/group, from all users/all groups.",
            "<strong>peer</strong> | <a href=\"/type/InputNotifyPeer\">InputNotifyPeer</a> | Notification source\n<strong>settings</strong> | <a href=\"/type/InputPeerNotifySettings\">InputPeerNotifySettings</a> | Notification settings"
        ],
        [
            "Set a new 2FA password",
            "<strong>password</strong> | <a href=\"/type/InputCheckPasswordSRP\">InputCheckPasswordSRP</a> | The old password (see <a href=\"/api/srp\">SRP</a>)\n<strong>new_settings</strong> | <a href=\"/type/account.PasswordInputSettings\">account.PasswordInputSettings</a> | The new password (see <a href=\"/api/srp\">SRP</a>)"
        ],
        [
            "Pin a message",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>silent</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Pin the message silently, without triggering a notification\n<strong>unpin</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/constructor/true\">true</a> | Whether the message should unpinned or pinned\n<strong>pm_oneside</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/constructor/true\">true</a> | Whether the message should only be pinned on the local side of a one-to-one chat\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The peer where to pin the message\n<strong>id</strong> | <a href=\"/type/int\">int</a> | The message to pin or unpin"
        ],
        [
            "Updates user profile.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>first_name</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/string\">string</a> | New user first name\n<strong>last_name</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/string\">string</a> | New user last name\n<strong>about</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/string\">string</a> | New bio"
        ],
        [
            "Installs a previously uploaded photo as a profile photo.",
            "<strong>id</strong> | <a href=\"/type/InputPhoto\">InputPhoto</a> | Input photo"
        ],
        [
            "Updates online user status.",
            "<strong>offline</strong> | <a href=\"/type/Bool\">Bool</a> | If <a href=\"/constructor/boolTrue\">(boolTrue)</a> is transmitted, user status will change to <a href=\"/constructor/userStatusOffline\">(userStatusOffline)</a>."
        ],
        [
            "Update theme",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>format</strong> | <a href=\"/type/string\">string</a> | Theme format, a string that identifies the theming engines supported by the client\n<strong>theme</strong> | <a href=\"/type/InputTheme\">InputTheme</a> | Theme to update\n<strong>slug</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/string\">string</a> | Unique theme ID\n<strong>title</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/string\">string</a> | Theme name\n<strong>document</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/InputDocument\">InputDocument</a> | Theme file\n<strong>settings</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.3?<a href=\"/type/Vector%20t\">Vector</a>&lt;<a href=\"/type/InputThemeSettings\">InputThemeSettings</a>&gt; | Theme settings"
        ],
        [
            "Changes username for the current user.",
            "<strong>username</strong> | <a href=\"/type/string\">string</a> | username or empty string if username is to be removed<br>Accepted characters: a-z (case-insensitive), 0-9 and underscores.<br>Length: 5-32 characters."
        ],
        [
            "Change the username of a supergroup/channel",
            "<strong>channel</strong> | <a href=\"/type/InputChannel\">InputChannel</a> | Channel\n<strong>username</strong> | <a href=\"/type/string\">string</a> | New username"
        ],
        [
            "Upload encrypted file and associate it to a secret chat",
            "<strong>peer</strong> | <a href=\"/type/InputEncryptedChat\">InputEncryptedChat</a> | The secret chat to associate the file to\n<strong>file</strong> | <a href=\"/type/InputEncryptedFile\">InputEncryptedFile</a> | The file"
        ],
        [
            "Upload a media file associated with an <a href=\"/api/import\">imported chat, click here for more info »</a>.",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The Telegram chat where the media will be imported\n<strong>import_id</strong> | <a href=\"/type/long\">long</a> | Identifier of a <a href=\"/api/import\">history import session</a>, returned by <a href=\"/method/messages.initHistoryImport\">messages.initHistoryImport</a>\n<strong>file_name</strong> | <a href=\"/type/string\">string</a> | File name\n<strong>media</strong> | <a href=\"/type/InputMedia\">InputMedia</a> | Media metadata"
        ],
        [
            "Upload a file and associate it to a chat (without actually sending it to the chat)",
            "<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | The chat, can be an <a href=\"/constructor/inputPeerEmpty\">inputPeerEmpty</a> for bots\n<strong>media</strong> | <a href=\"/type/InputMedia\">InputMedia</a> | File uploaded in chunks as described in <a href=\"/api/files\">files »</a>"
        ],
        [
            "Updates current user profile photo.",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>file</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/InputFile\">InputFile</a> | File saved in parts by means of <a href=\"/method/upload.saveFilePart\">upload.saveFilePart</a> method\n<strong>video</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.1?<a href=\"/type/InputFile\">InputFile</a> | <a href=\"/api/files#animated-profile-pictures\">Animated profile picture</a> video\n<strong>video_start_ts</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.2?<a href=\"/type/double\">double</a> | Floating point UNIX timestamp in seconds, indicating the frame of the video that should be used as static preview."
        ],
        [
            "Upload theme",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>file</strong> | <a href=\"/type/InputFile\">InputFile</a> | Theme file uploaded as described in <a href=\"/api/files\">files »</a>\n<strong>thumb</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/type/InputFile\">InputFile</a> | Thumbnail\n<strong>file_name</strong> | <a href=\"/type/string\">string</a> | File name\n<strong>mime_type</strong> | <a href=\"/type/string\">string</a> | MIME type, must be <code>application/x-tgtheme-{format}</code>, where <code>format</code> depends on the client"
        ],
        [
            "Create and upload a new wallpaper",
            "<strong>file</strong> | <a href=\"/type/InputFile\">InputFile</a> | The JPG/PNG wallpaper\n<strong>mime_type</strong> | <a href=\"/type/string\">string</a> | MIME type of uploaded wallpaper\n<strong>settings</strong> | <a href=\"/type/WallPaperSettings\">WallPaperSettings</a> | Wallpaper settings"
        ],
        [
            "Submit requested order information for validation",
            "<strong>flags</strong> | <a href=\"/type/%23\">#</a> | Flags, see <a href=\"/mtproto/TL-combinators#conditional-fields\">TL conditional fields</a>\n<strong>save</strong> | <a href=\"/mtproto/TL-combinators#conditional-fields\">flags</a>.0?<a href=\"/constructor/true\">true</a> | Save order information to re-use it for future orders\n<strong>peer</strong> | <a href=\"/type/InputPeer\">InputPeer</a> | Peer where the payment form was sent\n<strong>msg_id</strong> | <a href=\"/type/int\">int</a> | Message ID of payment form\n<strong>info</strong> | <a href=\"/type/PaymentRequestedInfo\">PaymentRequestedInfo</a> | Requested order information"
        ],
        [
            "Verify an email address for telegram <a href=\"/passport\">passport</a>.",
            "<strong>email</strong> | <a href=\"/type/string\">string</a> | The email to verify\n<strong>code</strong> | <a href=\"/type/string\">string</a> | The verification code that was received"
        ],
        [
            "Verify a phone number for telegram <a href=\"/passport\">passport</a>.",
            "<strong>phone_number</strong> | <a href=\"/type/string\">string</a> | Phone number\n<strong>phone_code_hash</strong> | <a href=\"/type/string\">string</a> | Phone code hash received from the call to <a href=\"/method/account.sendVerifyPhoneCode\">account.sendVerifyPhoneCode</a>\n<strong>phone_code</strong> | <a href=\"/type/string\">string</a> | Code received after the call to <a href=\"/method/account.sendVerifyPhoneCode\">account.sendVerifyPhoneCode</a>"
        ]
    ]
}